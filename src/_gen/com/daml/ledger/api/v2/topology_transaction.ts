// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/topology_transaction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../google/protobuf/timestamp";
import { ParticipantPermission, participantPermissionFromJSON, participantPermissionToJSON } from "./state_service";
import { TraceContext } from "./trace_context";

export const protobufPackage = "com.daml.ledger.api.v2";

export interface TopologyTransaction {
  /**
   * Assigned by the server. Useful for correlating logs.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Required
   */
  updateId: string;
  /**
   * The absolute offset. The details of this field are described in ``community/ledger-api/README.md``.
   * Required, it is a valid absolute offset (positive integer).
   */
  offset: number;
  /**
   * A valid synchronizer id.
   * Identifies the synchronizer that synchronized the topology transaction.
   * Required
   */
  synchronizerId: string;
  /**
   * The time at which the changes in the topology transaction become effective. There is a small delay between a
   * topology transaction being sequenced and the changes it contains becoming effective. Topology transactions appear
   * in order relative to a synchronizer based on their effective time rather than their sequencing time.
   * Required
   */
  recordTime:
    | Date
    | undefined;
  /**
   * A non-empty list of topology events.
   * Required
   */
  events: TopologyEvent[];
  /**
   * Optional; ledger API trace context
   *
   * The trace context transported in this message corresponds to the trace context supplied
   * by the client application in a HTTP2 header of the original command submission.
   * We typically use a header to transfer this type of information. Here we use message
   * body, because it is used in gRPC streams which do not support per message headers.
   * This field will be populated with the trace context contained in the original submission.
   * If that was not provided, a unique ledger-api-server generated trace context will be used
   * instead.
   */
  traceContext: TraceContext | undefined;
}

export interface TopologyEvent {
  participantAuthorizationChanged?: ParticipantAuthorizationChanged | undefined;
  participantAuthorizationRevoked?: ParticipantAuthorizationRevoked | undefined;
  participantAuthorizationAdded?: ParticipantAuthorizationAdded | undefined;
}

export interface ParticipantAuthorizationAdded {
  /** Required */
  partyId: string;
  /** Required */
  participantId: string;
  /** Required */
  participantPermission: ParticipantPermission;
}

export interface ParticipantAuthorizationChanged {
  /** Required */
  partyId: string;
  /** Required */
  participantId: string;
  /** Required */
  participantPermission: ParticipantPermission;
}

export interface ParticipantAuthorizationRevoked {
  /** Required */
  partyId: string;
  /** Required */
  participantId: string;
}

function createBaseTopologyTransaction(): TopologyTransaction {
  return { updateId: "", offset: 0, synchronizerId: "", recordTime: undefined, events: [], traceContext: undefined };
}

export const TopologyTransaction: MessageFns<TopologyTransaction> = {
  encode(message: TopologyTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateId !== "") {
      writer.uint32(10).string(message.updateId);
    }
    if (message.offset !== 0) {
      writer.uint32(16).int64(message.offset);
    }
    if (message.synchronizerId !== "") {
      writer.uint32(26).string(message.synchronizerId);
    }
    if (message.recordTime !== undefined) {
      Timestamp.encode(toTimestamp(message.recordTime), writer.uint32(34).fork()).join();
    }
    for (const v of message.events) {
      TopologyEvent.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.traceContext !== undefined) {
      TraceContext.encode(message.traceContext, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TopologyTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTopologyTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.updateId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.synchronizerId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.recordTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.events.push(TopologyEvent.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.traceContext = TraceContext.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TopologyTransaction {
    return {
      updateId: isSet(object.updateId) ? gt.String(object.updateId) : "",
      offset: isSet(object.offset) ? gt.Number(object.offset) : 0,
      synchronizerId: isSet(object.synchronizerId) ? gt.String(object.synchronizerId) : "",
      recordTime: isSet(object.recordTime) ? fromJsonTimestamp(object.recordTime) : undefined,
      events: gt.Array.isArray(object?.events) ? object.events.map((e: any) => TopologyEvent.fromJSON(e)) : [],
      traceContext: isSet(object.traceContext) ? TraceContext.fromJSON(object.traceContext) : undefined,
    };
  },

  toJSON(message: TopologyTransaction): unknown {
    const obj: any = {};
    if (message.updateId !== "") {
      obj.updateId = message.updateId;
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.synchronizerId !== "") {
      obj.synchronizerId = message.synchronizerId;
    }
    if (message.recordTime !== undefined) {
      obj.recordTime = message.recordTime.toISOString();
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => TopologyEvent.toJSON(e));
    }
    if (message.traceContext !== undefined) {
      obj.traceContext = TraceContext.toJSON(message.traceContext);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TopologyTransaction>, I>>(base?: I): TopologyTransaction {
    return TopologyTransaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TopologyTransaction>, I>>(object: I): TopologyTransaction {
    const message = createBaseTopologyTransaction();
    message.updateId = object.updateId ?? "";
    message.offset = object.offset ?? 0;
    message.synchronizerId = object.synchronizerId ?? "";
    message.recordTime = object.recordTime ?? undefined;
    message.events = object.events?.map((e) => TopologyEvent.fromPartial(e)) || [];
    message.traceContext = (object.traceContext !== undefined && object.traceContext !== null)
      ? TraceContext.fromPartial(object.traceContext)
      : undefined;
    return message;
  },
};

function createBaseTopologyEvent(): TopologyEvent {
  return {
    participantAuthorizationChanged: undefined,
    participantAuthorizationRevoked: undefined,
    participantAuthorizationAdded: undefined,
  };
}

export const TopologyEvent: MessageFns<TopologyEvent> = {
  encode(message: TopologyEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.participantAuthorizationChanged !== undefined) {
      ParticipantAuthorizationChanged.encode(message.participantAuthorizationChanged, writer.uint32(10).fork()).join();
    }
    if (message.participantAuthorizationRevoked !== undefined) {
      ParticipantAuthorizationRevoked.encode(message.participantAuthorizationRevoked, writer.uint32(18).fork()).join();
    }
    if (message.participantAuthorizationAdded !== undefined) {
      ParticipantAuthorizationAdded.encode(message.participantAuthorizationAdded, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TopologyEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTopologyEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.participantAuthorizationChanged = ParticipantAuthorizationChanged.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participantAuthorizationRevoked = ParticipantAuthorizationRevoked.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.participantAuthorizationAdded = ParticipantAuthorizationAdded.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TopologyEvent {
    return {
      participantAuthorizationChanged: isSet(object.participantAuthorizationChanged)
        ? ParticipantAuthorizationChanged.fromJSON(object.participantAuthorizationChanged)
        : undefined,
      participantAuthorizationRevoked: isSet(object.participantAuthorizationRevoked)
        ? ParticipantAuthorizationRevoked.fromJSON(object.participantAuthorizationRevoked)
        : undefined,
      participantAuthorizationAdded: isSet(object.participantAuthorizationAdded)
        ? ParticipantAuthorizationAdded.fromJSON(object.participantAuthorizationAdded)
        : undefined,
    };
  },

  toJSON(message: TopologyEvent): unknown {
    const obj: any = {};
    if (message.participantAuthorizationChanged !== undefined) {
      obj.participantAuthorizationChanged = ParticipantAuthorizationChanged.toJSON(
        message.participantAuthorizationChanged,
      );
    }
    if (message.participantAuthorizationRevoked !== undefined) {
      obj.participantAuthorizationRevoked = ParticipantAuthorizationRevoked.toJSON(
        message.participantAuthorizationRevoked,
      );
    }
    if (message.participantAuthorizationAdded !== undefined) {
      obj.participantAuthorizationAdded = ParticipantAuthorizationAdded.toJSON(message.participantAuthorizationAdded);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TopologyEvent>, I>>(base?: I): TopologyEvent {
    return TopologyEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TopologyEvent>, I>>(object: I): TopologyEvent {
    const message = createBaseTopologyEvent();
    message.participantAuthorizationChanged =
      (object.participantAuthorizationChanged !== undefined && object.participantAuthorizationChanged !== null)
        ? ParticipantAuthorizationChanged.fromPartial(object.participantAuthorizationChanged)
        : undefined;
    message.participantAuthorizationRevoked =
      (object.participantAuthorizationRevoked !== undefined && object.participantAuthorizationRevoked !== null)
        ? ParticipantAuthorizationRevoked.fromPartial(object.participantAuthorizationRevoked)
        : undefined;
    message.participantAuthorizationAdded =
      (object.participantAuthorizationAdded !== undefined && object.participantAuthorizationAdded !== null)
        ? ParticipantAuthorizationAdded.fromPartial(object.participantAuthorizationAdded)
        : undefined;
    return message;
  },
};

function createBaseParticipantAuthorizationAdded(): ParticipantAuthorizationAdded {
  return { partyId: "", participantId: "", participantPermission: 0 };
}

export const ParticipantAuthorizationAdded: MessageFns<ParticipantAuthorizationAdded> = {
  encode(message: ParticipantAuthorizationAdded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partyId !== "") {
      writer.uint32(10).string(message.partyId);
    }
    if (message.participantId !== "") {
      writer.uint32(18).string(message.participantId);
    }
    if (message.participantPermission !== 0) {
      writer.uint32(24).int32(message.participantPermission);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantAuthorizationAdded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantAuthorizationAdded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.partyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participantId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.participantPermission = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantAuthorizationAdded {
    return {
      partyId: isSet(object.partyId) ? gt.String(object.partyId) : "",
      participantId: isSet(object.participantId) ? gt.String(object.participantId) : "",
      participantPermission: isSet(object.participantPermission)
        ? participantPermissionFromJSON(object.participantPermission)
        : 0,
    };
  },

  toJSON(message: ParticipantAuthorizationAdded): unknown {
    const obj: any = {};
    if (message.partyId !== "") {
      obj.partyId = message.partyId;
    }
    if (message.participantId !== "") {
      obj.participantId = message.participantId;
    }
    if (message.participantPermission !== 0) {
      obj.participantPermission = participantPermissionToJSON(message.participantPermission);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParticipantAuthorizationAdded>, I>>(base?: I): ParticipantAuthorizationAdded {
    return ParticipantAuthorizationAdded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParticipantAuthorizationAdded>, I>>(
    object: I,
  ): ParticipantAuthorizationAdded {
    const message = createBaseParticipantAuthorizationAdded();
    message.partyId = object.partyId ?? "";
    message.participantId = object.participantId ?? "";
    message.participantPermission = object.participantPermission ?? 0;
    return message;
  },
};

function createBaseParticipantAuthorizationChanged(): ParticipantAuthorizationChanged {
  return { partyId: "", participantId: "", participantPermission: 0 };
}

export const ParticipantAuthorizationChanged: MessageFns<ParticipantAuthorizationChanged> = {
  encode(message: ParticipantAuthorizationChanged, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partyId !== "") {
      writer.uint32(10).string(message.partyId);
    }
    if (message.participantId !== "") {
      writer.uint32(18).string(message.participantId);
    }
    if (message.participantPermission !== 0) {
      writer.uint32(24).int32(message.participantPermission);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantAuthorizationChanged {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantAuthorizationChanged();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.partyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participantId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.participantPermission = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantAuthorizationChanged {
    return {
      partyId: isSet(object.partyId) ? gt.String(object.partyId) : "",
      participantId: isSet(object.participantId) ? gt.String(object.participantId) : "",
      participantPermission: isSet(object.participantPermission)
        ? participantPermissionFromJSON(object.participantPermission)
        : 0,
    };
  },

  toJSON(message: ParticipantAuthorizationChanged): unknown {
    const obj: any = {};
    if (message.partyId !== "") {
      obj.partyId = message.partyId;
    }
    if (message.participantId !== "") {
      obj.participantId = message.participantId;
    }
    if (message.participantPermission !== 0) {
      obj.participantPermission = participantPermissionToJSON(message.participantPermission);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParticipantAuthorizationChanged>, I>>(base?: I): ParticipantAuthorizationChanged {
    return ParticipantAuthorizationChanged.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParticipantAuthorizationChanged>, I>>(
    object: I,
  ): ParticipantAuthorizationChanged {
    const message = createBaseParticipantAuthorizationChanged();
    message.partyId = object.partyId ?? "";
    message.participantId = object.participantId ?? "";
    message.participantPermission = object.participantPermission ?? 0;
    return message;
  },
};

function createBaseParticipantAuthorizationRevoked(): ParticipantAuthorizationRevoked {
  return { partyId: "", participantId: "" };
}

export const ParticipantAuthorizationRevoked: MessageFns<ParticipantAuthorizationRevoked> = {
  encode(message: ParticipantAuthorizationRevoked, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partyId !== "") {
      writer.uint32(10).string(message.partyId);
    }
    if (message.participantId !== "") {
      writer.uint32(18).string(message.participantId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantAuthorizationRevoked {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantAuthorizationRevoked();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.partyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participantId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantAuthorizationRevoked {
    return {
      partyId: isSet(object.partyId) ? gt.String(object.partyId) : "",
      participantId: isSet(object.participantId) ? gt.String(object.participantId) : "",
    };
  },

  toJSON(message: ParticipantAuthorizationRevoked): unknown {
    const obj: any = {};
    if (message.partyId !== "") {
      obj.partyId = message.partyId;
    }
    if (message.participantId !== "") {
      obj.participantId = message.participantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParticipantAuthorizationRevoked>, I>>(base?: I): ParticipantAuthorizationRevoked {
    return ParticipantAuthorizationRevoked.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParticipantAuthorizationRevoked>, I>>(
    object: I,
  ): ParticipantAuthorizationRevoked {
    const message = createBaseParticipantAuthorizationRevoked();
    message.partyId = object.partyId ?? "";
    message.participantId = object.participantId ?? "";
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
