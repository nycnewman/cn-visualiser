// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/value.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../../../../google/protobuf/empty";

export const protobufPackage = "com.daml.ledger.api.v2";

/**
 * Encodes values that the ledger accepts as command arguments and emits as contract arguments.
 *
 * The values encoding use different classes of non-empty strings as identifiers. Those classes are
 * defined as follows:
 *
 * - NameStrings are strings with length <= 1000 that match the regexp ``[A-Za-z\$_][A-Za-z0-9\$_]*``.
 * - PackageIdStrings are strings with length <= 64 that match the regexp ``[A-Za-z0-9\-_ ]+``.
 * - PartyIdStrings are strings with length <= 255 that match the regexp ``[A-Za-z0-9:\-_ ]+``.
 * - LedgerStrings are strings with length <= 255 that match the regexp ``[A-Za-z0-9#:\-_/ ]+``.
 * - UserIdStrings are strings with length <= 128 that match the regexp ``[a-zA-Z0-9@^$.!`\-#+'~_|:]+``.
 */
export interface Value {
  /** This value is used for example for choices that don't take any arguments. */
  unit?:
    | Empty
    | undefined;
  /** True or false. */
  bool?: boolean | undefined;
  int64?:
    | number
    | undefined;
  /**
   * Days since the unix epoch. Can go backwards. Limited from
   * 0001-01-01 to 9999-12-31, also to be compatible with
   * https://www.ietf.org/rfc/rfc3339.txt
   */
  date?:
    | number
    | undefined;
  /**
   * Microseconds since the UNIX epoch. Can go backwards. Fixed
   * since the vast majority of values will be greater than
   * 2^28, since currently the number of microseconds since the
   * epoch is greater than that. Range: 0001-01-01T00:00:00Z to
   * 9999-12-31T23:59:59.999999Z, so that we can convert to/from
   * https://www.ietf.org/rfc/rfc3339.txt
   */
  timestamp?:
    | number
    | undefined;
  /**
   * A Numeric, that is a decimal value with precision 38 (at most 38 significant digits) and a
   * scale between 0 and 37 (significant digits on the right of the decimal point).
   * The field has to match the regex
   *
   * .. code-block:: none
   *
   *   [+-]?\d{1,38}(.\d{0,37})?
   *
   * and should be representable by a Numeric without loss of precision.
   */
  numeric?:
    | string
    | undefined;
  /**
   * An agent operating on the ledger.
   * Must be a valid PartyIdString.
   */
  party?:
    | string
    | undefined;
  /** A string. */
  text?:
    | string
    | undefined;
  /**
   * Identifier of an on-ledger contract. Commands which reference an unknown or already archived contract ID will fail.
   * Must be a valid LedgerString.
   */
  contractId?:
    | string
    | undefined;
  /** The Optional type, None or Some */
  optional?:
    | Optional
    | undefined;
  /** Represents a homogeneous list of values. */
  list?:
    | List
    | undefined;
  /** The TextMap type */
  textMap?:
    | TextMap
    | undefined;
  /** The GenMap type */
  genMap?: GenMap | undefined;
  record?: Record | undefined;
  variant?:
    | Variant
    | undefined;
  /** The Enum type */
  enum?: Enum | undefined;
}

/** Contains nested values. */
export interface Record {
  /**
   * Omitted from the transaction stream when verbose streaming is not enabled.
   * Optional when submitting commands.
   */
  recordId:
    | Identifier
    | undefined;
  /**
   * The nested values of the record.
   * Required
   */
  fields: RecordField[];
}

/** A named nested value within a record. */
export interface RecordField {
  /**
   * When reading a transaction stream, it's omitted if verbose streaming is not enabled.
   * When submitting a command, it's optional:
   *
   * - if all keys within a single record are present, the order in which fields appear does not matter. however, each key must appear exactly once.
   * - if any of the keys within a single record are omitted, the order of fields MUST match the order of declaration in the Daml template.
   *
   * Must be a valid NameString
   */
  label: string;
  /**
   * A nested value of a record.
   * Required
   */
  value: Value | undefined;
}

/**
 * Unique identifier of an entity.
 * Throughout this API, the following terminology is being used:
 *
 *   - if a Daml package-id is encoded in the package_id field, it is referred to as using a "package-id reference format"
 *   - if a Daml package-name is encoded in the package_id field, it is referred to as using a "package-name reference format"
 */
export interface Identifier {
  /**
   * Generally, the identifier of the Daml package that contains the entity.
   * When encoding a package-id, it must be a valid PackageIdString.
   *
   * The field is overloaded to also be able to contain the package-name of the Daml package.
   * This is supported if the entity referenced is either an interface or template.
   * When representing the Daml package-name, the encoding is of form `#<package-name>`
   * where `#` (not a valid package-id character)
   * is used as a discriminator for signalling a package-name encoding.
   *
   * Required
   */
  packageId: string;
  /**
   * The dot-separated module name of the identifier.
   * Required
   */
  moduleName: string;
  /**
   * The dot-separated name of the entity (e.g. record, template, ...) within the module.
   * Required
   */
  entityName: string;
}

/** A value with alternative representations. */
export interface Variant {
  /**
   * Omitted from the transaction stream when verbose streaming is not enabled.
   * Optional when submitting commands.
   */
  variantId:
    | Identifier
    | undefined;
  /**
   * Determines which of the Variant's alternatives is encoded in this message.
   * Must be a valid NameString.
   * Required
   */
  constructor: string;
  /**
   * The value encoded within the Variant.
   * Required
   */
  value: Value | undefined;
}

/** A value with finite set of alternative representations. */
export interface Enum {
  /**
   * Omitted from the transaction stream when verbose streaming is not enabled.
   * Optional when submitting commands.
   */
  enumId:
    | Identifier
    | undefined;
  /**
   * Determines which of the Variant's alternatives is encoded in this message.
   * Must be a valid NameString.
   * Required
   */
  constructor: string;
}

/** A homogenous collection of values. */
export interface List {
  /**
   * The elements must all be of the same concrete value type.
   * Optional
   */
  elements: Value[];
}

/**
 * Corresponds to Java's Optional type, Scala's Option, and Haskell's Maybe.
 * The reason why we need to wrap this in an additional ``message`` is that we
 * need to be able to encode the ``None`` case in the ``Value`` oneof.
 */
export interface Optional {
  /** optional */
  value: Value | undefined;
}

export interface TextMap {
  entries: TextMap_Entry[];
}

export interface TextMap_Entry {
  key: string;
  value: Value | undefined;
}

export interface GenMap {
  entries: GenMap_Entry[];
}

export interface GenMap_Entry {
  key: Value | undefined;
  value: Value | undefined;
}

function createBaseValue(): Value {
  return {
    unit: undefined,
    bool: undefined,
    int64: undefined,
    date: undefined,
    timestamp: undefined,
    numeric: undefined,
    party: undefined,
    text: undefined,
    contractId: undefined,
    optional: undefined,
    list: undefined,
    textMap: undefined,
    genMap: undefined,
    record: undefined,
    variant: undefined,
    enum: undefined,
  };
}

export const Value: MessageFns<Value> = {
  encode(message: Value, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unit !== undefined) {
      Empty.encode(message.unit, writer.uint32(10).fork()).join();
    }
    if (message.bool !== undefined) {
      writer.uint32(16).bool(message.bool);
    }
    if (message.int64 !== undefined) {
      writer.uint32(24).sint64(message.int64);
    }
    if (message.date !== undefined) {
      writer.uint32(32).int32(message.date);
    }
    if (message.timestamp !== undefined) {
      writer.uint32(41).sfixed64(message.timestamp);
    }
    if (message.numeric !== undefined) {
      writer.uint32(50).string(message.numeric);
    }
    if (message.party !== undefined) {
      writer.uint32(58).string(message.party);
    }
    if (message.text !== undefined) {
      writer.uint32(66).string(message.text);
    }
    if (message.contractId !== undefined) {
      writer.uint32(74).string(message.contractId);
    }
    if (message.optional !== undefined) {
      Optional.encode(message.optional, writer.uint32(82).fork()).join();
    }
    if (message.list !== undefined) {
      List.encode(message.list, writer.uint32(90).fork()).join();
    }
    if (message.textMap !== undefined) {
      TextMap.encode(message.textMap, writer.uint32(98).fork()).join();
    }
    if (message.genMap !== undefined) {
      GenMap.encode(message.genMap, writer.uint32(106).fork()).join();
    }
    if (message.record !== undefined) {
      Record.encode(message.record, writer.uint32(114).fork()).join();
    }
    if (message.variant !== undefined) {
      Variant.encode(message.variant, writer.uint32(122).fork()).join();
    }
    if (message.enum !== undefined) {
      Enum.encode(message.enum, writer.uint32(130).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Value {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.unit = Empty.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.bool = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.int64 = longToNumber(reader.sint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.date = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.timestamp = longToNumber(reader.sfixed64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.numeric = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.party = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.contractId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.optional = Optional.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.list = List.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.textMap = TextMap.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.genMap = GenMap.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.record = Record.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.variant = Variant.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.enum = Enum.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Value {
    return {
      unit: isSet(object.unit) ? Empty.fromJSON(object.unit) : undefined,
      bool: isSet(object.bool) ? gt.Boolean(object.bool) : undefined,
      int64: isSet(object.int64) ? gt.Number(object.int64) : undefined,
      date: isSet(object.date) ? gt.Number(object.date) : undefined,
      timestamp: isSet(object.timestamp) ? gt.Number(object.timestamp) : undefined,
      numeric: isSet(object.numeric) ? gt.String(object.numeric) : undefined,
      party: isSet(object.party) ? gt.String(object.party) : undefined,
      text: isSet(object.text) ? gt.String(object.text) : undefined,
      contractId: isSet(object.contractId) ? gt.String(object.contractId) : undefined,
      optional: isSet(object.optional) ? Optional.fromJSON(object.optional) : undefined,
      list: isSet(object.list) ? List.fromJSON(object.list) : undefined,
      textMap: isSet(object.textMap) ? TextMap.fromJSON(object.textMap) : undefined,
      genMap: isSet(object.genMap) ? GenMap.fromJSON(object.genMap) : undefined,
      record: isSet(object.record) ? Record.fromJSON(object.record) : undefined,
      variant: isSet(object.variant) ? Variant.fromJSON(object.variant) : undefined,
      enum: isSet(object.enum) ? Enum.fromJSON(object.enum) : undefined,
    };
  },

  toJSON(message: Value): unknown {
    const obj: any = {};
    if (message.unit !== undefined) {
      obj.unit = Empty.toJSON(message.unit);
    }
    if (message.bool !== undefined) {
      obj.bool = message.bool;
    }
    if (message.int64 !== undefined) {
      obj.int64 = Math.round(message.int64);
    }
    if (message.date !== undefined) {
      obj.date = Math.round(message.date);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.numeric !== undefined) {
      obj.numeric = message.numeric;
    }
    if (message.party !== undefined) {
      obj.party = message.party;
    }
    if (message.text !== undefined) {
      obj.text = message.text;
    }
    if (message.contractId !== undefined) {
      obj.contractId = message.contractId;
    }
    if (message.optional !== undefined) {
      obj.optional = Optional.toJSON(message.optional);
    }
    if (message.list !== undefined) {
      obj.list = List.toJSON(message.list);
    }
    if (message.textMap !== undefined) {
      obj.textMap = TextMap.toJSON(message.textMap);
    }
    if (message.genMap !== undefined) {
      obj.genMap = GenMap.toJSON(message.genMap);
    }
    if (message.record !== undefined) {
      obj.record = Record.toJSON(message.record);
    }
    if (message.variant !== undefined) {
      obj.variant = Variant.toJSON(message.variant);
    }
    if (message.enum !== undefined) {
      obj.enum = Enum.toJSON(message.enum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Value>, I>>(base?: I): Value {
    return Value.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Value>, I>>(object: I): Value {
    const message = createBaseValue();
    message.unit = (object.unit !== undefined && object.unit !== null) ? Empty.fromPartial(object.unit) : undefined;
    message.bool = object.bool ?? undefined;
    message.int64 = object.int64 ?? undefined;
    message.date = object.date ?? undefined;
    message.timestamp = object.timestamp ?? undefined;
    message.numeric = object.numeric ?? undefined;
    message.party = object.party ?? undefined;
    message.text = object.text ?? undefined;
    message.contractId = object.contractId ?? undefined;
    message.optional = (object.optional !== undefined && object.optional !== null)
      ? Optional.fromPartial(object.optional)
      : undefined;
    message.list = (object.list !== undefined && object.list !== null) ? List.fromPartial(object.list) : undefined;
    message.textMap = (object.textMap !== undefined && object.textMap !== null)
      ? TextMap.fromPartial(object.textMap)
      : undefined;
    message.genMap = (object.genMap !== undefined && object.genMap !== null)
      ? GenMap.fromPartial(object.genMap)
      : undefined;
    message.record = (object.record !== undefined && object.record !== null)
      ? Record.fromPartial(object.record)
      : undefined;
    message.variant = (object.variant !== undefined && object.variant !== null)
      ? Variant.fromPartial(object.variant)
      : undefined;
    message.enum = (object.enum !== undefined && object.enum !== null) ? Enum.fromPartial(object.enum) : undefined;
    return message;
  },
};

function createBaseRecord(): Record {
  return { recordId: undefined, fields: [] };
}

export const Record: MessageFns<Record> = {
  encode(message: Record, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordId !== undefined) {
      Identifier.encode(message.recordId, writer.uint32(10).fork()).join();
    }
    for (const v of message.fields) {
      RecordField.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Record {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recordId = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fields.push(RecordField.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Record {
    return {
      recordId: isSet(object.recordId) ? Identifier.fromJSON(object.recordId) : undefined,
      fields: gt.Array.isArray(object?.fields) ? object.fields.map((e: any) => RecordField.fromJSON(e)) : [],
    };
  },

  toJSON(message: Record): unknown {
    const obj: any = {};
    if (message.recordId !== undefined) {
      obj.recordId = Identifier.toJSON(message.recordId);
    }
    if (message.fields?.length) {
      obj.fields = message.fields.map((e) => RecordField.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Record>, I>>(base?: I): Record {
    return Record.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Record>, I>>(object: I): Record {
    const message = createBaseRecord();
    message.recordId = (object.recordId !== undefined && object.recordId !== null)
      ? Identifier.fromPartial(object.recordId)
      : undefined;
    message.fields = object.fields?.map((e) => RecordField.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRecordField(): RecordField {
  return { label: "", value: undefined };
}

export const RecordField: MessageFns<RecordField> = {
  encode(message: RecordField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.label !== "") {
      writer.uint32(10).string(message.label);
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecordField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecordField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.label = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecordField {
    return {
      label: isSet(object.label) ? gt.String(object.label) : "",
      value: isSet(object.value) ? Value.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: RecordField): unknown {
    const obj: any = {};
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.value !== undefined) {
      obj.value = Value.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RecordField>, I>>(base?: I): RecordField {
    return RecordField.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RecordField>, I>>(object: I): RecordField {
    const message = createBaseRecordField();
    message.label = object.label ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseIdentifier(): Identifier {
  return { packageId: "", moduleName: "", entityName: "" };
}

export const Identifier: MessageFns<Identifier> = {
  encode(message: Identifier, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.packageId !== "") {
      writer.uint32(10).string(message.packageId);
    }
    if (message.moduleName !== "") {
      writer.uint32(18).string(message.moduleName);
    }
    if (message.entityName !== "") {
      writer.uint32(26).string(message.entityName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Identifier {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentifier();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.packageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.moduleName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.entityName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Identifier {
    return {
      packageId: isSet(object.packageId) ? gt.String(object.packageId) : "",
      moduleName: isSet(object.moduleName) ? gt.String(object.moduleName) : "",
      entityName: isSet(object.entityName) ? gt.String(object.entityName) : "",
    };
  },

  toJSON(message: Identifier): unknown {
    const obj: any = {};
    if (message.packageId !== "") {
      obj.packageId = message.packageId;
    }
    if (message.moduleName !== "") {
      obj.moduleName = message.moduleName;
    }
    if (message.entityName !== "") {
      obj.entityName = message.entityName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Identifier>, I>>(base?: I): Identifier {
    return Identifier.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Identifier>, I>>(object: I): Identifier {
    const message = createBaseIdentifier();
    message.packageId = object.packageId ?? "";
    message.moduleName = object.moduleName ?? "";
    message.entityName = object.entityName ?? "";
    return message;
  },
};

function createBaseVariant(): Variant {
  return { variantId: undefined, constructor: "", value: undefined };
}

export const Variant: MessageFns<Variant> = {
  encode(message: Variant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.variantId !== undefined) {
      Identifier.encode(message.variantId, writer.uint32(10).fork()).join();
    }
    if (message.constructor !== "") {
      writer.uint32(18).string(message.constructor);
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Variant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVariant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.variantId = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.constructor = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Variant {
    return {
      variantId: isSet(object.variantId) ? Identifier.fromJSON(object.variantId) : undefined,
      constructor: isSet(object.constructor) ? gt.String(object.constructor) : "",
      value: isSet(object.value) ? Value.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: Variant): unknown {
    const obj: any = {};
    if (message.variantId !== undefined) {
      obj.variantId = Identifier.toJSON(message.variantId);
    }
    if (message.constructor !== "") {
      obj.constructor = message.constructor;
    }
    if (message.value !== undefined) {
      obj.value = Value.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Variant>, I>>(base?: I): Variant {
    return Variant.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Variant>, I>>(object: I): Variant {
    const message = createBaseVariant();
    message.variantId = (object.variantId !== undefined && object.variantId !== null)
      ? Identifier.fromPartial(object.variantId)
      : undefined;
    message.constructor = object.constructor ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseEnum(): Enum {
  return { enumId: undefined, constructor: "" };
}

export const Enum: MessageFns<Enum> = {
  encode(message: Enum, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enumId !== undefined) {
      Identifier.encode(message.enumId, writer.uint32(10).fork()).join();
    }
    if (message.constructor !== "") {
      writer.uint32(18).string(message.constructor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Enum {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnum();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.enumId = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.constructor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Enum {
    return {
      enumId: isSet(object.enumId) ? Identifier.fromJSON(object.enumId) : undefined,
      constructor: isSet(object.constructor) ? gt.String(object.constructor) : "",
    };
  },

  toJSON(message: Enum): unknown {
    const obj: any = {};
    if (message.enumId !== undefined) {
      obj.enumId = Identifier.toJSON(message.enumId);
    }
    if (message.constructor !== "") {
      obj.constructor = message.constructor;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Enum>, I>>(base?: I): Enum {
    return Enum.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Enum>, I>>(object: I): Enum {
    const message = createBaseEnum();
    message.enumId = (object.enumId !== undefined && object.enumId !== null)
      ? Identifier.fromPartial(object.enumId)
      : undefined;
    message.constructor = object.constructor ?? "";
    return message;
  },
};

function createBaseList(): List {
  return { elements: [] };
}

export const List: MessageFns<List> = {
  encode(message: List, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.elements) {
      Value.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): List {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.elements.push(Value.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): List {
    return { elements: gt.Array.isArray(object?.elements) ? object.elements.map((e: any) => Value.fromJSON(e)) : [] };
  },

  toJSON(message: List): unknown {
    const obj: any = {};
    if (message.elements?.length) {
      obj.elements = message.elements.map((e) => Value.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<List>, I>>(base?: I): List {
    return List.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<List>, I>>(object: I): List {
    const message = createBaseList();
    message.elements = object.elements?.map((e) => Value.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOptional(): Optional {
  return { value: undefined };
}

export const Optional: MessageFns<Optional> = {
  encode(message: Optional, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Optional {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOptional();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Optional {
    return { value: isSet(object.value) ? Value.fromJSON(object.value) : undefined };
  },

  toJSON(message: Optional): unknown {
    const obj: any = {};
    if (message.value !== undefined) {
      obj.value = Value.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Optional>, I>>(base?: I): Optional {
    return Optional.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Optional>, I>>(object: I): Optional {
    const message = createBaseOptional();
    message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseTextMap(): TextMap {
  return { entries: [] };
}

export const TextMap: MessageFns<TextMap> = {
  encode(message: TextMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      TextMap_Entry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(TextMap_Entry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextMap {
    return {
      entries: gt.Array.isArray(object?.entries) ? object.entries.map((e: any) => TextMap_Entry.fromJSON(e)) : [],
    };
  },

  toJSON(message: TextMap): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => TextMap_Entry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TextMap>, I>>(base?: I): TextMap {
    return TextMap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TextMap>, I>>(object: I): TextMap {
    const message = createBaseTextMap();
    message.entries = object.entries?.map((e) => TextMap_Entry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTextMap_Entry(): TextMap_Entry {
  return { key: "", value: undefined };
}

export const TextMap_Entry: MessageFns<TextMap_Entry> = {
  encode(message: TextMap_Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TextMap_Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTextMap_Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TextMap_Entry {
    return {
      key: isSet(object.key) ? gt.String(object.key) : "",
      value: isSet(object.value) ? Value.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: TextMap_Entry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = Value.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TextMap_Entry>, I>>(base?: I): TextMap_Entry {
    return TextMap_Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TextMap_Entry>, I>>(object: I): TextMap_Entry {
    const message = createBaseTextMap_Entry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
    return message;
  },
};

function createBaseGenMap(): GenMap {
  return { entries: [] };
}

export const GenMap: MessageFns<GenMap> = {
  encode(message: GenMap, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      GenMap_Entry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenMap {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenMap();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(GenMap_Entry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenMap {
    return {
      entries: gt.Array.isArray(object?.entries) ? object.entries.map((e: any) => GenMap_Entry.fromJSON(e)) : [],
    };
  },

  toJSON(message: GenMap): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => GenMap_Entry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenMap>, I>>(base?: I): GenMap {
    return GenMap.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenMap>, I>>(object: I): GenMap {
    const message = createBaseGenMap();
    message.entries = object.entries?.map((e) => GenMap_Entry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGenMap_Entry(): GenMap_Entry {
  return { key: undefined, value: undefined };
}

export const GenMap_Entry: MessageFns<GenMap_Entry> = {
  encode(message: GenMap_Entry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== undefined) {
      Value.encode(message.key, writer.uint32(10).fork()).join();
    }
    if (message.value !== undefined) {
      Value.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenMap_Entry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenMap_Entry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = Value.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenMap_Entry {
    return {
      key: isSet(object.key) ? Value.fromJSON(object.key) : undefined,
      value: isSet(object.value) ? Value.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: GenMap_Entry): unknown {
    const obj: any = {};
    if (message.key !== undefined) {
      obj.key = Value.toJSON(message.key);
    }
    if (message.value !== undefined) {
      obj.value = Value.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenMap_Entry>, I>>(base?: I): GenMap_Entry {
    return GenMap_Entry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenMap_Entry>, I>>(object: I): GenMap_Entry {
    const message = createBaseGenMap_Entry();
    message.key = (object.key !== undefined && object.key !== null) ? Value.fromPartial(object.key) : undefined;
    message.value = (object.value !== undefined && object.value !== null) ? Value.fromPartial(object.value) : undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
