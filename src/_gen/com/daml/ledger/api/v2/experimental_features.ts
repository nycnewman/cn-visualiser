// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/experimental_features.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.daml.ledger.api.v2";

/** See the feature message definitions for descriptions. */
export interface ExperimentalFeatures {
  staticTime: ExperimentalStaticTime | undefined;
  commandInspectionService: ExperimentalCommandInspectionService | undefined;
}

/** Ledger is in the static time mode and exposes a time service. */
export interface ExperimentalStaticTime {
  supported: boolean;
}

/** Whether the Ledger API supports command inspection service */
export interface ExperimentalCommandInspectionService {
  supported: boolean;
}

/** Whether the Ledger API supports party events */
export interface ExperimentalPartyTopologyEvents {
  supported: boolean;
}

function createBaseExperimentalFeatures(): ExperimentalFeatures {
  return { staticTime: undefined, commandInspectionService: undefined };
}

export const ExperimentalFeatures: MessageFns<ExperimentalFeatures> = {
  encode(message: ExperimentalFeatures, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.staticTime !== undefined) {
      ExperimentalStaticTime.encode(message.staticTime, writer.uint32(10).fork()).join();
    }
    if (message.commandInspectionService !== undefined) {
      ExperimentalCommandInspectionService.encode(message.commandInspectionService, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExperimentalFeatures {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperimentalFeatures();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.staticTime = ExperimentalStaticTime.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.commandInspectionService = ExperimentalCommandInspectionService.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExperimentalFeatures {
    return {
      staticTime: isSet(object.staticTime) ? ExperimentalStaticTime.fromJSON(object.staticTime) : undefined,
      commandInspectionService: isSet(object.commandInspectionService)
        ? ExperimentalCommandInspectionService.fromJSON(object.commandInspectionService)
        : undefined,
    };
  },

  toJSON(message: ExperimentalFeatures): unknown {
    const obj: any = {};
    if (message.staticTime !== undefined) {
      obj.staticTime = ExperimentalStaticTime.toJSON(message.staticTime);
    }
    if (message.commandInspectionService !== undefined) {
      obj.commandInspectionService = ExperimentalCommandInspectionService.toJSON(message.commandInspectionService);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExperimentalFeatures>, I>>(base?: I): ExperimentalFeatures {
    return ExperimentalFeatures.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExperimentalFeatures>, I>>(object: I): ExperimentalFeatures {
    const message = createBaseExperimentalFeatures();
    message.staticTime = (object.staticTime !== undefined && object.staticTime !== null)
      ? ExperimentalStaticTime.fromPartial(object.staticTime)
      : undefined;
    message.commandInspectionService =
      (object.commandInspectionService !== undefined && object.commandInspectionService !== null)
        ? ExperimentalCommandInspectionService.fromPartial(object.commandInspectionService)
        : undefined;
    return message;
  },
};

function createBaseExperimentalStaticTime(): ExperimentalStaticTime {
  return { supported: false };
}

export const ExperimentalStaticTime: MessageFns<ExperimentalStaticTime> = {
  encode(message: ExperimentalStaticTime, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supported !== false) {
      writer.uint32(8).bool(message.supported);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExperimentalStaticTime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperimentalStaticTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.supported = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExperimentalStaticTime {
    return { supported: isSet(object.supported) ? gt.Boolean(object.supported) : false };
  },

  toJSON(message: ExperimentalStaticTime): unknown {
    const obj: any = {};
    if (message.supported !== false) {
      obj.supported = message.supported;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExperimentalStaticTime>, I>>(base?: I): ExperimentalStaticTime {
    return ExperimentalStaticTime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExperimentalStaticTime>, I>>(object: I): ExperimentalStaticTime {
    const message = createBaseExperimentalStaticTime();
    message.supported = object.supported ?? false;
    return message;
  },
};

function createBaseExperimentalCommandInspectionService(): ExperimentalCommandInspectionService {
  return { supported: false };
}

export const ExperimentalCommandInspectionService: MessageFns<ExperimentalCommandInspectionService> = {
  encode(message: ExperimentalCommandInspectionService, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supported !== false) {
      writer.uint32(8).bool(message.supported);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExperimentalCommandInspectionService {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperimentalCommandInspectionService();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.supported = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExperimentalCommandInspectionService {
    return { supported: isSet(object.supported) ? gt.Boolean(object.supported) : false };
  },

  toJSON(message: ExperimentalCommandInspectionService): unknown {
    const obj: any = {};
    if (message.supported !== false) {
      obj.supported = message.supported;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExperimentalCommandInspectionService>, I>>(
    base?: I,
  ): ExperimentalCommandInspectionService {
    return ExperimentalCommandInspectionService.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExperimentalCommandInspectionService>, I>>(
    object: I,
  ): ExperimentalCommandInspectionService {
    const message = createBaseExperimentalCommandInspectionService();
    message.supported = object.supported ?? false;
    return message;
  },
};

function createBaseExperimentalPartyTopologyEvents(): ExperimentalPartyTopologyEvents {
  return { supported: false };
}

export const ExperimentalPartyTopologyEvents: MessageFns<ExperimentalPartyTopologyEvents> = {
  encode(message: ExperimentalPartyTopologyEvents, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supported !== false) {
      writer.uint32(8).bool(message.supported);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExperimentalPartyTopologyEvents {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperimentalPartyTopologyEvents();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.supported = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExperimentalPartyTopologyEvents {
    return { supported: isSet(object.supported) ? gt.Boolean(object.supported) : false };
  },

  toJSON(message: ExperimentalPartyTopologyEvents): unknown {
    const obj: any = {};
    if (message.supported !== false) {
      obj.supported = message.supported;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExperimentalPartyTopologyEvents>, I>>(base?: I): ExperimentalPartyTopologyEvents {
    return ExperimentalPartyTopologyEvents.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExperimentalPartyTopologyEvents>, I>>(
    object: I,
  ): ExperimentalPartyTopologyEvents {
    const message = createBaseExperimentalPartyTopologyEvents();
    message.supported = object.supported ?? false;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
