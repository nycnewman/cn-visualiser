// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/command_submission_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Commands } from "./commands";
import { ReassignmentCommands } from "./reassignment_commands";

export const protobufPackage = "com.daml.ledger.api.v2";

/** The submitted commands will be processed atomically in a single transaction. Moreover, each ``Command`` in ``commands`` will be executed in the order specified by the request. */
export interface SubmitRequest {
  /**
   * The commands to be submitted in a single transaction.
   * Required
   */
  commands: Commands | undefined;
}

export interface SubmitResponse {
}

export interface SubmitReassignmentRequest {
  /**
   * The reassignment command to be submitted.
   * Required
   */
  reassignmentCommands: ReassignmentCommands | undefined;
}

export interface SubmitReassignmentResponse {
}

function createBaseSubmitRequest(): SubmitRequest {
  return { commands: undefined };
}

export const SubmitRequest: MessageFns<SubmitRequest> = {
  encode(message: SubmitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commands !== undefined) {
      Commands.encode(message.commands, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commands = Commands.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitRequest {
    return { commands: isSet(object.commands) ? Commands.fromJSON(object.commands) : undefined };
  },

  toJSON(message: SubmitRequest): unknown {
    const obj: any = {};
    if (message.commands !== undefined) {
      obj.commands = Commands.toJSON(message.commands);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitRequest>, I>>(base?: I): SubmitRequest {
    return SubmitRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitRequest>, I>>(object: I): SubmitRequest {
    const message = createBaseSubmitRequest();
    message.commands = (object.commands !== undefined && object.commands !== null)
      ? Commands.fromPartial(object.commands)
      : undefined;
    return message;
  },
};

function createBaseSubmitResponse(): SubmitResponse {
  return {};
}

export const SubmitResponse: MessageFns<SubmitResponse> = {
  encode(_: SubmitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SubmitResponse {
    return {};
  },

  toJSON(_: SubmitResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitResponse>, I>>(base?: I): SubmitResponse {
    return SubmitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitResponse>, I>>(_: I): SubmitResponse {
    const message = createBaseSubmitResponse();
    return message;
  },
};

function createBaseSubmitReassignmentRequest(): SubmitReassignmentRequest {
  return { reassignmentCommands: undefined };
}

export const SubmitReassignmentRequest: MessageFns<SubmitReassignmentRequest> = {
  encode(message: SubmitReassignmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reassignmentCommands !== undefined) {
      ReassignmentCommands.encode(message.reassignmentCommands, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitReassignmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitReassignmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reassignmentCommands = ReassignmentCommands.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitReassignmentRequest {
    return {
      reassignmentCommands: isSet(object.reassignmentCommands)
        ? ReassignmentCommands.fromJSON(object.reassignmentCommands)
        : undefined,
    };
  },

  toJSON(message: SubmitReassignmentRequest): unknown {
    const obj: any = {};
    if (message.reassignmentCommands !== undefined) {
      obj.reassignmentCommands = ReassignmentCommands.toJSON(message.reassignmentCommands);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitReassignmentRequest>, I>>(base?: I): SubmitReassignmentRequest {
    return SubmitReassignmentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitReassignmentRequest>, I>>(object: I): SubmitReassignmentRequest {
    const message = createBaseSubmitReassignmentRequest();
    message.reassignmentCommands = (object.reassignmentCommands !== undefined && object.reassignmentCommands !== null)
      ? ReassignmentCommands.fromPartial(object.reassignmentCommands)
      : undefined;
    return message;
  },
};

function createBaseSubmitReassignmentResponse(): SubmitReassignmentResponse {
  return {};
}

export const SubmitReassignmentResponse: MessageFns<SubmitReassignmentResponse> = {
  encode(_: SubmitReassignmentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitReassignmentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitReassignmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SubmitReassignmentResponse {
    return {};
  },

  toJSON(_: SubmitReassignmentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitReassignmentResponse>, I>>(base?: I): SubmitReassignmentResponse {
    return SubmitReassignmentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitReassignmentResponse>, I>>(_: I): SubmitReassignmentResponse {
    const message = createBaseSubmitReassignmentResponse();
    return message;
  },
};

/**
 * Allows clients to attempt advancing the ledger's state by submitting commands.
 * The final states of their submissions are disclosed by the Command Completion Service.
 * The on-ledger effects of their submissions are disclosed by the Update Service.
 *
 * Commands may fail in 2 distinct manners:
 *
 * 1. Failure communicated synchronously in the gRPC error of the submission.
 * 2. Failure communicated asynchronously in a Completion, see ``completion.proto``.
 *
 * Note that not only successfully submitted commands MAY produce a completion event. For example, the participant MAY
 * choose to produce a completion event for a rejection of a duplicate command.
 *
 * Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
 * Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
 */
export interface CommandSubmissionService {
  /** Submit a single composite command. */
  Submit(request: SubmitRequest): Promise<SubmitResponse>;
  /** Submit a single reassignment. */
  SubmitReassignment(request: SubmitReassignmentRequest): Promise<SubmitReassignmentResponse>;
}

export const CommandSubmissionServiceServiceName = "com.daml.ledger.api.v2.CommandSubmissionService";
export class CommandSubmissionServiceClientImpl implements CommandSubmissionService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CommandSubmissionServiceServiceName;
    this.rpc = rpc;
    this.Submit = this.Submit.bind(this);
    this.SubmitReassignment = this.SubmitReassignment.bind(this);
  }
  Submit(request: SubmitRequest): Promise<SubmitResponse> {
    const data = SubmitRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Submit", data);
    return promise.then((data) => SubmitResponse.decode(new BinaryReader(data)));
  }

  SubmitReassignment(request: SubmitReassignmentRequest): Promise<SubmitReassignmentResponse> {
    const data = SubmitReassignmentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitReassignment", data);
    return promise.then((data) => SubmitReassignmentResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
