// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/admin/package_management_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../../google/protobuf/timestamp";

export const protobufPackage = "com.daml.ledger.api.v2.admin";

export interface ListKnownPackagesRequest {
}

export interface ListKnownPackagesResponse {
  /**
   * The details of all Daml-LF packages known to backing participant.
   * Required
   */
  packageDetails: PackageDetails[];
}

export interface PackageDetails {
  /**
   * The identity of the Daml-LF package.
   * Must be a valid PackageIdString (as describe in ``value.proto``).
   * Required
   */
  packageId: string;
  /**
   * Size of the package in bytes.
   * The size of the package is given by the size of the ``daml_lf``
   * ArchivePayload. See further details in ``daml_lf.proto``.
   * Required
   */
  packageSize: number;
  /**
   * Indicates since when the package is known to the backing participant.
   * Required
   */
  knownSince:
    | Date
    | undefined;
  /** Name of the package as defined by the package metadata */
  name: string;
  /** Version of the package as defined by the package metadata */
  version: string;
}

export interface UploadDarFileRequest {
  /**
   * Contains a Daml archive DAR file, which in turn is a jar like zipped
   * container for ``daml_lf`` archives. See further details in
   * ``daml_lf.proto``.
   * Required
   */
  darFile: Uint8Array;
  /**
   * Unique submission identifier.
   * Optional, defaults to a random identifier.
   */
  submissionId: string;
}

/** A message that is received when the upload operation succeeded. */
export interface UploadDarFileResponse {
}

/**
 * Performs the same checks that UploadDarFileRequest would perform, but doesn't
 * upload the DAR.
 */
export interface ValidateDarFileRequest {
  /**
   * Contains a Daml archive DAR file, which in turn is a jar like zipped
   * container for ``daml_lf`` archives. See further details in
   * ``daml_lf.proto``.
   * Required
   */
  darFile: Uint8Array;
  /**
   * Unique submission identifier.
   * Optional, defaults to a random identifier.
   */
  submissionId: string;
}

export interface ValidateDarFileResponse {
}

function createBaseListKnownPackagesRequest(): ListKnownPackagesRequest {
  return {};
}

export const ListKnownPackagesRequest: MessageFns<ListKnownPackagesRequest> = {
  encode(_: ListKnownPackagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKnownPackagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKnownPackagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListKnownPackagesRequest {
    return {};
  },

  toJSON(_: ListKnownPackagesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListKnownPackagesRequest>, I>>(base?: I): ListKnownPackagesRequest {
    return ListKnownPackagesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListKnownPackagesRequest>, I>>(_: I): ListKnownPackagesRequest {
    const message = createBaseListKnownPackagesRequest();
    return message;
  },
};

function createBaseListKnownPackagesResponse(): ListKnownPackagesResponse {
  return { packageDetails: [] };
}

export const ListKnownPackagesResponse: MessageFns<ListKnownPackagesResponse> = {
  encode(message: ListKnownPackagesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.packageDetails) {
      PackageDetails.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKnownPackagesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKnownPackagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.packageDetails.push(PackageDetails.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKnownPackagesResponse {
    return {
      packageDetails: gt.Array.isArray(object?.packageDetails)
        ? object.packageDetails.map((e: any) => PackageDetails.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListKnownPackagesResponse): unknown {
    const obj: any = {};
    if (message.packageDetails?.length) {
      obj.packageDetails = message.packageDetails.map((e) => PackageDetails.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListKnownPackagesResponse>, I>>(base?: I): ListKnownPackagesResponse {
    return ListKnownPackagesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListKnownPackagesResponse>, I>>(object: I): ListKnownPackagesResponse {
    const message = createBaseListKnownPackagesResponse();
    message.packageDetails = object.packageDetails?.map((e) => PackageDetails.fromPartial(e)) || [];
    return message;
  },
};

function createBasePackageDetails(): PackageDetails {
  return { packageId: "", packageSize: 0, knownSince: undefined, name: "", version: "" };
}

export const PackageDetails: MessageFns<PackageDetails> = {
  encode(message: PackageDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.packageId !== "") {
      writer.uint32(10).string(message.packageId);
    }
    if (message.packageSize !== 0) {
      writer.uint32(16).uint64(message.packageSize);
    }
    if (message.knownSince !== undefined) {
      Timestamp.encode(toTimestamp(message.knownSince), writer.uint32(26).fork()).join();
    }
    if (message.name !== "") {
      writer.uint32(34).string(message.name);
    }
    if (message.version !== "") {
      writer.uint32(42).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PackageDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackageDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.packageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.packageSize = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.knownSince = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.version = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PackageDetails {
    return {
      packageId: isSet(object.packageId) ? gt.String(object.packageId) : "",
      packageSize: isSet(object.packageSize) ? gt.Number(object.packageSize) : 0,
      knownSince: isSet(object.knownSince) ? fromJsonTimestamp(object.knownSince) : undefined,
      name: isSet(object.name) ? gt.String(object.name) : "",
      version: isSet(object.version) ? gt.String(object.version) : "",
    };
  },

  toJSON(message: PackageDetails): unknown {
    const obj: any = {};
    if (message.packageId !== "") {
      obj.packageId = message.packageId;
    }
    if (message.packageSize !== 0) {
      obj.packageSize = Math.round(message.packageSize);
    }
    if (message.knownSince !== undefined) {
      obj.knownSince = message.knownSince.toISOString();
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PackageDetails>, I>>(base?: I): PackageDetails {
    return PackageDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PackageDetails>, I>>(object: I): PackageDetails {
    const message = createBasePackageDetails();
    message.packageId = object.packageId ?? "";
    message.packageSize = object.packageSize ?? 0;
    message.knownSince = object.knownSince ?? undefined;
    message.name = object.name ?? "";
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseUploadDarFileRequest(): UploadDarFileRequest {
  return { darFile: new Uint8Array(0), submissionId: "" };
}

export const UploadDarFileRequest: MessageFns<UploadDarFileRequest> = {
  encode(message: UploadDarFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.darFile.length !== 0) {
      writer.uint32(10).bytes(message.darFile);
    }
    if (message.submissionId !== "") {
      writer.uint32(18).string(message.submissionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadDarFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadDarFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.darFile = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.submissionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadDarFileRequest {
    return {
      darFile: isSet(object.darFile) ? bytesFromBase64(object.darFile) : new Uint8Array(0),
      submissionId: isSet(object.submissionId) ? gt.String(object.submissionId) : "",
    };
  },

  toJSON(message: UploadDarFileRequest): unknown {
    const obj: any = {};
    if (message.darFile.length !== 0) {
      obj.darFile = base64FromBytes(message.darFile);
    }
    if (message.submissionId !== "") {
      obj.submissionId = message.submissionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadDarFileRequest>, I>>(base?: I): UploadDarFileRequest {
    return UploadDarFileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadDarFileRequest>, I>>(object: I): UploadDarFileRequest {
    const message = createBaseUploadDarFileRequest();
    message.darFile = object.darFile ?? new Uint8Array(0);
    message.submissionId = object.submissionId ?? "";
    return message;
  },
};

function createBaseUploadDarFileResponse(): UploadDarFileResponse {
  return {};
}

export const UploadDarFileResponse: MessageFns<UploadDarFileResponse> = {
  encode(_: UploadDarFileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadDarFileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadDarFileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UploadDarFileResponse {
    return {};
  },

  toJSON(_: UploadDarFileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadDarFileResponse>, I>>(base?: I): UploadDarFileResponse {
    return UploadDarFileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadDarFileResponse>, I>>(_: I): UploadDarFileResponse {
    const message = createBaseUploadDarFileResponse();
    return message;
  },
};

function createBaseValidateDarFileRequest(): ValidateDarFileRequest {
  return { darFile: new Uint8Array(0), submissionId: "" };
}

export const ValidateDarFileRequest: MessageFns<ValidateDarFileRequest> = {
  encode(message: ValidateDarFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.darFile.length !== 0) {
      writer.uint32(10).bytes(message.darFile);
    }
    if (message.submissionId !== "") {
      writer.uint32(18).string(message.submissionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateDarFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateDarFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.darFile = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.submissionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateDarFileRequest {
    return {
      darFile: isSet(object.darFile) ? bytesFromBase64(object.darFile) : new Uint8Array(0),
      submissionId: isSet(object.submissionId) ? gt.String(object.submissionId) : "",
    };
  },

  toJSON(message: ValidateDarFileRequest): unknown {
    const obj: any = {};
    if (message.darFile.length !== 0) {
      obj.darFile = base64FromBytes(message.darFile);
    }
    if (message.submissionId !== "") {
      obj.submissionId = message.submissionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateDarFileRequest>, I>>(base?: I): ValidateDarFileRequest {
    return ValidateDarFileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateDarFileRequest>, I>>(object: I): ValidateDarFileRequest {
    const message = createBaseValidateDarFileRequest();
    message.darFile = object.darFile ?? new Uint8Array(0);
    message.submissionId = object.submissionId ?? "";
    return message;
  },
};

function createBaseValidateDarFileResponse(): ValidateDarFileResponse {
  return {};
}

export const ValidateDarFileResponse: MessageFns<ValidateDarFileResponse> = {
  encode(_: ValidateDarFileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateDarFileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateDarFileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ValidateDarFileResponse {
    return {};
  },

  toJSON(_: ValidateDarFileResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateDarFileResponse>, I>>(base?: I): ValidateDarFileResponse {
    return ValidateDarFileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateDarFileResponse>, I>>(_: I): ValidateDarFileResponse {
    const message = createBaseValidateDarFileResponse();
    return message;
  },
};

/**
 * Status: experimental interface, will change before it is deemed production
 * ready
 *
 * Query the Daml-LF packages supported by the ledger participant and upload
 * DAR files. We use 'backing participant' to refer to this specific participant
 * in the methods of this API.
 */
export interface PackageManagementService {
  /** Returns the details of all Daml-LF packages known to the backing participant. */
  ListKnownPackages(request: ListKnownPackagesRequest): Promise<ListKnownPackagesResponse>;
  /**
   * Upload a DAR file to the backing participant.
   * Depending on the ledger implementation this might also make the package
   * available on the whole ledger. This call might not be supported by some
   * ledger implementations. Canton could be an example, where uploading a DAR
   * is not sufficient to render it usable, it must be activated first.
   * This call may:
   *
   * - Succeed, if the package was successfully uploaded, or if the same package
   *   was already uploaded before.
   * - Respond with a gRPC error
   */
  UploadDarFile(request: UploadDarFileRequest): Promise<UploadDarFileResponse>;
  /**
   * Performs the same checks that UploadDarFile call perform, but doesn't
   * upload the DAR and does not make it available on the whole ledger.
   * This call may:
   *
   * - Succeed if the package is valid
   * - Respond with a gRPC error if the package is not valid
   */
  ValidateDarFile(request: ValidateDarFileRequest): Promise<ValidateDarFileResponse>;
}

export const PackageManagementServiceServiceName = "com.daml.ledger.api.v2.admin.PackageManagementService";
export class PackageManagementServiceClientImpl implements PackageManagementService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PackageManagementServiceServiceName;
    this.rpc = rpc;
    this.ListKnownPackages = this.ListKnownPackages.bind(this);
    this.UploadDarFile = this.UploadDarFile.bind(this);
    this.ValidateDarFile = this.ValidateDarFile.bind(this);
  }
  ListKnownPackages(request: ListKnownPackagesRequest): Promise<ListKnownPackagesResponse> {
    const data = ListKnownPackagesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListKnownPackages", data);
    return promise.then((data) => ListKnownPackagesResponse.decode(new BinaryReader(data)));
  }

  UploadDarFile(request: UploadDarFileRequest): Promise<UploadDarFileResponse> {
    const data = UploadDarFileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UploadDarFile", data);
    return promise.then((data) => UploadDarFileResponse.decode(new BinaryReader(data)));
  }

  ValidateDarFile(request: ValidateDarFileRequest): Promise<ValidateDarFileResponse> {
    const data = ValidateDarFileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ValidateDarFile", data);
    return promise.then((data) => ValidateDarFileResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  const bin = gt.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(gt.String.fromCharCode(byte));
  });
  return gt.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
