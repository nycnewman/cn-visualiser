// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/admin/command_inspection_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../../google/protobuf/timestamp";
import { Command } from "../commands";
import { Completion } from "../completion";
import { Identifier, Value } from "../value";

export const protobufPackage = "com.daml.ledger.api.v2.admin";

export enum CommandState {
  /** COMMAND_STATE_UNSPECIFIED - This value acts as wildcard in the queries */
  COMMAND_STATE_UNSPECIFIED = 0,
  COMMAND_STATE_PENDING = 1,
  COMMAND_STATE_SUCCEEDED = 2,
  COMMAND_STATE_FAILED = 3,
  UNRECOGNIZED = -1,
}

export function commandStateFromJSON(object: any): CommandState {
  switch (object) {
    case 0:
    case "COMMAND_STATE_UNSPECIFIED":
      return CommandState.COMMAND_STATE_UNSPECIFIED;
    case 1:
    case "COMMAND_STATE_PENDING":
      return CommandState.COMMAND_STATE_PENDING;
    case 2:
    case "COMMAND_STATE_SUCCEEDED":
      return CommandState.COMMAND_STATE_SUCCEEDED;
    case 3:
    case "COMMAND_STATE_FAILED":
      return CommandState.COMMAND_STATE_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CommandState.UNRECOGNIZED;
  }
}

export function commandStateToJSON(object: CommandState): string {
  switch (object) {
    case CommandState.COMMAND_STATE_UNSPECIFIED:
      return "COMMAND_STATE_UNSPECIFIED";
    case CommandState.COMMAND_STATE_PENDING:
      return "COMMAND_STATE_PENDING";
    case CommandState.COMMAND_STATE_SUCCEEDED:
      return "COMMAND_STATE_SUCCEEDED";
    case CommandState.COMMAND_STATE_FAILED:
      return "COMMAND_STATE_FAILED";
    case CommandState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface GetCommandStatusRequest {
  /** optional filter by command id */
  commandIdPrefix: string;
  /** optional filter by state */
  state: CommandState;
  /** optional limit of returned statuses, defaults to 100 */
  limit: number;
}

export interface GetCommandStatusResponse {
  commandStatus: CommandStatus[];
}

export interface CommandStatus {
  started: Date | undefined;
  completed: Date | undefined;
  completion: Completion | undefined;
  state: CommandState;
  commands: Command[];
  requestStatistics: RequestStatistics | undefined;
  updates: CommandUpdates | undefined;
}

export interface RequestStatistics {
  envelopes: number;
  requestSize: number;
  recipients: number;
}

export interface CommandUpdates {
  created: Contract[];
  archived: Contract[];
  exercised: number;
  fetched: number;
  lookedUpByKey: number;
}

export interface Contract {
  /**
   * The identifier of the template used to create the contract.
   * The identifier uses the package-id reference format.
   *
   * Required
   */
  templateId:
    | Identifier
    | undefined;
  /**
   * The contract's ID
   *
   * Required
   */
  contractId: string;
  /**
   * The contract key, if defined
   *
   * Optional
   */
  contractKey: Value | undefined;
}

function createBaseGetCommandStatusRequest(): GetCommandStatusRequest {
  return { commandIdPrefix: "", state: 0, limit: 0 };
}

export const GetCommandStatusRequest: MessageFns<GetCommandStatusRequest> = {
  encode(message: GetCommandStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commandIdPrefix !== "") {
      writer.uint32(10).string(message.commandIdPrefix);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.limit !== 0) {
      writer.uint32(24).uint32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCommandStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCommandStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commandIdPrefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCommandStatusRequest {
    return {
      commandIdPrefix: isSet(object.commandIdPrefix) ? gt.String(object.commandIdPrefix) : "",
      state: isSet(object.state) ? commandStateFromJSON(object.state) : 0,
      limit: isSet(object.limit) ? gt.Number(object.limit) : 0,
    };
  },

  toJSON(message: GetCommandStatusRequest): unknown {
    const obj: any = {};
    if (message.commandIdPrefix !== "") {
      obj.commandIdPrefix = message.commandIdPrefix;
    }
    if (message.state !== 0) {
      obj.state = commandStateToJSON(message.state);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCommandStatusRequest>, I>>(base?: I): GetCommandStatusRequest {
    return GetCommandStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCommandStatusRequest>, I>>(object: I): GetCommandStatusRequest {
    const message = createBaseGetCommandStatusRequest();
    message.commandIdPrefix = object.commandIdPrefix ?? "";
    message.state = object.state ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseGetCommandStatusResponse(): GetCommandStatusResponse {
  return { commandStatus: [] };
}

export const GetCommandStatusResponse: MessageFns<GetCommandStatusResponse> = {
  encode(message: GetCommandStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.commandStatus) {
      CommandStatus.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCommandStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCommandStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commandStatus.push(CommandStatus.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCommandStatusResponse {
    return {
      commandStatus: gt.Array.isArray(object?.commandStatus)
        ? object.commandStatus.map((e: any) => CommandStatus.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetCommandStatusResponse): unknown {
    const obj: any = {};
    if (message.commandStatus?.length) {
      obj.commandStatus = message.commandStatus.map((e) => CommandStatus.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCommandStatusResponse>, I>>(base?: I): GetCommandStatusResponse {
    return GetCommandStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCommandStatusResponse>, I>>(object: I): GetCommandStatusResponse {
    const message = createBaseGetCommandStatusResponse();
    message.commandStatus = object.commandStatus?.map((e) => CommandStatus.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCommandStatus(): CommandStatus {
  return {
    started: undefined,
    completed: undefined,
    completion: undefined,
    state: 0,
    commands: [],
    requestStatistics: undefined,
    updates: undefined,
  };
}

export const CommandStatus: MessageFns<CommandStatus> = {
  encode(message: CommandStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.started !== undefined) {
      Timestamp.encode(toTimestamp(message.started), writer.uint32(10).fork()).join();
    }
    if (message.completed !== undefined) {
      Timestamp.encode(toTimestamp(message.completed), writer.uint32(18).fork()).join();
    }
    if (message.completion !== undefined) {
      Completion.encode(message.completion, writer.uint32(26).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(32).int32(message.state);
    }
    for (const v of message.commands) {
      Command.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.requestStatistics !== undefined) {
      RequestStatistics.encode(message.requestStatistics, writer.uint32(50).fork()).join();
    }
    if (message.updates !== undefined) {
      CommandUpdates.encode(message.updates, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.started = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.completed = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.completion = Completion.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.commands.push(Command.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.requestStatistics = RequestStatistics.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updates = CommandUpdates.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandStatus {
    return {
      started: isSet(object.started) ? fromJsonTimestamp(object.started) : undefined,
      completed: isSet(object.completed) ? fromJsonTimestamp(object.completed) : undefined,
      completion: isSet(object.completion) ? Completion.fromJSON(object.completion) : undefined,
      state: isSet(object.state) ? commandStateFromJSON(object.state) : 0,
      commands: gt.Array.isArray(object?.commands) ? object.commands.map((e: any) => Command.fromJSON(e)) : [],
      requestStatistics: isSet(object.requestStatistics)
        ? RequestStatistics.fromJSON(object.requestStatistics)
        : undefined,
      updates: isSet(object.updates) ? CommandUpdates.fromJSON(object.updates) : undefined,
    };
  },

  toJSON(message: CommandStatus): unknown {
    const obj: any = {};
    if (message.started !== undefined) {
      obj.started = message.started.toISOString();
    }
    if (message.completed !== undefined) {
      obj.completed = message.completed.toISOString();
    }
    if (message.completion !== undefined) {
      obj.completion = Completion.toJSON(message.completion);
    }
    if (message.state !== 0) {
      obj.state = commandStateToJSON(message.state);
    }
    if (message.commands?.length) {
      obj.commands = message.commands.map((e) => Command.toJSON(e));
    }
    if (message.requestStatistics !== undefined) {
      obj.requestStatistics = RequestStatistics.toJSON(message.requestStatistics);
    }
    if (message.updates !== undefined) {
      obj.updates = CommandUpdates.toJSON(message.updates);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandStatus>, I>>(base?: I): CommandStatus {
    return CommandStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandStatus>, I>>(object: I): CommandStatus {
    const message = createBaseCommandStatus();
    message.started = object.started ?? undefined;
    message.completed = object.completed ?? undefined;
    message.completion = (object.completion !== undefined && object.completion !== null)
      ? Completion.fromPartial(object.completion)
      : undefined;
    message.state = object.state ?? 0;
    message.commands = object.commands?.map((e) => Command.fromPartial(e)) || [];
    message.requestStatistics = (object.requestStatistics !== undefined && object.requestStatistics !== null)
      ? RequestStatistics.fromPartial(object.requestStatistics)
      : undefined;
    message.updates = (object.updates !== undefined && object.updates !== null)
      ? CommandUpdates.fromPartial(object.updates)
      : undefined;
    return message;
  },
};

function createBaseRequestStatistics(): RequestStatistics {
  return { envelopes: 0, requestSize: 0, recipients: 0 };
}

export const RequestStatistics: MessageFns<RequestStatistics> = {
  encode(message: RequestStatistics, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.envelopes !== 0) {
      writer.uint32(8).uint32(message.envelopes);
    }
    if (message.requestSize !== 0) {
      writer.uint32(16).uint32(message.requestSize);
    }
    if (message.recipients !== 0) {
      writer.uint32(24).uint32(message.recipients);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RequestStatistics {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestStatistics();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.envelopes = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.requestSize = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.recipients = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestStatistics {
    return {
      envelopes: isSet(object.envelopes) ? gt.Number(object.envelopes) : 0,
      requestSize: isSet(object.requestSize) ? gt.Number(object.requestSize) : 0,
      recipients: isSet(object.recipients) ? gt.Number(object.recipients) : 0,
    };
  },

  toJSON(message: RequestStatistics): unknown {
    const obj: any = {};
    if (message.envelopes !== 0) {
      obj.envelopes = Math.round(message.envelopes);
    }
    if (message.requestSize !== 0) {
      obj.requestSize = Math.round(message.requestSize);
    }
    if (message.recipients !== 0) {
      obj.recipients = Math.round(message.recipients);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RequestStatistics>, I>>(base?: I): RequestStatistics {
    return RequestStatistics.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RequestStatistics>, I>>(object: I): RequestStatistics {
    const message = createBaseRequestStatistics();
    message.envelopes = object.envelopes ?? 0;
    message.requestSize = object.requestSize ?? 0;
    message.recipients = object.recipients ?? 0;
    return message;
  },
};

function createBaseCommandUpdates(): CommandUpdates {
  return { created: [], archived: [], exercised: 0, fetched: 0, lookedUpByKey: 0 };
}

export const CommandUpdates: MessageFns<CommandUpdates> = {
  encode(message: CommandUpdates, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.created) {
      Contract.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.archived) {
      Contract.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.exercised !== 0) {
      writer.uint32(24).uint32(message.exercised);
    }
    if (message.fetched !== 0) {
      writer.uint32(32).uint32(message.fetched);
    }
    if (message.lookedUpByKey !== 0) {
      writer.uint32(40).uint32(message.lookedUpByKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandUpdates {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandUpdates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.created.push(Contract.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.archived.push(Contract.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.exercised = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.fetched = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.lookedUpByKey = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandUpdates {
    return {
      created: gt.Array.isArray(object?.created) ? object.created.map((e: any) => Contract.fromJSON(e)) : [],
      archived: gt.Array.isArray(object?.archived) ? object.archived.map((e: any) => Contract.fromJSON(e)) : [],
      exercised: isSet(object.exercised) ? gt.Number(object.exercised) : 0,
      fetched: isSet(object.fetched) ? gt.Number(object.fetched) : 0,
      lookedUpByKey: isSet(object.lookedUpByKey) ? gt.Number(object.lookedUpByKey) : 0,
    };
  },

  toJSON(message: CommandUpdates): unknown {
    const obj: any = {};
    if (message.created?.length) {
      obj.created = message.created.map((e) => Contract.toJSON(e));
    }
    if (message.archived?.length) {
      obj.archived = message.archived.map((e) => Contract.toJSON(e));
    }
    if (message.exercised !== 0) {
      obj.exercised = Math.round(message.exercised);
    }
    if (message.fetched !== 0) {
      obj.fetched = Math.round(message.fetched);
    }
    if (message.lookedUpByKey !== 0) {
      obj.lookedUpByKey = Math.round(message.lookedUpByKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandUpdates>, I>>(base?: I): CommandUpdates {
    return CommandUpdates.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandUpdates>, I>>(object: I): CommandUpdates {
    const message = createBaseCommandUpdates();
    message.created = object.created?.map((e) => Contract.fromPartial(e)) || [];
    message.archived = object.archived?.map((e) => Contract.fromPartial(e)) || [];
    message.exercised = object.exercised ?? 0;
    message.fetched = object.fetched ?? 0;
    message.lookedUpByKey = object.lookedUpByKey ?? 0;
    return message;
  },
};

function createBaseContract(): Contract {
  return { templateId: undefined, contractId: "", contractKey: undefined };
}

export const Contract: MessageFns<Contract> = {
  encode(message: Contract, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.templateId !== undefined) {
      Identifier.encode(message.templateId, writer.uint32(10).fork()).join();
    }
    if (message.contractId !== "") {
      writer.uint32(18).string(message.contractId);
    }
    if (message.contractKey !== undefined) {
      Value.encode(message.contractKey, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Contract {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContract();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.templateId = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contractId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contractKey = Value.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Contract {
    return {
      templateId: isSet(object.templateId) ? Identifier.fromJSON(object.templateId) : undefined,
      contractId: isSet(object.contractId) ? gt.String(object.contractId) : "",
      contractKey: isSet(object.contractKey) ? Value.fromJSON(object.contractKey) : undefined,
    };
  },

  toJSON(message: Contract): unknown {
    const obj: any = {};
    if (message.templateId !== undefined) {
      obj.templateId = Identifier.toJSON(message.templateId);
    }
    if (message.contractId !== "") {
      obj.contractId = message.contractId;
    }
    if (message.contractKey !== undefined) {
      obj.contractKey = Value.toJSON(message.contractKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Contract>, I>>(base?: I): Contract {
    return Contract.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Contract>, I>>(object: I): Contract {
    const message = createBaseContract();
    message.templateId = (object.templateId !== undefined && object.templateId !== null)
      ? Identifier.fromPartial(object.templateId)
      : undefined;
    message.contractId = object.contractId ?? "";
    message.contractKey = (object.contractKey !== undefined && object.contractKey !== null)
      ? Value.fromPartial(object.contractKey)
      : undefined;
    return message;
  },
};

/**
 * Status: experimental interface, will change before it is deemed production
 * ready
 *
 * The inspection service provides methods for the ledger administrator
 * to look under the hood of a running system.
 * In V2 Ledger API this service is not available.
 */
export interface CommandInspectionService {
  /**
   * Inquire about the status of a command.
   * This service is used for debugging only. The command status is only tracked in memory and is not persisted.
   * The service can be used to understand the failure status and the structure of a command.
   * Requires admin privileges
   * The service is alpha without backward compatibility guarantees.
   */
  GetCommandStatus(request: GetCommandStatusRequest): Promise<GetCommandStatusResponse>;
}

export const CommandInspectionServiceServiceName = "com.daml.ledger.api.v2.admin.CommandInspectionService";
export class CommandInspectionServiceClientImpl implements CommandInspectionService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CommandInspectionServiceServiceName;
    this.rpc = rpc;
    this.GetCommandStatus = this.GetCommandStatus.bind(this);
  }
  GetCommandStatus(request: GetCommandStatusRequest): Promise<GetCommandStatusResponse> {
    const data = GetCommandStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCommandStatus", data);
    return promise.then((data) => GetCommandStatusResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
