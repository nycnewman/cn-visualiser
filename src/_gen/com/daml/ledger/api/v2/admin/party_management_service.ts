// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/admin/party_management_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FieldMask } from "../../../../../../google/protobuf/field_mask";
import { ObjectMeta } from "./object_meta";

export const protobufPackage = "com.daml.ledger.api.v2.admin";

/** Required authorization: ``HasRight(ParticipantAdmin)`` */
export interface GetParticipantIdRequest {
}

export interface GetParticipantIdResponse {
  /**
   * Identifier of the participant, which SHOULD be globally unique.
   * Must be a valid LedgerString (as describe in ``value.proto``).
   */
  participantId: string;
}

/** Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)`` */
export interface GetPartiesRequest {
  /**
   * The stable, unique identifier of the Daml parties.
   * Must be valid PartyIdStrings (as described in ``value.proto``).
   * Required
   */
  parties: string[];
  /**
   * The id of the ``Identity Provider`` whose parties should be retrieved.
   * Optional, if not set, assume the party is managed by the default identity provider or party is not hosted by the participant.
   */
  identityProviderId: string;
}

export interface GetPartiesResponse {
  /**
   * The details of the requested Daml parties by the participant, if known.
   * The party details may not be in the same order as requested.
   * Required
   */
  partyDetails: PartyDetails[];
}

/** Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)`` */
export interface ListKnownPartiesRequest {
  /**
   * Pagination token to determine the specific page to fetch. Using the token guarantees that parties on a subsequent
   * page are all lexically greater than the last party on a previous page. Server does not store intermediate results
   * between calls chained by a series of page tokens. As a consequence, if new parties are being added and a page is
   * requested twice using the same token, more parties can be returned on the second call.
   * Leave empty to fetch the first page.
   * Optional
   */
  pageToken: string;
  /**
   * Maximum number of results to be returned by the server. The server will return no more than that many results,
   * but it might return fewer. If the page_size is 0, the server will decide the number of results to be returned.
   * If the page_size exceeds the maximum supported by the server, an error will be returned. To obtain the server's
   * maximum consult the PartyManagementFeature descriptor available in the VersionService.
   * Optional
   */
  pageSize: number;
  /**
   * The id of the ``Identity Provider`` whose parties should be retrieved.
   * Optional, if not set, assume the party is managed by the default identity provider or party is not hosted by the participant.
   */
  identityProviderId: string;
}

export interface ListKnownPartiesResponse {
  /**
   * The details of all Daml parties known by the participant.
   * Required
   */
  partyDetails: PartyDetails[];
  /**
   * Pagination token to retrieve the next page.
   * Empty, if there are no further results.
   */
  nextPageToken: string;
}

/** Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)`` */
export interface AllocatePartyRequest {
  /**
   * A hint to the participant which party ID to allocate. It can be
   * ignored.
   * Must be a valid PartyIdString (as described in ``value.proto``).
   * Optional
   */
  partyIdHint: string;
  /**
   * Participant-local metadata to be stored in the ``PartyDetails`` of this newly allocated party.
   * Optional
   */
  localMetadata:
    | ObjectMeta
    | undefined;
  /**
   * The id of the ``Identity Provider``
   * Optional, if not set, assume the party is managed by the default identity provider or party is not hosted by the participant.
   */
  identityProviderId: string;
}

export interface AllocatePartyResponse {
  partyDetails: PartyDetails | undefined;
}

/** Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(party_details.identity_provider_id)`` */
export interface UpdatePartyDetailsRequest {
  /**
   * Party to be updated
   * Required,
   * Modifiable
   */
  partyDetails:
    | PartyDetails
    | undefined;
  /**
   * An update mask specifies how and which properties of the ``PartyDetails`` message are to be updated.
   * An update mask consists of a set of update paths.
   * A valid update path points to a field or a subfield relative to the ``PartyDetails`` message.
   * A valid update mask must:
   *
   * 1. contain at least one update path,
   * 2. contain only valid update paths.
   *
   * Fields that can be updated are marked as ``Modifiable``.
   * An update path can also point to non-``Modifiable`` fields such as 'party' and 'local_metadata.resource_version'
   * because they are used:
   *
   * 1. to identify the party details resource subject to the update,
   * 2. for concurrent change control.
   *
   * An update path can also point to non-``Modifiable`` fields such as 'is_local'
   * as long as the values provided in the update request match the server values.
   * Examples of update paths: 'local_metadata.annotations', 'local_metadata'.
   * For additional information see the documentation for standard protobuf3's ``google.protobuf.FieldMask``.
   * For similar Ledger API see ``com.daml.ledger.api.v2.admin.UpdateUserRequest``.
   * Required
   */
  updateMask: string[] | undefined;
}

export interface UpdatePartyDetailsResponse {
  /** Updated party details */
  partyDetails: PartyDetails | undefined;
}

export interface PartyDetails {
  /**
   * The stable unique identifier of a Daml party.
   * Must be a valid PartyIdString (as described in ``value.proto``).
   * Required
   */
  party: string;
  /**
   * true if party is hosted by the participant and the party shares the same identity provider as the user issuing the request.
   * Optional
   */
  isLocal: boolean;
  /**
   * Participant-local metadata of this party.
   * Optional,
   * Modifiable
   */
  localMetadata:
    | ObjectMeta
    | undefined;
  /**
   * The id of the ``Identity Provider``
   * Optional, if not set, there could be 3 options:
   *
   * 1. the party is managed by the default identity provider.
   * 2. party is not hosted by the participant.
   * 3. party is hosted by the participant, but is outside of the user's identity provider.
   */
  identityProviderId: string;
}

/** Required authorization: ``HasRight(ParticipantAdmin)`` */
export interface UpdatePartyIdentityProviderIdRequest {
  /** Party to update */
  party: string;
  /** Current identity provider id of the party */
  sourceIdentityProviderId: string;
  /** Target identity provider id of the party */
  targetIdentityProviderId: string;
}

export interface UpdatePartyIdentityProviderIdResponse {
}

function createBaseGetParticipantIdRequest(): GetParticipantIdRequest {
  return {};
}

export const GetParticipantIdRequest: MessageFns<GetParticipantIdRequest> = {
  encode(_: GetParticipantIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetParticipantIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetParticipantIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetParticipantIdRequest {
    return {};
  },

  toJSON(_: GetParticipantIdRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetParticipantIdRequest>, I>>(base?: I): GetParticipantIdRequest {
    return GetParticipantIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetParticipantIdRequest>, I>>(_: I): GetParticipantIdRequest {
    const message = createBaseGetParticipantIdRequest();
    return message;
  },
};

function createBaseGetParticipantIdResponse(): GetParticipantIdResponse {
  return { participantId: "" };
}

export const GetParticipantIdResponse: MessageFns<GetParticipantIdResponse> = {
  encode(message: GetParticipantIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.participantId !== "") {
      writer.uint32(10).string(message.participantId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetParticipantIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetParticipantIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.participantId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetParticipantIdResponse {
    return { participantId: isSet(object.participantId) ? gt.String(object.participantId) : "" };
  },

  toJSON(message: GetParticipantIdResponse): unknown {
    const obj: any = {};
    if (message.participantId !== "") {
      obj.participantId = message.participantId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetParticipantIdResponse>, I>>(base?: I): GetParticipantIdResponse {
    return GetParticipantIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetParticipantIdResponse>, I>>(object: I): GetParticipantIdResponse {
    const message = createBaseGetParticipantIdResponse();
    message.participantId = object.participantId ?? "";
    return message;
  },
};

function createBaseGetPartiesRequest(): GetPartiesRequest {
  return { parties: [], identityProviderId: "" };
}

export const GetPartiesRequest: MessageFns<GetPartiesRequest> = {
  encode(message: GetPartiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.parties) {
      writer.uint32(10).string(v!);
    }
    if (message.identityProviderId !== "") {
      writer.uint32(18).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPartiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPartiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.parties.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPartiesRequest {
    return {
      parties: gt.Array.isArray(object?.parties) ? object.parties.map((e: any) => gt.String(e)) : [],
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: GetPartiesRequest): unknown {
    const obj: any = {};
    if (message.parties?.length) {
      obj.parties = message.parties;
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPartiesRequest>, I>>(base?: I): GetPartiesRequest {
    return GetPartiesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPartiesRequest>, I>>(object: I): GetPartiesRequest {
    const message = createBaseGetPartiesRequest();
    message.parties = object.parties?.map((e) => e) || [];
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseGetPartiesResponse(): GetPartiesResponse {
  return { partyDetails: [] };
}

export const GetPartiesResponse: MessageFns<GetPartiesResponse> = {
  encode(message: GetPartiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.partyDetails) {
      PartyDetails.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPartiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPartiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.partyDetails.push(PartyDetails.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPartiesResponse {
    return {
      partyDetails: gt.Array.isArray(object?.partyDetails)
        ? object.partyDetails.map((e: any) => PartyDetails.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetPartiesResponse): unknown {
    const obj: any = {};
    if (message.partyDetails?.length) {
      obj.partyDetails = message.partyDetails.map((e) => PartyDetails.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPartiesResponse>, I>>(base?: I): GetPartiesResponse {
    return GetPartiesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPartiesResponse>, I>>(object: I): GetPartiesResponse {
    const message = createBaseGetPartiesResponse();
    message.partyDetails = object.partyDetails?.map((e) => PartyDetails.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListKnownPartiesRequest(): ListKnownPartiesRequest {
  return { pageToken: "", pageSize: 0, identityProviderId: "" };
}

export const ListKnownPartiesRequest: MessageFns<ListKnownPartiesRequest> = {
  encode(message: ListKnownPartiesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.identityProviderId !== "") {
      writer.uint32(10).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKnownPartiesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKnownPartiesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKnownPartiesRequest {
    return {
      pageToken: isSet(object.pageToken) ? gt.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? gt.Number(object.pageSize) : 0,
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: ListKnownPartiesRequest): unknown {
    const obj: any = {};
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListKnownPartiesRequest>, I>>(base?: I): ListKnownPartiesRequest {
    return ListKnownPartiesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListKnownPartiesRequest>, I>>(object: I): ListKnownPartiesRequest {
    const message = createBaseListKnownPartiesRequest();
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseListKnownPartiesResponse(): ListKnownPartiesResponse {
  return { partyDetails: [], nextPageToken: "" };
}

export const ListKnownPartiesResponse: MessageFns<ListKnownPartiesResponse> = {
  encode(message: ListKnownPartiesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.partyDetails) {
      PartyDetails.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListKnownPartiesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListKnownPartiesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.partyDetails.push(PartyDetails.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListKnownPartiesResponse {
    return {
      partyDetails: gt.Array.isArray(object?.partyDetails)
        ? object.partyDetails.map((e: any) => PartyDetails.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? gt.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListKnownPartiesResponse): unknown {
    const obj: any = {};
    if (message.partyDetails?.length) {
      obj.partyDetails = message.partyDetails.map((e) => PartyDetails.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListKnownPartiesResponse>, I>>(base?: I): ListKnownPartiesResponse {
    return ListKnownPartiesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListKnownPartiesResponse>, I>>(object: I): ListKnownPartiesResponse {
    const message = createBaseListKnownPartiesResponse();
    message.partyDetails = object.partyDetails?.map((e) => PartyDetails.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseAllocatePartyRequest(): AllocatePartyRequest {
  return { partyIdHint: "", localMetadata: undefined, identityProviderId: "" };
}

export const AllocatePartyRequest: MessageFns<AllocatePartyRequest> = {
  encode(message: AllocatePartyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partyIdHint !== "") {
      writer.uint32(10).string(message.partyIdHint);
    }
    if (message.localMetadata !== undefined) {
      ObjectMeta.encode(message.localMetadata, writer.uint32(26).fork()).join();
    }
    if (message.identityProviderId !== "") {
      writer.uint32(34).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllocatePartyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllocatePartyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.partyIdHint = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.localMetadata = ObjectMeta.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllocatePartyRequest {
    return {
      partyIdHint: isSet(object.partyIdHint) ? gt.String(object.partyIdHint) : "",
      localMetadata: isSet(object.localMetadata) ? ObjectMeta.fromJSON(object.localMetadata) : undefined,
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: AllocatePartyRequest): unknown {
    const obj: any = {};
    if (message.partyIdHint !== "") {
      obj.partyIdHint = message.partyIdHint;
    }
    if (message.localMetadata !== undefined) {
      obj.localMetadata = ObjectMeta.toJSON(message.localMetadata);
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllocatePartyRequest>, I>>(base?: I): AllocatePartyRequest {
    return AllocatePartyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllocatePartyRequest>, I>>(object: I): AllocatePartyRequest {
    const message = createBaseAllocatePartyRequest();
    message.partyIdHint = object.partyIdHint ?? "";
    message.localMetadata = (object.localMetadata !== undefined && object.localMetadata !== null)
      ? ObjectMeta.fromPartial(object.localMetadata)
      : undefined;
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseAllocatePartyResponse(): AllocatePartyResponse {
  return { partyDetails: undefined };
}

export const AllocatePartyResponse: MessageFns<AllocatePartyResponse> = {
  encode(message: AllocatePartyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partyDetails !== undefined) {
      PartyDetails.encode(message.partyDetails, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AllocatePartyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAllocatePartyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.partyDetails = PartyDetails.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AllocatePartyResponse {
    return { partyDetails: isSet(object.partyDetails) ? PartyDetails.fromJSON(object.partyDetails) : undefined };
  },

  toJSON(message: AllocatePartyResponse): unknown {
    const obj: any = {};
    if (message.partyDetails !== undefined) {
      obj.partyDetails = PartyDetails.toJSON(message.partyDetails);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AllocatePartyResponse>, I>>(base?: I): AllocatePartyResponse {
    return AllocatePartyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AllocatePartyResponse>, I>>(object: I): AllocatePartyResponse {
    const message = createBaseAllocatePartyResponse();
    message.partyDetails = (object.partyDetails !== undefined && object.partyDetails !== null)
      ? PartyDetails.fromPartial(object.partyDetails)
      : undefined;
    return message;
  },
};

function createBaseUpdatePartyDetailsRequest(): UpdatePartyDetailsRequest {
  return { partyDetails: undefined, updateMask: undefined };
}

export const UpdatePartyDetailsRequest: MessageFns<UpdatePartyDetailsRequest> = {
  encode(message: UpdatePartyDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partyDetails !== undefined) {
      PartyDetails.encode(message.partyDetails, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePartyDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePartyDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.partyDetails = PartyDetails.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePartyDetailsRequest {
    return {
      partyDetails: isSet(object.partyDetails) ? PartyDetails.fromJSON(object.partyDetails) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdatePartyDetailsRequest): unknown {
    const obj: any = {};
    if (message.partyDetails !== undefined) {
      obj.partyDetails = PartyDetails.toJSON(message.partyDetails);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePartyDetailsRequest>, I>>(base?: I): UpdatePartyDetailsRequest {
    return UpdatePartyDetailsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePartyDetailsRequest>, I>>(object: I): UpdatePartyDetailsRequest {
    const message = createBaseUpdatePartyDetailsRequest();
    message.partyDetails = (object.partyDetails !== undefined && object.partyDetails !== null)
      ? PartyDetails.fromPartial(object.partyDetails)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdatePartyDetailsResponse(): UpdatePartyDetailsResponse {
  return { partyDetails: undefined };
}

export const UpdatePartyDetailsResponse: MessageFns<UpdatePartyDetailsResponse> = {
  encode(message: UpdatePartyDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.partyDetails !== undefined) {
      PartyDetails.encode(message.partyDetails, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePartyDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePartyDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.partyDetails = PartyDetails.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePartyDetailsResponse {
    return { partyDetails: isSet(object.partyDetails) ? PartyDetails.fromJSON(object.partyDetails) : undefined };
  },

  toJSON(message: UpdatePartyDetailsResponse): unknown {
    const obj: any = {};
    if (message.partyDetails !== undefined) {
      obj.partyDetails = PartyDetails.toJSON(message.partyDetails);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePartyDetailsResponse>, I>>(base?: I): UpdatePartyDetailsResponse {
    return UpdatePartyDetailsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePartyDetailsResponse>, I>>(object: I): UpdatePartyDetailsResponse {
    const message = createBaseUpdatePartyDetailsResponse();
    message.partyDetails = (object.partyDetails !== undefined && object.partyDetails !== null)
      ? PartyDetails.fromPartial(object.partyDetails)
      : undefined;
    return message;
  },
};

function createBasePartyDetails(): PartyDetails {
  return { party: "", isLocal: false, localMetadata: undefined, identityProviderId: "" };
}

export const PartyDetails: MessageFns<PartyDetails> = {
  encode(message: PartyDetails, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.party !== "") {
      writer.uint32(10).string(message.party);
    }
    if (message.isLocal !== false) {
      writer.uint32(24).bool(message.isLocal);
    }
    if (message.localMetadata !== undefined) {
      ObjectMeta.encode(message.localMetadata, writer.uint32(34).fork()).join();
    }
    if (message.identityProviderId !== "") {
      writer.uint32(42).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PartyDetails {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePartyDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.party = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isLocal = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.localMetadata = ObjectMeta.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PartyDetails {
    return {
      party: isSet(object.party) ? gt.String(object.party) : "",
      isLocal: isSet(object.isLocal) ? gt.Boolean(object.isLocal) : false,
      localMetadata: isSet(object.localMetadata) ? ObjectMeta.fromJSON(object.localMetadata) : undefined,
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: PartyDetails): unknown {
    const obj: any = {};
    if (message.party !== "") {
      obj.party = message.party;
    }
    if (message.isLocal !== false) {
      obj.isLocal = message.isLocal;
    }
    if (message.localMetadata !== undefined) {
      obj.localMetadata = ObjectMeta.toJSON(message.localMetadata);
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PartyDetails>, I>>(base?: I): PartyDetails {
    return PartyDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PartyDetails>, I>>(object: I): PartyDetails {
    const message = createBasePartyDetails();
    message.party = object.party ?? "";
    message.isLocal = object.isLocal ?? false;
    message.localMetadata = (object.localMetadata !== undefined && object.localMetadata !== null)
      ? ObjectMeta.fromPartial(object.localMetadata)
      : undefined;
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseUpdatePartyIdentityProviderIdRequest(): UpdatePartyIdentityProviderIdRequest {
  return { party: "", sourceIdentityProviderId: "", targetIdentityProviderId: "" };
}

export const UpdatePartyIdentityProviderIdRequest: MessageFns<UpdatePartyIdentityProviderIdRequest> = {
  encode(message: UpdatePartyIdentityProviderIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.party !== "") {
      writer.uint32(10).string(message.party);
    }
    if (message.sourceIdentityProviderId !== "") {
      writer.uint32(18).string(message.sourceIdentityProviderId);
    }
    if (message.targetIdentityProviderId !== "") {
      writer.uint32(26).string(message.targetIdentityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePartyIdentityProviderIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePartyIdentityProviderIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.party = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceIdentityProviderId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.targetIdentityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdatePartyIdentityProviderIdRequest {
    return {
      party: isSet(object.party) ? gt.String(object.party) : "",
      sourceIdentityProviderId: isSet(object.sourceIdentityProviderId)
        ? gt.String(object.sourceIdentityProviderId)
        : "",
      targetIdentityProviderId: isSet(object.targetIdentityProviderId)
        ? gt.String(object.targetIdentityProviderId)
        : "",
    };
  },

  toJSON(message: UpdatePartyIdentityProviderIdRequest): unknown {
    const obj: any = {};
    if (message.party !== "") {
      obj.party = message.party;
    }
    if (message.sourceIdentityProviderId !== "") {
      obj.sourceIdentityProviderId = message.sourceIdentityProviderId;
    }
    if (message.targetIdentityProviderId !== "") {
      obj.targetIdentityProviderId = message.targetIdentityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePartyIdentityProviderIdRequest>, I>>(
    base?: I,
  ): UpdatePartyIdentityProviderIdRequest {
    return UpdatePartyIdentityProviderIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePartyIdentityProviderIdRequest>, I>>(
    object: I,
  ): UpdatePartyIdentityProviderIdRequest {
    const message = createBaseUpdatePartyIdentityProviderIdRequest();
    message.party = object.party ?? "";
    message.sourceIdentityProviderId = object.sourceIdentityProviderId ?? "";
    message.targetIdentityProviderId = object.targetIdentityProviderId ?? "";
    return message;
  },
};

function createBaseUpdatePartyIdentityProviderIdResponse(): UpdatePartyIdentityProviderIdResponse {
  return {};
}

export const UpdatePartyIdentityProviderIdResponse: MessageFns<UpdatePartyIdentityProviderIdResponse> = {
  encode(_: UpdatePartyIdentityProviderIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdatePartyIdentityProviderIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdatePartyIdentityProviderIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdatePartyIdentityProviderIdResponse {
    return {};
  },

  toJSON(_: UpdatePartyIdentityProviderIdResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdatePartyIdentityProviderIdResponse>, I>>(
    base?: I,
  ): UpdatePartyIdentityProviderIdResponse {
    return UpdatePartyIdentityProviderIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdatePartyIdentityProviderIdResponse>, I>>(
    _: I,
  ): UpdatePartyIdentityProviderIdResponse {
    const message = createBaseUpdatePartyIdentityProviderIdResponse();
    return message;
  },
};

/**
 * This service allows inspecting the party management state of the ledger known to the participant
 * and managing the participant-local party metadata.
 *
 * The authorization rules for its RPCs are specified on the ``<RpcName>Request``
 * messages as boolean expressions over these facts:
 *
 * 1. ``HasRight(r)`` denoting whether the authenticated user has right ``r`` and
 * 2. ``IsAuthenticatedIdentityProviderAdmin(idp)`` denoting whether ``idp`` is equal to the ``identity_provider_id``
 *    of the authenticated user and the user has an IdentityProviderAdmin right.
 *
 * If `identity_provider_id` is set to an empty string, then it's effectively set to the value of access token's 'iss' field if that is provided.
 * If `identity_provider_id` remains an empty string, the default identity provider will be assumed.
 *
 * The fields of request messages (and sub-messages) are marked either as ``Optional`` or ``Required``:
 *
 * 1. ``Optional`` denoting the client may leave the field unset when sending a request.
 * 2. ``Required`` denoting the client must set the field to a non-default value when sending a request.
 *
 * A party details resource is described by the ``PartyDetails`` message,
 * A party details resource, once it has been created, can be modified using the ``UpdatePartyDetails`` RPC.
 * The only fields that can be modified are those marked as ``Modifiable``.
 */
export interface PartyManagementService {
  /**
   * Return the identifier of the participant.
   * All horizontally scaled replicas should return the same id.
   * daml-on-kv-ledger: returns an identifier supplied on command line at launch time
   * canton: returns globally unique identifier of the participant
   */
  GetParticipantId(request: GetParticipantIdRequest): Promise<GetParticipantIdResponse>;
  /**
   * Get the party details of the given parties. Only known parties will be
   * returned in the list.
   */
  GetParties(request: GetPartiesRequest): Promise<GetPartiesResponse>;
  /**
   * List the parties known by the participant.
   * The list returned contains parties whose ledger access is facilitated by
   * the participant and the ones maintained elsewhere.
   */
  ListKnownParties(request: ListKnownPartiesRequest): Promise<ListKnownPartiesResponse>;
  /**
   * Allocates a new party on a ledger and adds it to the set managed by the participant.
   * Caller specifies a party identifier suggestion, the actual identifier
   * allocated might be different and is implementation specific.
   * Caller can specify party metadata that is stored locally on the participant.
   * This call may:
   *
   * - Succeed, in which case the actual allocated identifier is visible in
   *   the response.
   * - Respond with a gRPC error
   *
   * daml-on-kv-ledger: suggestion's uniqueness is checked by the validators in
   * the consensus layer and call rejected if the identifier is already present.
   * canton: completely different globally unique identifier is allocated.
   * Behind the scenes calls to an internal protocol are made. As that protocol
   * is richer than the surface protocol, the arguments take implicit values
   * The party identifier suggestion must be a valid party name. Party names are required to be non-empty US-ASCII strings built from letters, digits, space,
   * colon, minus and underscore limited to 255 chars
   */
  AllocateParty(request: AllocatePartyRequest): Promise<AllocatePartyResponse>;
  /**
   * Update selected modifiable participant-local attributes of a party details resource.
   * Can update the participant's local information for local parties.
   */
  UpdatePartyDetails(request: UpdatePartyDetailsRequest): Promise<UpdatePartyDetailsResponse>;
  /** Update the assignment of a party from one IDP to another. */
  UpdatePartyIdentityProviderId(
    request: UpdatePartyIdentityProviderIdRequest,
  ): Promise<UpdatePartyIdentityProviderIdResponse>;
}

export const PartyManagementServiceServiceName = "com.daml.ledger.api.v2.admin.PartyManagementService";
export class PartyManagementServiceClientImpl implements PartyManagementService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PartyManagementServiceServiceName;
    this.rpc = rpc;
    this.GetParticipantId = this.GetParticipantId.bind(this);
    this.GetParties = this.GetParties.bind(this);
    this.ListKnownParties = this.ListKnownParties.bind(this);
    this.AllocateParty = this.AllocateParty.bind(this);
    this.UpdatePartyDetails = this.UpdatePartyDetails.bind(this);
    this.UpdatePartyIdentityProviderId = this.UpdatePartyIdentityProviderId.bind(this);
  }
  GetParticipantId(request: GetParticipantIdRequest): Promise<GetParticipantIdResponse> {
    const data = GetParticipantIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetParticipantId", data);
    return promise.then((data) => GetParticipantIdResponse.decode(new BinaryReader(data)));
  }

  GetParties(request: GetPartiesRequest): Promise<GetPartiesResponse> {
    const data = GetPartiesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetParties", data);
    return promise.then((data) => GetPartiesResponse.decode(new BinaryReader(data)));
  }

  ListKnownParties(request: ListKnownPartiesRequest): Promise<ListKnownPartiesResponse> {
    const data = ListKnownPartiesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListKnownParties", data);
    return promise.then((data) => ListKnownPartiesResponse.decode(new BinaryReader(data)));
  }

  AllocateParty(request: AllocatePartyRequest): Promise<AllocatePartyResponse> {
    const data = AllocatePartyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllocateParty", data);
    return promise.then((data) => AllocatePartyResponse.decode(new BinaryReader(data)));
  }

  UpdatePartyDetails(request: UpdatePartyDetailsRequest): Promise<UpdatePartyDetailsResponse> {
    const data = UpdatePartyDetailsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdatePartyDetails", data);
    return promise.then((data) => UpdatePartyDetailsResponse.decode(new BinaryReader(data)));
  }

  UpdatePartyIdentityProviderId(
    request: UpdatePartyIdentityProviderIdRequest,
  ): Promise<UpdatePartyIdentityProviderIdResponse> {
    const data = UpdatePartyIdentityProviderIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdatePartyIdentityProviderId", data);
    return promise.then((data) => UpdatePartyIdentityProviderIdResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
