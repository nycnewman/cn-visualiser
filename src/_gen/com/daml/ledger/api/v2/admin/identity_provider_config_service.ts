// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/admin/identity_provider_config_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FieldMask } from "../../../../../../google/protobuf/field_mask";

export const protobufPackage = "com.daml.ledger.api.v2.admin";

export interface IdentityProviderConfig {
  /**
   * The identity provider identifier
   * Must be a valid LedgerString (as describe in ``value.proto``).
   * Required
   */
  identityProviderId: string;
  /**
   * When set, the callers using JWT tokens issued by this identity provider are denied all access
   * to the Ledger API.
   * Optional,
   * Modifiable
   */
  isDeactivated: boolean;
  /**
   * Specifies the issuer of the JWT token.
   * The issuer value is a case sensitive URL using the https scheme that contains scheme, host,
   * and optionally, port number and path components and no query or fragment components.
   * Required
   * Modifiable
   */
  issuer: string;
  /**
   * The JWKS (JSON Web Key Set) URL.
   * The Ledger API uses JWKs (JSON Web Keys) from the provided URL to verify that the JWT has been
   * signed with the loaded JWK. Only RS256 (RSA Signature with SHA-256) signing algorithm is supported.
   * Required
   * Modifiable
   */
  jwksUrl: string;
  /**
   * Specifies the audience of the JWT token.
   * When set, the callers using JWT tokens issued by this identity provider are allowed to get an access
   * only if the "aud" claim includes the string specified here
   * Optional,
   * Modifiable
   */
  audience: string;
}

export interface CreateIdentityProviderConfigRequest {
  /** Required */
  identityProviderConfig: IdentityProviderConfig | undefined;
}

export interface CreateIdentityProviderConfigResponse {
  identityProviderConfig: IdentityProviderConfig | undefined;
}

export interface GetIdentityProviderConfigRequest {
  /** Required */
  identityProviderId: string;
}

export interface GetIdentityProviderConfigResponse {
  identityProviderConfig: IdentityProviderConfig | undefined;
}

/** Pagination is not required as the resulting data set is small enough to be returned in a single call */
export interface ListIdentityProviderConfigsRequest {
}

export interface ListIdentityProviderConfigsResponse {
  identityProviderConfigs: IdentityProviderConfig[];
}

export interface UpdateIdentityProviderConfigRequest {
  /**
   * The identity provider config to update.
   * Required,
   * Modifiable
   */
  identityProviderConfig:
    | IdentityProviderConfig
    | undefined;
  /**
   * An update mask specifies how and which properties of the ``IdentityProviderConfig`` message are to be updated.
   * An update mask consists of a set of update paths.
   * A valid update path points to a field or a subfield relative to the ``IdentityProviderConfig`` message.
   * A valid update mask must:
   *
   * 1. contain at least one update path,
   * 2. contain only valid update paths.
   *
   * Fields that can be updated are marked as ``Modifiable``.
   * For additional information see the documentation for standard protobuf3's ``google.protobuf.FieldMask``.
   * Required
   */
  updateMask: string[] | undefined;
}

export interface UpdateIdentityProviderConfigResponse {
  /** Updated identity provider config */
  identityProviderConfig: IdentityProviderConfig | undefined;
}

export interface DeleteIdentityProviderConfigRequest {
  /**
   * The identity provider config to delete.
   * Required
   */
  identityProviderId: string;
}

/** Does not (yet) contain any data. */
export interface DeleteIdentityProviderConfigResponse {
}

function createBaseIdentityProviderConfig(): IdentityProviderConfig {
  return { identityProviderId: "", isDeactivated: false, issuer: "", jwksUrl: "", audience: "" };
}

export const IdentityProviderConfig: MessageFns<IdentityProviderConfig> = {
  encode(message: IdentityProviderConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityProviderId !== "") {
      writer.uint32(10).string(message.identityProviderId);
    }
    if (message.isDeactivated !== false) {
      writer.uint32(16).bool(message.isDeactivated);
    }
    if (message.issuer !== "") {
      writer.uint32(26).string(message.issuer);
    }
    if (message.jwksUrl !== "") {
      writer.uint32(34).string(message.jwksUrl);
    }
    if (message.audience !== "") {
      writer.uint32(42).string(message.audience);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityProviderConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityProviderConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isDeactivated = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.issuer = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.jwksUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.audience = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityProviderConfig {
    return {
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
      isDeactivated: isSet(object.isDeactivated) ? gt.Boolean(object.isDeactivated) : false,
      issuer: isSet(object.issuer) ? gt.String(object.issuer) : "",
      jwksUrl: isSet(object.jwksUrl) ? gt.String(object.jwksUrl) : "",
      audience: isSet(object.audience) ? gt.String(object.audience) : "",
    };
  },

  toJSON(message: IdentityProviderConfig): unknown {
    const obj: any = {};
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    if (message.isDeactivated !== false) {
      obj.isDeactivated = message.isDeactivated;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.jwksUrl !== "") {
      obj.jwksUrl = message.jwksUrl;
    }
    if (message.audience !== "") {
      obj.audience = message.audience;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityProviderConfig>, I>>(base?: I): IdentityProviderConfig {
    return IdentityProviderConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdentityProviderConfig>, I>>(object: I): IdentityProviderConfig {
    const message = createBaseIdentityProviderConfig();
    message.identityProviderId = object.identityProviderId ?? "";
    message.isDeactivated = object.isDeactivated ?? false;
    message.issuer = object.issuer ?? "";
    message.jwksUrl = object.jwksUrl ?? "";
    message.audience = object.audience ?? "";
    return message;
  },
};

function createBaseCreateIdentityProviderConfigRequest(): CreateIdentityProviderConfigRequest {
  return { identityProviderConfig: undefined };
}

export const CreateIdentityProviderConfigRequest: MessageFns<CreateIdentityProviderConfigRequest> = {
  encode(message: CreateIdentityProviderConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityProviderConfig !== undefined) {
      IdentityProviderConfig.encode(message.identityProviderConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateIdentityProviderConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateIdentityProviderConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviderConfig = IdentityProviderConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateIdentityProviderConfigRequest {
    return {
      identityProviderConfig: isSet(object.identityProviderConfig)
        ? IdentityProviderConfig.fromJSON(object.identityProviderConfig)
        : undefined,
    };
  },

  toJSON(message: CreateIdentityProviderConfigRequest): unknown {
    const obj: any = {};
    if (message.identityProviderConfig !== undefined) {
      obj.identityProviderConfig = IdentityProviderConfig.toJSON(message.identityProviderConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateIdentityProviderConfigRequest>, I>>(
    base?: I,
  ): CreateIdentityProviderConfigRequest {
    return CreateIdentityProviderConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateIdentityProviderConfigRequest>, I>>(
    object: I,
  ): CreateIdentityProviderConfigRequest {
    const message = createBaseCreateIdentityProviderConfigRequest();
    message.identityProviderConfig =
      (object.identityProviderConfig !== undefined && object.identityProviderConfig !== null)
        ? IdentityProviderConfig.fromPartial(object.identityProviderConfig)
        : undefined;
    return message;
  },
};

function createBaseCreateIdentityProviderConfigResponse(): CreateIdentityProviderConfigResponse {
  return { identityProviderConfig: undefined };
}

export const CreateIdentityProviderConfigResponse: MessageFns<CreateIdentityProviderConfigResponse> = {
  encode(message: CreateIdentityProviderConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityProviderConfig !== undefined) {
      IdentityProviderConfig.encode(message.identityProviderConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateIdentityProviderConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateIdentityProviderConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviderConfig = IdentityProviderConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateIdentityProviderConfigResponse {
    return {
      identityProviderConfig: isSet(object.identityProviderConfig)
        ? IdentityProviderConfig.fromJSON(object.identityProviderConfig)
        : undefined,
    };
  },

  toJSON(message: CreateIdentityProviderConfigResponse): unknown {
    const obj: any = {};
    if (message.identityProviderConfig !== undefined) {
      obj.identityProviderConfig = IdentityProviderConfig.toJSON(message.identityProviderConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateIdentityProviderConfigResponse>, I>>(
    base?: I,
  ): CreateIdentityProviderConfigResponse {
    return CreateIdentityProviderConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateIdentityProviderConfigResponse>, I>>(
    object: I,
  ): CreateIdentityProviderConfigResponse {
    const message = createBaseCreateIdentityProviderConfigResponse();
    message.identityProviderConfig =
      (object.identityProviderConfig !== undefined && object.identityProviderConfig !== null)
        ? IdentityProviderConfig.fromPartial(object.identityProviderConfig)
        : undefined;
    return message;
  },
};

function createBaseGetIdentityProviderConfigRequest(): GetIdentityProviderConfigRequest {
  return { identityProviderId: "" };
}

export const GetIdentityProviderConfigRequest: MessageFns<GetIdentityProviderConfigRequest> = {
  encode(message: GetIdentityProviderConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityProviderId !== "") {
      writer.uint32(10).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIdentityProviderConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIdentityProviderConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIdentityProviderConfigRequest {
    return { identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "" };
  },

  toJSON(message: GetIdentityProviderConfigRequest): unknown {
    const obj: any = {};
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIdentityProviderConfigRequest>, I>>(
    base?: I,
  ): GetIdentityProviderConfigRequest {
    return GetIdentityProviderConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetIdentityProviderConfigRequest>, I>>(
    object: I,
  ): GetIdentityProviderConfigRequest {
    const message = createBaseGetIdentityProviderConfigRequest();
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseGetIdentityProviderConfigResponse(): GetIdentityProviderConfigResponse {
  return { identityProviderConfig: undefined };
}

export const GetIdentityProviderConfigResponse: MessageFns<GetIdentityProviderConfigResponse> = {
  encode(message: GetIdentityProviderConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityProviderConfig !== undefined) {
      IdentityProviderConfig.encode(message.identityProviderConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetIdentityProviderConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIdentityProviderConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviderConfig = IdentityProviderConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetIdentityProviderConfigResponse {
    return {
      identityProviderConfig: isSet(object.identityProviderConfig)
        ? IdentityProviderConfig.fromJSON(object.identityProviderConfig)
        : undefined,
    };
  },

  toJSON(message: GetIdentityProviderConfigResponse): unknown {
    const obj: any = {};
    if (message.identityProviderConfig !== undefined) {
      obj.identityProviderConfig = IdentityProviderConfig.toJSON(message.identityProviderConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIdentityProviderConfigResponse>, I>>(
    base?: I,
  ): GetIdentityProviderConfigResponse {
    return GetIdentityProviderConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetIdentityProviderConfigResponse>, I>>(
    object: I,
  ): GetIdentityProviderConfigResponse {
    const message = createBaseGetIdentityProviderConfigResponse();
    message.identityProviderConfig =
      (object.identityProviderConfig !== undefined && object.identityProviderConfig !== null)
        ? IdentityProviderConfig.fromPartial(object.identityProviderConfig)
        : undefined;
    return message;
  },
};

function createBaseListIdentityProviderConfigsRequest(): ListIdentityProviderConfigsRequest {
  return {};
}

export const ListIdentityProviderConfigsRequest: MessageFns<ListIdentityProviderConfigsRequest> = {
  encode(_: ListIdentityProviderConfigsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIdentityProviderConfigsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIdentityProviderConfigsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListIdentityProviderConfigsRequest {
    return {};
  },

  toJSON(_: ListIdentityProviderConfigsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIdentityProviderConfigsRequest>, I>>(
    base?: I,
  ): ListIdentityProviderConfigsRequest {
    return ListIdentityProviderConfigsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListIdentityProviderConfigsRequest>, I>>(
    _: I,
  ): ListIdentityProviderConfigsRequest {
    const message = createBaseListIdentityProviderConfigsRequest();
    return message;
  },
};

function createBaseListIdentityProviderConfigsResponse(): ListIdentityProviderConfigsResponse {
  return { identityProviderConfigs: [] };
}

export const ListIdentityProviderConfigsResponse: MessageFns<ListIdentityProviderConfigsResponse> = {
  encode(message: ListIdentityProviderConfigsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.identityProviderConfigs) {
      IdentityProviderConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListIdentityProviderConfigsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIdentityProviderConfigsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviderConfigs.push(IdentityProviderConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListIdentityProviderConfigsResponse {
    return {
      identityProviderConfigs: gt.Array.isArray(object?.identityProviderConfigs)
        ? object.identityProviderConfigs.map((e: any) => IdentityProviderConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListIdentityProviderConfigsResponse): unknown {
    const obj: any = {};
    if (message.identityProviderConfigs?.length) {
      obj.identityProviderConfigs = message.identityProviderConfigs.map((e) => IdentityProviderConfig.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIdentityProviderConfigsResponse>, I>>(
    base?: I,
  ): ListIdentityProviderConfigsResponse {
    return ListIdentityProviderConfigsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListIdentityProviderConfigsResponse>, I>>(
    object: I,
  ): ListIdentityProviderConfigsResponse {
    const message = createBaseListIdentityProviderConfigsResponse();
    message.identityProviderConfigs =
      object.identityProviderConfigs?.map((e) => IdentityProviderConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateIdentityProviderConfigRequest(): UpdateIdentityProviderConfigRequest {
  return { identityProviderConfig: undefined, updateMask: undefined };
}

export const UpdateIdentityProviderConfigRequest: MessageFns<UpdateIdentityProviderConfigRequest> = {
  encode(message: UpdateIdentityProviderConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityProviderConfig !== undefined) {
      IdentityProviderConfig.encode(message.identityProviderConfig, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIdentityProviderConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIdentityProviderConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviderConfig = IdentityProviderConfig.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIdentityProviderConfigRequest {
    return {
      identityProviderConfig: isSet(object.identityProviderConfig)
        ? IdentityProviderConfig.fromJSON(object.identityProviderConfig)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateIdentityProviderConfigRequest): unknown {
    const obj: any = {};
    if (message.identityProviderConfig !== undefined) {
      obj.identityProviderConfig = IdentityProviderConfig.toJSON(message.identityProviderConfig);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIdentityProviderConfigRequest>, I>>(
    base?: I,
  ): UpdateIdentityProviderConfigRequest {
    return UpdateIdentityProviderConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIdentityProviderConfigRequest>, I>>(
    object: I,
  ): UpdateIdentityProviderConfigRequest {
    const message = createBaseUpdateIdentityProviderConfigRequest();
    message.identityProviderConfig =
      (object.identityProviderConfig !== undefined && object.identityProviderConfig !== null)
        ? IdentityProviderConfig.fromPartial(object.identityProviderConfig)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateIdentityProviderConfigResponse(): UpdateIdentityProviderConfigResponse {
  return { identityProviderConfig: undefined };
}

export const UpdateIdentityProviderConfigResponse: MessageFns<UpdateIdentityProviderConfigResponse> = {
  encode(message: UpdateIdentityProviderConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityProviderConfig !== undefined) {
      IdentityProviderConfig.encode(message.identityProviderConfig, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateIdentityProviderConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateIdentityProviderConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviderConfig = IdentityProviderConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateIdentityProviderConfigResponse {
    return {
      identityProviderConfig: isSet(object.identityProviderConfig)
        ? IdentityProviderConfig.fromJSON(object.identityProviderConfig)
        : undefined,
    };
  },

  toJSON(message: UpdateIdentityProviderConfigResponse): unknown {
    const obj: any = {};
    if (message.identityProviderConfig !== undefined) {
      obj.identityProviderConfig = IdentityProviderConfig.toJSON(message.identityProviderConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateIdentityProviderConfigResponse>, I>>(
    base?: I,
  ): UpdateIdentityProviderConfigResponse {
    return UpdateIdentityProviderConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateIdentityProviderConfigResponse>, I>>(
    object: I,
  ): UpdateIdentityProviderConfigResponse {
    const message = createBaseUpdateIdentityProviderConfigResponse();
    message.identityProviderConfig =
      (object.identityProviderConfig !== undefined && object.identityProviderConfig !== null)
        ? IdentityProviderConfig.fromPartial(object.identityProviderConfig)
        : undefined;
    return message;
  },
};

function createBaseDeleteIdentityProviderConfigRequest(): DeleteIdentityProviderConfigRequest {
  return { identityProviderId: "" };
}

export const DeleteIdentityProviderConfigRequest: MessageFns<DeleteIdentityProviderConfigRequest> = {
  encode(message: DeleteIdentityProviderConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identityProviderId !== "") {
      writer.uint32(10).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteIdentityProviderConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteIdentityProviderConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteIdentityProviderConfigRequest {
    return { identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "" };
  },

  toJSON(message: DeleteIdentityProviderConfigRequest): unknown {
    const obj: any = {};
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteIdentityProviderConfigRequest>, I>>(
    base?: I,
  ): DeleteIdentityProviderConfigRequest {
    return DeleteIdentityProviderConfigRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteIdentityProviderConfigRequest>, I>>(
    object: I,
  ): DeleteIdentityProviderConfigRequest {
    const message = createBaseDeleteIdentityProviderConfigRequest();
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseDeleteIdentityProviderConfigResponse(): DeleteIdentityProviderConfigResponse {
  return {};
}

export const DeleteIdentityProviderConfigResponse: MessageFns<DeleteIdentityProviderConfigResponse> = {
  encode(_: DeleteIdentityProviderConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteIdentityProviderConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteIdentityProviderConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteIdentityProviderConfigResponse {
    return {};
  },

  toJSON(_: DeleteIdentityProviderConfigResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteIdentityProviderConfigResponse>, I>>(
    base?: I,
  ): DeleteIdentityProviderConfigResponse {
    return DeleteIdentityProviderConfigResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteIdentityProviderConfigResponse>, I>>(
    _: I,
  ): DeleteIdentityProviderConfigResponse {
    const message = createBaseDeleteIdentityProviderConfigResponse();
    return message;
  },
};

/**
 * Identity Provider Config Service makes it possible for participant node administrators
 * to setup and manage additional identity providers at runtime.
 *
 * This allows using access tokens from identity providers unknown at deployment time. When an identity
 * provider is configured, independent IDP administrators can manage their own set of parties and users.
 * Such parties and users have a matching `identity_provider_id` defined and are inaccessible to
 * administrators from other identity providers. A user will only be authenticated if the corresponding JWT
 * token is issued by the appropriate identity provider.
 * Users and parties without `identity_provider_id` defined are assumed to be using the default identity provider,
 * which is configured statically at the participant node's deployment time.
 *
 * The Ledger API uses the "iss" claim of a JWT token to match the token to a specific IDP. If there is no match,
 * the default IDP is assumed.
 *
 * The fields of request messages (and sub-messages) are marked either as ``Optional`` or ``Required``:
 *
 * 1. ``Optional`` denoting the client may leave the field unset when sending a request.
 * 2. ``Required`` denoting the client must set the field to a non-default value when sending a request.
 *
 * An identity provider config resource is described by the ``IdentityProviderConfig`` message,
 * An identity provider config resource, once it has been created, can be modified.
 * In order to update the properties represented by the ``IdentityProviderConfig`` message use the ``UpdateIdentityProviderConfig`` RPC.
 * The only fields that can be modified are those marked as ``Modifiable``.
 */
export interface IdentityProviderConfigService {
  /**
   * Create a new identity provider configuration.
   * The request will fail if the maximum allowed number of separate configurations is reached.
   */
  CreateIdentityProviderConfig(
    request: CreateIdentityProviderConfigRequest,
  ): Promise<CreateIdentityProviderConfigResponse>;
  /** Get the identity provider configuration data by id. */
  GetIdentityProviderConfig(request: GetIdentityProviderConfigRequest): Promise<GetIdentityProviderConfigResponse>;
  /**
   * Update selected modifiable attribute of an identity provider config resource described
   * by the ``IdentityProviderConfig`` message.
   */
  UpdateIdentityProviderConfig(
    request: UpdateIdentityProviderConfigRequest,
  ): Promise<UpdateIdentityProviderConfigResponse>;
  /** List all existing identity provider configurations. */
  ListIdentityProviderConfigs(
    request: ListIdentityProviderConfigsRequest,
  ): Promise<ListIdentityProviderConfigsResponse>;
  /** Delete an existing identity provider configuration. */
  DeleteIdentityProviderConfig(
    request: DeleteIdentityProviderConfigRequest,
  ): Promise<DeleteIdentityProviderConfigResponse>;
}

export const IdentityProviderConfigServiceServiceName = "com.daml.ledger.api.v2.admin.IdentityProviderConfigService";
export class IdentityProviderConfigServiceClientImpl implements IdentityProviderConfigService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || IdentityProviderConfigServiceServiceName;
    this.rpc = rpc;
    this.CreateIdentityProviderConfig = this.CreateIdentityProviderConfig.bind(this);
    this.GetIdentityProviderConfig = this.GetIdentityProviderConfig.bind(this);
    this.UpdateIdentityProviderConfig = this.UpdateIdentityProviderConfig.bind(this);
    this.ListIdentityProviderConfigs = this.ListIdentityProviderConfigs.bind(this);
    this.DeleteIdentityProviderConfig = this.DeleteIdentityProviderConfig.bind(this);
  }
  CreateIdentityProviderConfig(
    request: CreateIdentityProviderConfigRequest,
  ): Promise<CreateIdentityProviderConfigResponse> {
    const data = CreateIdentityProviderConfigRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateIdentityProviderConfig", data);
    return promise.then((data) => CreateIdentityProviderConfigResponse.decode(new BinaryReader(data)));
  }

  GetIdentityProviderConfig(request: GetIdentityProviderConfigRequest): Promise<GetIdentityProviderConfigResponse> {
    const data = GetIdentityProviderConfigRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetIdentityProviderConfig", data);
    return promise.then((data) => GetIdentityProviderConfigResponse.decode(new BinaryReader(data)));
  }

  UpdateIdentityProviderConfig(
    request: UpdateIdentityProviderConfigRequest,
  ): Promise<UpdateIdentityProviderConfigResponse> {
    const data = UpdateIdentityProviderConfigRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateIdentityProviderConfig", data);
    return promise.then((data) => UpdateIdentityProviderConfigResponse.decode(new BinaryReader(data)));
  }

  ListIdentityProviderConfigs(
    request: ListIdentityProviderConfigsRequest,
  ): Promise<ListIdentityProviderConfigsResponse> {
    const data = ListIdentityProviderConfigsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListIdentityProviderConfigs", data);
    return promise.then((data) => ListIdentityProviderConfigsResponse.decode(new BinaryReader(data)));
  }

  DeleteIdentityProviderConfig(
    request: DeleteIdentityProviderConfigRequest,
  ): Promise<DeleteIdentityProviderConfigResponse> {
    const data = DeleteIdentityProviderConfigRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteIdentityProviderConfig", data);
    return promise.then((data) => DeleteIdentityProviderConfigResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
