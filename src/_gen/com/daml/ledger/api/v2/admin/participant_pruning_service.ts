// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/admin/participant_pruning_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.daml.ledger.api.v2.admin";

export interface PruneRequest {
  /**
   * Inclusive valid absolute offset (positive integer) up to which the ledger is to be pruned.
   * By default the following data is pruned:
   *
   * 1. All normal and divulged contracts that have been archived before
   *    `prune_up_to`.
   * 2. All transaction events and completions before `prune_up_to`
   */
  pruneUpTo: number;
  /**
   * Unique submission identifier.
   * Optional, defaults to a random identifier, used for logging.
   */
  submissionId: string;
  /**
   * Prune all immediately and retroactively divulged contracts created before `prune_up_to`
   * independent of whether they were archived before `prune_up_to`. Useful to avoid leaking
   * storage on participant nodes that can see a divulged contract but not its archival.
   *
   * Application developers SHOULD write their Daml applications
   * such that they do not rely on divulged contracts; i.e., no warnings from
   * using divulged contracts as inputs to transactions are emitted.
   *
   * Participant node operators SHOULD set the `prune_all_divulged_contracts` flag to avoid leaking
   * storage due to accumulating unarchived divulged contracts PROVIDED that:
   *
   * 1. no application using this participant node relies on divulgence OR
   * 2. divulged contracts on which applications rely have been re-divulged after the `prune_up_to` offset.
   */
  pruneAllDivulgedContracts: boolean;
}

/** Empty for now, but may contain fields in the future */
export interface PruneResponse {
}

function createBasePruneRequest(): PruneRequest {
  return { pruneUpTo: 0, submissionId: "", pruneAllDivulgedContracts: false };
}

export const PruneRequest: MessageFns<PruneRequest> = {
  encode(message: PruneRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pruneUpTo !== 0) {
      writer.uint32(8).int64(message.pruneUpTo);
    }
    if (message.submissionId !== "") {
      writer.uint32(18).string(message.submissionId);
    }
    if (message.pruneAllDivulgedContracts !== false) {
      writer.uint32(24).bool(message.pruneAllDivulgedContracts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PruneRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePruneRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pruneUpTo = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.submissionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pruneAllDivulgedContracts = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PruneRequest {
    return {
      pruneUpTo: isSet(object.pruneUpTo) ? gt.Number(object.pruneUpTo) : 0,
      submissionId: isSet(object.submissionId) ? gt.String(object.submissionId) : "",
      pruneAllDivulgedContracts: isSet(object.pruneAllDivulgedContracts)
        ? gt.Boolean(object.pruneAllDivulgedContracts)
        : false,
    };
  },

  toJSON(message: PruneRequest): unknown {
    const obj: any = {};
    if (message.pruneUpTo !== 0) {
      obj.pruneUpTo = Math.round(message.pruneUpTo);
    }
    if (message.submissionId !== "") {
      obj.submissionId = message.submissionId;
    }
    if (message.pruneAllDivulgedContracts !== false) {
      obj.pruneAllDivulgedContracts = message.pruneAllDivulgedContracts;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PruneRequest>, I>>(base?: I): PruneRequest {
    return PruneRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PruneRequest>, I>>(object: I): PruneRequest {
    const message = createBasePruneRequest();
    message.pruneUpTo = object.pruneUpTo ?? 0;
    message.submissionId = object.submissionId ?? "";
    message.pruneAllDivulgedContracts = object.pruneAllDivulgedContracts ?? false;
    return message;
  },
};

function createBasePruneResponse(): PruneResponse {
  return {};
}

export const PruneResponse: MessageFns<PruneResponse> = {
  encode(_: PruneResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PruneResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePruneResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PruneResponse {
    return {};
  },

  toJSON(_: PruneResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PruneResponse>, I>>(base?: I): PruneResponse {
    return PruneResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PruneResponse>, I>>(_: I): PruneResponse {
    const message = createBasePruneResponse();
    return message;
  },
};

/**
 * Prunes/truncates the "oldest" transactions from the participant (the participant Ledger Api Server plus any other
 * participant-local state) by removing a portion of the ledger in such a way that the set of future, allowed
 * commands are not affected.
 *
 * This enables:
 *
 * 1. keeping the "inactive" portion of the ledger to a manageable size and
 * 2. removing inactive state to honor the right to be forgotten.
 */
export interface ParticipantPruningService {
  /**
   * Prune the ledger specifying the offset before and at which ledger transactions should be removed. Only returns when
   * the potentially long-running prune request ends successfully or with an error.
   */
  Prune(request: PruneRequest): Promise<PruneResponse>;
}

export const ParticipantPruningServiceServiceName = "com.daml.ledger.api.v2.admin.ParticipantPruningService";
export class ParticipantPruningServiceClientImpl implements ParticipantPruningService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ParticipantPruningServiceServiceName;
    this.rpc = rpc;
    this.Prune = this.Prune.bind(this);
  }
  Prune(request: PruneRequest): Promise<PruneResponse> {
    const data = PruneRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Prune", data);
    return promise.then((data) => PruneResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
