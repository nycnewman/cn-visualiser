// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/admin/user_management_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FieldMask } from "../../../../../../google/protobuf/field_mask";
import { ObjectMeta } from "./object_meta";

export const protobufPackage = "com.daml.ledger.api.v2.admin";

/**
 * Users are used to dynamically manage the rights given to Daml applications.
 * They are stored and managed per participant node.
 */
export interface User {
  /**
   * The user identifier, which must be a non-empty string of at most 128
   * characters that are either alphanumeric ASCII characters or one of the symbols "@^$.!`-#+'~_|:".
   * Required
   */
  id: string;
  /**
   * The primary party as which this user reads and acts by default on the ledger
   * *provided* it has the corresponding ``CanReadAs(primary_party)`` or
   * ``CanActAs(primary_party)`` rights.
   * Ledger API clients SHOULD set this field to a non-empty value for all users to
   * enable the users to act on the ledger using their own Daml party.
   * Users for participant administrators MAY have an associated primary party.
   * Optional,
   * Modifiable
   */
  primaryParty: string;
  /**
   * When set, then the user is denied all access to the Ledger API.
   * Otherwise, the user has access to the Ledger API as per the user's rights.
   * Optional,
   * Modifiable
   */
  isDeactivated: boolean;
  /**
   * The metadata of this user.
   * Note that the ``metadata.resource_version`` tracks changes to the properties described by the ``User`` message and not the user's rights.
   * Optional,
   * Modifiable
   */
  metadata:
    | ObjectMeta
    | undefined;
  /**
   * The ID of the identity provider configured by ``Identity Provider Config``
   * Optional, if not set, assume the user is managed by the default identity provider.
   */
  identityProviderId: string;
}

/** A right granted to a user. */
export interface Right {
  /** The user can administer the participant node. */
  participantAdmin?:
    | Right_ParticipantAdmin
    | undefined;
  /** The user can act as a specific party. */
  canActAs?:
    | Right_CanActAs
    | undefined;
  /** The user can read ledger data visible to a specific party. */
  canReadAs?:
    | Right_CanReadAs
    | undefined;
  /** The user can administer users and parties assigned to the same identity provider as the one of the user. */
  identityProviderAdmin?:
    | Right_IdentityProviderAdmin
    | undefined;
  /** The user can read as any party on a participant */
  canReadAsAnyParty?: Right_CanReadAsAnyParty | undefined;
}

/** The right to administer the participant node. */
export interface Right_ParticipantAdmin {
}

export interface Right_CanActAs {
  /** The right to authorize commands for this party. */
  party: string;
}

export interface Right_CanReadAs {
  /** The right to read ledger data visible to this party. */
  party: string;
}

/**
 * The right to administer the identity provider that the user is assigned to.
 * It means, being able to manage users and parties that are also assigned
 * to the same identity provider.
 */
export interface Right_IdentityProviderAdmin {
}

/**
 * The rights of a participant's super reader. Its utility is predominantly for
 * feeding external tools, such as PQS, continually without the need to change subscriptions
 * as new parties pop in and out of existence.
 */
export interface Right_CanReadAsAnyParty {
}

/** Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(user.identity_provider_id)`` */
export interface CreateUserRequest {
  /**
   * The user to create.
   * Required
   */
  user:
    | User
    | undefined;
  /**
   * The rights to be assigned to the user upon creation,
   * which SHOULD include appropriate rights for the ``user.primary_party``.
   * Optional
   */
  rights: Right[];
}

export interface CreateUserResponse {
  /** Created user. */
  user: User | undefined;
}

/** Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id) OR IsAuthenticatedUser(user_id)`` */
export interface GetUserRequest {
  /**
   * The user whose data to retrieve.
   * If set to empty string (the default), then the data for the authenticated user will be retrieved.
   * Optional
   */
  userId: string;
  /**
   * The id of the ``Identity Provider``
   * Optional, if not set, assume the user is managed by the default identity provider.
   */
  identityProviderId: string;
}

export interface GetUserResponse {
  /** Retrieved user. */
  user: User | undefined;
}

/** Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(user.identity_provider_id)`` */
export interface UpdateUserRequest {
  /**
   * The user to update.
   * Required,
   * Modifiable
   */
  user:
    | User
    | undefined;
  /**
   * An update mask specifies how and which properties of the ``User`` message are to be updated.
   * An update mask consists of a set of update paths.
   * A valid update path points to a field or a subfield relative to the ``User`` message.
   * A valid update mask must:
   *
   * 1. contain at least one update path,
   * 2. contain only valid update paths.
   *
   * Fields that can be updated are marked as ``Modifiable``.
   * An update path can also point to a non-``Modifiable`` fields such as 'id' and 'metadata.resource_version'
   * because they are used:
   *
   * 1. to identify the user resource subject to the update,
   * 2. for concurrent change control.
   *
   * Examples of valid update paths: 'primary_party', 'metadata', 'metadata.annotations'.
   * For additional information see the documentation for standard protobuf3's ``google.protobuf.FieldMask``.
   * For similar Ledger API see ``com.daml.ledger.api.v2.admin.UpdatePartyDetailsRequest``.
   * Required
   */
  updateMask: string[] | undefined;
}

export interface UpdateUserResponse {
  /** Updated user */
  user: User | undefined;
}

/** Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)`` */
export interface DeleteUserRequest {
  /**
   * The user to delete.
   * Required
   */
  userId: string;
  /**
   * The id of the ``Identity Provider``
   * Optional, if not set, assume the user is managed by the default identity provider.
   */
  identityProviderId: string;
}

/** Does not (yet) contain any data. */
export interface DeleteUserResponse {
}

/** Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)`` */
export interface ListUsersRequest {
  /**
   * Pagination token to determine the specific page to fetch.
   * Leave empty to fetch the first page.
   * Optional
   */
  pageToken: string;
  /**
   * Maximum number of results to be returned by the server. The server will return no more than that many results, but it might return fewer.
   * If 0, the server will decide the number of results to be returned.
   * Optional
   */
  pageSize: number;
  /**
   * The id of the ``Identity Provider``
   * Optional, if not set, assume the user is managed by the default identity provider.
   */
  identityProviderId: string;
}

export interface ListUsersResponse {
  /** A subset of users of the participant node that fit into this page. */
  users: User[];
  /**
   * Pagination token to retrieve the next page.
   * Empty, if there are no further results.
   */
  nextPageToken: string;
}

/**
 * Add the rights to the set of rights granted to the user.
 *
 * Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)``
 */
export interface GrantUserRightsRequest {
  /**
   * The user to whom to grant rights.
   * Required
   */
  userId: string;
  /**
   * The rights to grant.
   * Optional
   */
  rights: Right[];
  /**
   * The id of the ``Identity Provider``
   * Optional, if not set, assume the user is managed by the default identity provider.
   */
  identityProviderId: string;
}

export interface GrantUserRightsResponse {
  /** The rights that were newly granted by the request. */
  newlyGrantedRights: Right[];
}

/**
 * Remove the rights from the set of rights granted to the user.
 *
 * Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id)``
 */
export interface RevokeUserRightsRequest {
  /**
   * The user from whom to revoke rights.
   * Required
   */
  userId: string;
  /**
   * The rights to revoke.
   * Optional
   */
  rights: Right[];
  /**
   * The id of the ``Identity Provider``
   * Optional, if not set, assume the user is managed by the default identity provider.
   */
  identityProviderId: string;
}

export interface RevokeUserRightsResponse {
  /** The rights that were actually revoked by the request. */
  newlyRevokedRights: Right[];
}

/** Required authorization: ``HasRight(ParticipantAdmin) OR IsAuthenticatedIdentityProviderAdmin(identity_provider_id) OR IsAuthenticatedUser(user_id)`` */
export interface ListUserRightsRequest {
  /**
   * The user for which to list the rights.
   * If set to empty string (the default), then the rights for the authenticated user will be listed.
   * Required
   */
  userId: string;
  /**
   * The id of the ``Identity Provider``
   * Optional, if not set, assume the user is managed by the default identity provider.
   */
  identityProviderId: string;
}

export interface ListUserRightsResponse {
  /** All rights of the user. */
  rights: Right[];
}

/** Required authorization: ``HasRight(ParticipantAdmin)`` */
export interface UpdateUserIdentityProviderIdRequest {
  /** User to update */
  userId: string;
  /** Current identity provider ID of the user */
  sourceIdentityProviderId: string;
  /** Target identity provider ID of the user */
  targetIdentityProviderId: string;
}

export interface UpdateUserIdentityProviderIdResponse {
}

function createBaseUser(): User {
  return { id: "", primaryParty: "", isDeactivated: false, metadata: undefined, identityProviderId: "" };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.primaryParty !== "") {
      writer.uint32(18).string(message.primaryParty);
    }
    if (message.isDeactivated !== false) {
      writer.uint32(24).bool(message.isDeactivated);
    }
    if (message.metadata !== undefined) {
      ObjectMeta.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    if (message.identityProviderId !== "") {
      writer.uint32(42).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.primaryParty = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isDeactivated = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = ObjectMeta.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? gt.String(object.id) : "",
      primaryParty: isSet(object.primaryParty) ? gt.String(object.primaryParty) : "",
      isDeactivated: isSet(object.isDeactivated) ? gt.Boolean(object.isDeactivated) : false,
      metadata: isSet(object.metadata) ? ObjectMeta.fromJSON(object.metadata) : undefined,
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.primaryParty !== "") {
      obj.primaryParty = message.primaryParty;
    }
    if (message.isDeactivated !== false) {
      obj.isDeactivated = message.isDeactivated;
    }
    if (message.metadata !== undefined) {
      obj.metadata = ObjectMeta.toJSON(message.metadata);
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? "";
    message.primaryParty = object.primaryParty ?? "";
    message.isDeactivated = object.isDeactivated ?? false;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? ObjectMeta.fromPartial(object.metadata)
      : undefined;
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseRight(): Right {
  return {
    participantAdmin: undefined,
    canActAs: undefined,
    canReadAs: undefined,
    identityProviderAdmin: undefined,
    canReadAsAnyParty: undefined,
  };
}

export const Right: MessageFns<Right> = {
  encode(message: Right, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.participantAdmin !== undefined) {
      Right_ParticipantAdmin.encode(message.participantAdmin, writer.uint32(10).fork()).join();
    }
    if (message.canActAs !== undefined) {
      Right_CanActAs.encode(message.canActAs, writer.uint32(18).fork()).join();
    }
    if (message.canReadAs !== undefined) {
      Right_CanReadAs.encode(message.canReadAs, writer.uint32(26).fork()).join();
    }
    if (message.identityProviderAdmin !== undefined) {
      Right_IdentityProviderAdmin.encode(message.identityProviderAdmin, writer.uint32(34).fork()).join();
    }
    if (message.canReadAsAnyParty !== undefined) {
      Right_CanReadAsAnyParty.encode(message.canReadAsAnyParty, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Right {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRight();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.participantAdmin = Right_ParticipantAdmin.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.canActAs = Right_CanActAs.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.canReadAs = Right_CanReadAs.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.identityProviderAdmin = Right_IdentityProviderAdmin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.canReadAsAnyParty = Right_CanReadAsAnyParty.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Right {
    return {
      participantAdmin: isSet(object.participantAdmin)
        ? Right_ParticipantAdmin.fromJSON(object.participantAdmin)
        : undefined,
      canActAs: isSet(object.canActAs) ? Right_CanActAs.fromJSON(object.canActAs) : undefined,
      canReadAs: isSet(object.canReadAs) ? Right_CanReadAs.fromJSON(object.canReadAs) : undefined,
      identityProviderAdmin: isSet(object.identityProviderAdmin)
        ? Right_IdentityProviderAdmin.fromJSON(object.identityProviderAdmin)
        : undefined,
      canReadAsAnyParty: isSet(object.canReadAsAnyParty)
        ? Right_CanReadAsAnyParty.fromJSON(object.canReadAsAnyParty)
        : undefined,
    };
  },

  toJSON(message: Right): unknown {
    const obj: any = {};
    if (message.participantAdmin !== undefined) {
      obj.participantAdmin = Right_ParticipantAdmin.toJSON(message.participantAdmin);
    }
    if (message.canActAs !== undefined) {
      obj.canActAs = Right_CanActAs.toJSON(message.canActAs);
    }
    if (message.canReadAs !== undefined) {
      obj.canReadAs = Right_CanReadAs.toJSON(message.canReadAs);
    }
    if (message.identityProviderAdmin !== undefined) {
      obj.identityProviderAdmin = Right_IdentityProviderAdmin.toJSON(message.identityProviderAdmin);
    }
    if (message.canReadAsAnyParty !== undefined) {
      obj.canReadAsAnyParty = Right_CanReadAsAnyParty.toJSON(message.canReadAsAnyParty);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Right>, I>>(base?: I): Right {
    return Right.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Right>, I>>(object: I): Right {
    const message = createBaseRight();
    message.participantAdmin = (object.participantAdmin !== undefined && object.participantAdmin !== null)
      ? Right_ParticipantAdmin.fromPartial(object.participantAdmin)
      : undefined;
    message.canActAs = (object.canActAs !== undefined && object.canActAs !== null)
      ? Right_CanActAs.fromPartial(object.canActAs)
      : undefined;
    message.canReadAs = (object.canReadAs !== undefined && object.canReadAs !== null)
      ? Right_CanReadAs.fromPartial(object.canReadAs)
      : undefined;
    message.identityProviderAdmin =
      (object.identityProviderAdmin !== undefined && object.identityProviderAdmin !== null)
        ? Right_IdentityProviderAdmin.fromPartial(object.identityProviderAdmin)
        : undefined;
    message.canReadAsAnyParty = (object.canReadAsAnyParty !== undefined && object.canReadAsAnyParty !== null)
      ? Right_CanReadAsAnyParty.fromPartial(object.canReadAsAnyParty)
      : undefined;
    return message;
  },
};

function createBaseRight_ParticipantAdmin(): Right_ParticipantAdmin {
  return {};
}

export const Right_ParticipantAdmin: MessageFns<Right_ParticipantAdmin> = {
  encode(_: Right_ParticipantAdmin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Right_ParticipantAdmin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRight_ParticipantAdmin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Right_ParticipantAdmin {
    return {};
  },

  toJSON(_: Right_ParticipantAdmin): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Right_ParticipantAdmin>, I>>(base?: I): Right_ParticipantAdmin {
    return Right_ParticipantAdmin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Right_ParticipantAdmin>, I>>(_: I): Right_ParticipantAdmin {
    const message = createBaseRight_ParticipantAdmin();
    return message;
  },
};

function createBaseRight_CanActAs(): Right_CanActAs {
  return { party: "" };
}

export const Right_CanActAs: MessageFns<Right_CanActAs> = {
  encode(message: Right_CanActAs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.party !== "") {
      writer.uint32(10).string(message.party);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Right_CanActAs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRight_CanActAs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.party = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Right_CanActAs {
    return { party: isSet(object.party) ? gt.String(object.party) : "" };
  },

  toJSON(message: Right_CanActAs): unknown {
    const obj: any = {};
    if (message.party !== "") {
      obj.party = message.party;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Right_CanActAs>, I>>(base?: I): Right_CanActAs {
    return Right_CanActAs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Right_CanActAs>, I>>(object: I): Right_CanActAs {
    const message = createBaseRight_CanActAs();
    message.party = object.party ?? "";
    return message;
  },
};

function createBaseRight_CanReadAs(): Right_CanReadAs {
  return { party: "" };
}

export const Right_CanReadAs: MessageFns<Right_CanReadAs> = {
  encode(message: Right_CanReadAs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.party !== "") {
      writer.uint32(10).string(message.party);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Right_CanReadAs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRight_CanReadAs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.party = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Right_CanReadAs {
    return { party: isSet(object.party) ? gt.String(object.party) : "" };
  },

  toJSON(message: Right_CanReadAs): unknown {
    const obj: any = {};
    if (message.party !== "") {
      obj.party = message.party;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Right_CanReadAs>, I>>(base?: I): Right_CanReadAs {
    return Right_CanReadAs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Right_CanReadAs>, I>>(object: I): Right_CanReadAs {
    const message = createBaseRight_CanReadAs();
    message.party = object.party ?? "";
    return message;
  },
};

function createBaseRight_IdentityProviderAdmin(): Right_IdentityProviderAdmin {
  return {};
}

export const Right_IdentityProviderAdmin: MessageFns<Right_IdentityProviderAdmin> = {
  encode(_: Right_IdentityProviderAdmin, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Right_IdentityProviderAdmin {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRight_IdentityProviderAdmin();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Right_IdentityProviderAdmin {
    return {};
  },

  toJSON(_: Right_IdentityProviderAdmin): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Right_IdentityProviderAdmin>, I>>(base?: I): Right_IdentityProviderAdmin {
    return Right_IdentityProviderAdmin.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Right_IdentityProviderAdmin>, I>>(_: I): Right_IdentityProviderAdmin {
    const message = createBaseRight_IdentityProviderAdmin();
    return message;
  },
};

function createBaseRight_CanReadAsAnyParty(): Right_CanReadAsAnyParty {
  return {};
}

export const Right_CanReadAsAnyParty: MessageFns<Right_CanReadAsAnyParty> = {
  encode(_: Right_CanReadAsAnyParty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Right_CanReadAsAnyParty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRight_CanReadAsAnyParty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Right_CanReadAsAnyParty {
    return {};
  },

  toJSON(_: Right_CanReadAsAnyParty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Right_CanReadAsAnyParty>, I>>(base?: I): Right_CanReadAsAnyParty {
    return Right_CanReadAsAnyParty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Right_CanReadAsAnyParty>, I>>(_: I): Right_CanReadAsAnyParty {
    const message = createBaseRight_CanReadAsAnyParty();
    return message;
  },
};

function createBaseCreateUserRequest(): CreateUserRequest {
  return { user: undefined, rights: [] };
}

export const CreateUserRequest: MessageFns<CreateUserRequest> = {
  encode(message: CreateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    for (const v of message.rights) {
      Right.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rights.push(Right.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserRequest {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      rights: gt.Array.isArray(object?.rights) ? object.rights.map((e: any) => Right.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreateUserRequest): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.rights?.length) {
      obj.rights = message.rights.map((e) => Right.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserRequest>, I>>(base?: I): CreateUserRequest {
    return CreateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserRequest>, I>>(object: I): CreateUserRequest {
    const message = createBaseCreateUserRequest();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.rights = object.rights?.map((e) => Right.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateUserResponse(): CreateUserResponse {
  return { user: undefined };
}

export const CreateUserResponse: MessageFns<CreateUserResponse> = {
  encode(message: CreateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  },

  toJSON(message: CreateUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateUserResponse>, I>>(base?: I): CreateUserResponse {
    return CreateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateUserResponse>, I>>(object: I): CreateUserResponse {
    const message = createBaseCreateUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseGetUserRequest(): GetUserRequest {
  return { userId: "", identityProviderId: "" };
}

export const GetUserRequest: MessageFns<GetUserRequest> = {
  encode(message: GetUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.identityProviderId !== "") {
      writer.uint32(18).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRequest {
    return {
      userId: isSet(object.userId) ? gt.String(object.userId) : "",
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: GetUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserRequest>, I>>(base?: I): GetUserRequest {
    return GetUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserRequest>, I>>(object: I): GetUserRequest {
    const message = createBaseGetUserRequest();
    message.userId = object.userId ?? "";
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseGetUserResponse(): GetUserResponse {
  return { user: undefined };
}

export const GetUserResponse: MessageFns<GetUserResponse> = {
  encode(message: GetUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  },

  toJSON(message: GetUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserResponse>, I>>(base?: I): GetUserResponse {
    return GetUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserResponse>, I>>(object: I): GetUserResponse {
    const message = createBaseGetUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseUpdateUserRequest(): UpdateUserRequest {
  return { user: undefined, updateMask: undefined };
}

export const UpdateUserRequest: MessageFns<UpdateUserRequest> = {
  encode(message: UpdateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserRequest {
    return {
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateUserRequest): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserRequest>, I>>(base?: I): UpdateUserRequest {
    return UpdateUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserRequest>, I>>(object: I): UpdateUserRequest {
    const message = createBaseUpdateUserRequest();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateUserResponse(): UpdateUserResponse {
  return { user: undefined };
}

export const UpdateUserResponse: MessageFns<UpdateUserResponse> = {
  encode(message: UpdateUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserResponse {
    return { user: isSet(object.user) ? User.fromJSON(object.user) : undefined };
  },

  toJSON(message: UpdateUserResponse): unknown {
    const obj: any = {};
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserResponse>, I>>(base?: I): UpdateUserResponse {
    return UpdateUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserResponse>, I>>(object: I): UpdateUserResponse {
    const message = createBaseUpdateUserResponse();
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseDeleteUserRequest(): DeleteUserRequest {
  return { userId: "", identityProviderId: "" };
}

export const DeleteUserRequest: MessageFns<DeleteUserRequest> = {
  encode(message: DeleteUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.identityProviderId !== "") {
      writer.uint32(18).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserRequest {
    return {
      userId: isSet(object.userId) ? gt.String(object.userId) : "",
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: DeleteUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserRequest>, I>>(base?: I): DeleteUserRequest {
    return DeleteUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserRequest>, I>>(object: I): DeleteUserRequest {
    const message = createBaseDeleteUserRequest();
    message.userId = object.userId ?? "";
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseDeleteUserResponse(): DeleteUserResponse {
  return {};
}

export const DeleteUserResponse: MessageFns<DeleteUserResponse> = {
  encode(_: DeleteUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteUserResponse {
    return {};
  },

  toJSON(_: DeleteUserResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserResponse>, I>>(base?: I): DeleteUserResponse {
    return DeleteUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserResponse>, I>>(_: I): DeleteUserResponse {
    const message = createBaseDeleteUserResponse();
    return message;
  },
};

function createBaseListUsersRequest(): ListUsersRequest {
  return { pageToken: "", pageSize: 0, identityProviderId: "" };
}

export const ListUsersRequest: MessageFns<ListUsersRequest> = {
  encode(message: ListUsersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.identityProviderId !== "") {
      writer.uint32(34).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUsersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUsersRequest {
    return {
      pageToken: isSet(object.pageToken) ? gt.String(object.pageToken) : "",
      pageSize: isSet(object.pageSize) ? gt.Number(object.pageSize) : 0,
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: ListUsersRequest): unknown {
    const obj: any = {};
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUsersRequest>, I>>(base?: I): ListUsersRequest {
    return ListUsersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUsersRequest>, I>>(object: I): ListUsersRequest {
    const message = createBaseListUsersRequest();
    message.pageToken = object.pageToken ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseListUsersResponse(): ListUsersResponse {
  return { users: [], nextPageToken: "" };
}

export const ListUsersResponse: MessageFns<ListUsersResponse> = {
  encode(message: ListUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUsersResponse {
    return {
      users: gt.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? gt.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListUsersResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUsersResponse>, I>>(base?: I): ListUsersResponse {
    return ListUsersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUsersResponse>, I>>(object: I): ListUsersResponse {
    const message = createBaseListUsersResponse();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGrantUserRightsRequest(): GrantUserRightsRequest {
  return { userId: "", rights: [], identityProviderId: "" };
}

export const GrantUserRightsRequest: MessageFns<GrantUserRightsRequest> = {
  encode(message: GrantUserRightsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.rights) {
      Right.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.identityProviderId !== "") {
      writer.uint32(26).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrantUserRightsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrantUserRightsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rights.push(Right.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrantUserRightsRequest {
    return {
      userId: isSet(object.userId) ? gt.String(object.userId) : "",
      rights: gt.Array.isArray(object?.rights) ? object.rights.map((e: any) => Right.fromJSON(e)) : [],
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: GrantUserRightsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.rights?.length) {
      obj.rights = message.rights.map((e) => Right.toJSON(e));
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrantUserRightsRequest>, I>>(base?: I): GrantUserRightsRequest {
    return GrantUserRightsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrantUserRightsRequest>, I>>(object: I): GrantUserRightsRequest {
    const message = createBaseGrantUserRightsRequest();
    message.userId = object.userId ?? "";
    message.rights = object.rights?.map((e) => Right.fromPartial(e)) || [];
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseGrantUserRightsResponse(): GrantUserRightsResponse {
  return { newlyGrantedRights: [] };
}

export const GrantUserRightsResponse: MessageFns<GrantUserRightsResponse> = {
  encode(message: GrantUserRightsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.newlyGrantedRights) {
      Right.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrantUserRightsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrantUserRightsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.newlyGrantedRights.push(Right.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GrantUserRightsResponse {
    return {
      newlyGrantedRights: gt.Array.isArray(object?.newlyGrantedRights)
        ? object.newlyGrantedRights.map((e: any) => Right.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GrantUserRightsResponse): unknown {
    const obj: any = {};
    if (message.newlyGrantedRights?.length) {
      obj.newlyGrantedRights = message.newlyGrantedRights.map((e) => Right.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GrantUserRightsResponse>, I>>(base?: I): GrantUserRightsResponse {
    return GrantUserRightsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GrantUserRightsResponse>, I>>(object: I): GrantUserRightsResponse {
    const message = createBaseGrantUserRightsResponse();
    message.newlyGrantedRights = object.newlyGrantedRights?.map((e) => Right.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRevokeUserRightsRequest(): RevokeUserRightsRequest {
  return { userId: "", rights: [], identityProviderId: "" };
}

export const RevokeUserRightsRequest: MessageFns<RevokeUserRightsRequest> = {
  encode(message: RevokeUserRightsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.rights) {
      Right.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.identityProviderId !== "") {
      writer.uint32(26).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevokeUserRightsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevokeUserRightsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.rights.push(Right.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevokeUserRightsRequest {
    return {
      userId: isSet(object.userId) ? gt.String(object.userId) : "",
      rights: gt.Array.isArray(object?.rights) ? object.rights.map((e: any) => Right.fromJSON(e)) : [],
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: RevokeUserRightsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.rights?.length) {
      obj.rights = message.rights.map((e) => Right.toJSON(e));
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RevokeUserRightsRequest>, I>>(base?: I): RevokeUserRightsRequest {
    return RevokeUserRightsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RevokeUserRightsRequest>, I>>(object: I): RevokeUserRightsRequest {
    const message = createBaseRevokeUserRightsRequest();
    message.userId = object.userId ?? "";
    message.rights = object.rights?.map((e) => Right.fromPartial(e)) || [];
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseRevokeUserRightsResponse(): RevokeUserRightsResponse {
  return { newlyRevokedRights: [] };
}

export const RevokeUserRightsResponse: MessageFns<RevokeUserRightsResponse> = {
  encode(message: RevokeUserRightsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.newlyRevokedRights) {
      Right.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RevokeUserRightsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevokeUserRightsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.newlyRevokedRights.push(Right.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RevokeUserRightsResponse {
    return {
      newlyRevokedRights: gt.Array.isArray(object?.newlyRevokedRights)
        ? object.newlyRevokedRights.map((e: any) => Right.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RevokeUserRightsResponse): unknown {
    const obj: any = {};
    if (message.newlyRevokedRights?.length) {
      obj.newlyRevokedRights = message.newlyRevokedRights.map((e) => Right.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RevokeUserRightsResponse>, I>>(base?: I): RevokeUserRightsResponse {
    return RevokeUserRightsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RevokeUserRightsResponse>, I>>(object: I): RevokeUserRightsResponse {
    const message = createBaseRevokeUserRightsResponse();
    message.newlyRevokedRights = object.newlyRevokedRights?.map((e) => Right.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListUserRightsRequest(): ListUserRightsRequest {
  return { userId: "", identityProviderId: "" };
}

export const ListUserRightsRequest: MessageFns<ListUserRightsRequest> = {
  encode(message: ListUserRightsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.identityProviderId !== "") {
      writer.uint32(18).string(message.identityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUserRightsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserRightsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.identityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserRightsRequest {
    return {
      userId: isSet(object.userId) ? gt.String(object.userId) : "",
      identityProviderId: isSet(object.identityProviderId) ? gt.String(object.identityProviderId) : "",
    };
  },

  toJSON(message: ListUserRightsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.identityProviderId !== "") {
      obj.identityProviderId = message.identityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserRightsRequest>, I>>(base?: I): ListUserRightsRequest {
    return ListUserRightsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserRightsRequest>, I>>(object: I): ListUserRightsRequest {
    const message = createBaseListUserRightsRequest();
    message.userId = object.userId ?? "";
    message.identityProviderId = object.identityProviderId ?? "";
    return message;
  },
};

function createBaseListUserRightsResponse(): ListUserRightsResponse {
  return { rights: [] };
}

export const ListUserRightsResponse: MessageFns<ListUserRightsResponse> = {
  encode(message: ListUserRightsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rights) {
      Right.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUserRightsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserRightsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rights.push(Right.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserRightsResponse {
    return { rights: gt.Array.isArray(object?.rights) ? object.rights.map((e: any) => Right.fromJSON(e)) : [] };
  },

  toJSON(message: ListUserRightsResponse): unknown {
    const obj: any = {};
    if (message.rights?.length) {
      obj.rights = message.rights.map((e) => Right.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserRightsResponse>, I>>(base?: I): ListUserRightsResponse {
    return ListUserRightsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserRightsResponse>, I>>(object: I): ListUserRightsResponse {
    const message = createBaseListUserRightsResponse();
    message.rights = object.rights?.map((e) => Right.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateUserIdentityProviderIdRequest(): UpdateUserIdentityProviderIdRequest {
  return { userId: "", sourceIdentityProviderId: "", targetIdentityProviderId: "" };
}

export const UpdateUserIdentityProviderIdRequest: MessageFns<UpdateUserIdentityProviderIdRequest> = {
  encode(message: UpdateUserIdentityProviderIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.sourceIdentityProviderId !== "") {
      writer.uint32(18).string(message.sourceIdentityProviderId);
    }
    if (message.targetIdentityProviderId !== "") {
      writer.uint32(26).string(message.targetIdentityProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserIdentityProviderIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserIdentityProviderIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceIdentityProviderId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.targetIdentityProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserIdentityProviderIdRequest {
    return {
      userId: isSet(object.userId) ? gt.String(object.userId) : "",
      sourceIdentityProviderId: isSet(object.sourceIdentityProviderId)
        ? gt.String(object.sourceIdentityProviderId)
        : "",
      targetIdentityProviderId: isSet(object.targetIdentityProviderId)
        ? gt.String(object.targetIdentityProviderId)
        : "",
    };
  },

  toJSON(message: UpdateUserIdentityProviderIdRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.sourceIdentityProviderId !== "") {
      obj.sourceIdentityProviderId = message.sourceIdentityProviderId;
    }
    if (message.targetIdentityProviderId !== "") {
      obj.targetIdentityProviderId = message.targetIdentityProviderId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserIdentityProviderIdRequest>, I>>(
    base?: I,
  ): UpdateUserIdentityProviderIdRequest {
    return UpdateUserIdentityProviderIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserIdentityProviderIdRequest>, I>>(
    object: I,
  ): UpdateUserIdentityProviderIdRequest {
    const message = createBaseUpdateUserIdentityProviderIdRequest();
    message.userId = object.userId ?? "";
    message.sourceIdentityProviderId = object.sourceIdentityProviderId ?? "";
    message.targetIdentityProviderId = object.targetIdentityProviderId ?? "";
    return message;
  },
};

function createBaseUpdateUserIdentityProviderIdResponse(): UpdateUserIdentityProviderIdResponse {
  return {};
}

export const UpdateUserIdentityProviderIdResponse: MessageFns<UpdateUserIdentityProviderIdResponse> = {
  encode(_: UpdateUserIdentityProviderIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserIdentityProviderIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserIdentityProviderIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateUserIdentityProviderIdResponse {
    return {};
  },

  toJSON(_: UpdateUserIdentityProviderIdResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserIdentityProviderIdResponse>, I>>(
    base?: I,
  ): UpdateUserIdentityProviderIdResponse {
    return UpdateUserIdentityProviderIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserIdentityProviderIdResponse>, I>>(
    _: I,
  ): UpdateUserIdentityProviderIdResponse {
    const message = createBaseUpdateUserIdentityProviderIdResponse();
    return message;
  },
};

/**
 * Service to manage users and their rights for interacting with the Ledger API
 * served by a participant node.
 *
 * The authorization rules for its RPCs are specified on the ``<RpcName>Request``
 * messages as boolean expressions over these facts:
 *
 * 1. ``HasRight(r)`` denoting whether the authenticated user has right ``r`` and
 * 2. ``IsAuthenticatedUser(uid)`` denoting whether ``uid`` is the empty string or equal to the id of the authenticated user.
 * 3. ``IsAuthenticatedIdentityProviderAdmin(idp)`` denoting whether ``idp`` is equal to the ``identity_provider_id``
 *    of the authenticated user and the user has an IdentityProviderAdmin right.
 *
 * If `user_id` is set to the empty string (the default), then the data for the authenticated user will be retrieved.
 * If `identity_provider_id` is set to an empty string, then it's effectively set to the value of access token's 'iss' field if that is provided.
 * If `identity_provider_id` remains an empty string, the default identity provider will be assumed.
 *
 * The fields of request messages (and sub-messages) are marked either as ``Optional`` or ``Required``:
 *
 * 1. ``Optional`` denoting the client may leave the field unset when sending a request.
 * 2. ``Required`` denoting the client must set the field to a non-default value when sending a request.
 *
 * A user resource consists of:
 *
 * 1. a set of properties represented by the ``User`` message,
 * 2. a set of user rights, where each right is represented by the ``Right`` message.
 *
 * A user resource, once it has been created, can be modified.
 * In order to update the properties represented by the ``User`` message use the ``UpdateUser`` RPC. The only fields that can be modified are those marked as ``Modifiable``.
 * In order to grant or revoke user rights use ``GrantRights' and ``RevokeRights`` RPCs.
 */
export interface UserManagementService {
  /** Create a new user. */
  CreateUser(request: CreateUserRequest): Promise<CreateUserResponse>;
  /** Get the user data of a specific user or the authenticated user. */
  GetUser(request: GetUserRequest): Promise<GetUserResponse>;
  /** Update selected modifiable attribute of a user resource described by the ``User`` message. */
  UpdateUser(request: UpdateUserRequest): Promise<UpdateUserResponse>;
  /** Delete an existing user and all its rights. */
  DeleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse>;
  /** List all existing users. */
  ListUsers(request: ListUsersRequest): Promise<ListUsersResponse>;
  /**
   * Grant rights to a user.
   * Granting rights does not affect the resource version of the corresponding user.
   */
  GrantUserRights(request: GrantUserRightsRequest): Promise<GrantUserRightsResponse>;
  /**
   * Revoke rights from a user.
   * Revoking rights does not affect the resource version of the corresponding user.
   */
  RevokeUserRights(request: RevokeUserRightsRequest): Promise<RevokeUserRightsResponse>;
  /** List the set of all rights granted to a user. */
  ListUserRights(request: ListUserRightsRequest): Promise<ListUserRightsResponse>;
  /** Update the assignment of a user from one IDP to another. */
  UpdateUserIdentityProviderId(
    request: UpdateUserIdentityProviderIdRequest,
  ): Promise<UpdateUserIdentityProviderIdResponse>;
}

export const UserManagementServiceServiceName = "com.daml.ledger.api.v2.admin.UserManagementService";
export class UserManagementServiceClientImpl implements UserManagementService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UserManagementServiceServiceName;
    this.rpc = rpc;
    this.CreateUser = this.CreateUser.bind(this);
    this.GetUser = this.GetUser.bind(this);
    this.UpdateUser = this.UpdateUser.bind(this);
    this.DeleteUser = this.DeleteUser.bind(this);
    this.ListUsers = this.ListUsers.bind(this);
    this.GrantUserRights = this.GrantUserRights.bind(this);
    this.RevokeUserRights = this.RevokeUserRights.bind(this);
    this.ListUserRights = this.ListUserRights.bind(this);
    this.UpdateUserIdentityProviderId = this.UpdateUserIdentityProviderId.bind(this);
  }
  CreateUser(request: CreateUserRequest): Promise<CreateUserResponse> {
    const data = CreateUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateUser", data);
    return promise.then((data) => CreateUserResponse.decode(new BinaryReader(data)));
  }

  GetUser(request: GetUserRequest): Promise<GetUserResponse> {
    const data = GetUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUser", data);
    return promise.then((data) => GetUserResponse.decode(new BinaryReader(data)));
  }

  UpdateUser(request: UpdateUserRequest): Promise<UpdateUserResponse> {
    const data = UpdateUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUser", data);
    return promise.then((data) => UpdateUserResponse.decode(new BinaryReader(data)));
  }

  DeleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse> {
    const data = DeleteUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUser", data);
    return promise.then((data) => DeleteUserResponse.decode(new BinaryReader(data)));
  }

  ListUsers(request: ListUsersRequest): Promise<ListUsersResponse> {
    const data = ListUsersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListUsers", data);
    return promise.then((data) => ListUsersResponse.decode(new BinaryReader(data)));
  }

  GrantUserRights(request: GrantUserRightsRequest): Promise<GrantUserRightsResponse> {
    const data = GrantUserRightsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GrantUserRights", data);
    return promise.then((data) => GrantUserRightsResponse.decode(new BinaryReader(data)));
  }

  RevokeUserRights(request: RevokeUserRightsRequest): Promise<RevokeUserRightsResponse> {
    const data = RevokeUserRightsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RevokeUserRights", data);
    return promise.then((data) => RevokeUserRightsResponse.decode(new BinaryReader(data)));
  }

  ListUserRights(request: ListUserRightsRequest): Promise<ListUserRightsResponse> {
    const data = ListUserRightsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListUserRights", data);
    return promise.then((data) => ListUserRightsResponse.decode(new BinaryReader(data)));
  }

  UpdateUserIdentityProviderId(
    request: UpdateUserIdentityProviderIdRequest,
  ): Promise<UpdateUserIdentityProviderIdResponse> {
    const data = UpdateUserIdentityProviderIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUserIdentityProviderId", data);
    return promise.then((data) => UpdateUserIdentityProviderIdResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
