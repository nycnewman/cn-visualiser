// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/admin/object_meta.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.daml.ledger.api.v2.admin";

/**
 * Represents metadata corresponding to a participant resource (e.g. a participant user or participant local information about a party).
 *
 * Based on ``ObjectMeta`` meta used in Kubernetes API.
 * See https://github.com/kubernetes/apimachinery/blob/master/pkg/apis/meta/v1/generated.proto#L640
 */
export interface ObjectMeta {
  /**
   * An opaque, non-empty value, populated by a participant server which represents the internal version of the resource
   * this ``ObjectMeta`` message is attached to. The participant server will change it to a unique value each time the corresponding resource is updated.
   * You must not rely on the format of resource version. The participant server might change it without notice.
   * You can obtain the newest resource version value by issuing a read request.
   * You may use it for concurrent change detection by passing it back unmodified in an update request.
   * The participant server will then compare the passed value with the value maintained by the system to determine
   * if any other updates took place since you had read the resource version.
   * Upon a successful update you are guaranteed that no other update took place during your read-modify-write sequence.
   * However, if another update took place during your read-modify-write sequence then your update will fail with an appropriate error.
   * Concurrent change control is optional. It will be applied only if you include a resource version in an update request.
   * When creating a new instance of a resource you must leave the resource version empty.
   * Its value will be populated by the participant server upon successful resource creation.
   * Optional
   */
  resourceVersion: string;
  /**
   * A set of modifiable key-value pairs that can be used to represent arbitrary, client-specific metadata.
   * Constraints:
   *
   * 1. The total size over all keys and values cannot exceed 256kb in UTF-8 encoding.
   * 2. Keys are composed of an optional prefix segment and a required name segment such that:
   *
   *    - key prefix, when present, must be a valid DNS subdomain with at most 253 characters, followed by a '/' (forward slash) character,
   *    - name segment must have at most 63 characters that are either alphanumeric ([a-z0-9A-Z]), or a '.' (dot), '-' (dash) or '_' (underscore);
   *      and it must start and end with an alphanumeric character.
   *
   * 3. Values can be any non-empty strings.
   *
   * Keys with empty prefix are reserved for end-users.
   * Properties set by external tools or internally by the participant server must use non-empty key prefixes.
   * Duplicate keys are disallowed by the semantics of the protobuf3 maps.
   * See: https://developers.google.com/protocol-buffers/docs/proto3#maps
   * Annotations may be a part of a modifiable resource.
   * Use the resource's update RPC to update its annotations.
   * In order to add a new annotation or update an existing one using an update RPC, provide the desired annotation in the update request.
   * In order to remove an annotation using an update RPC, provide the target annotation's key but set its value to the empty string in the update request.
   * Optional
   * Modifiable
   */
  annotations: { [key: string]: string };
}

export interface ObjectMeta_AnnotationsEntry {
  key: string;
  value: string;
}

function createBaseObjectMeta(): ObjectMeta {
  return { resourceVersion: "", annotations: {} };
}

export const ObjectMeta: MessageFns<ObjectMeta> = {
  encode(message: ObjectMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resourceVersion !== "") {
      writer.uint32(50).string(message.resourceVersion);
    }
    Object.entries(message.annotations).forEach(([key, value]) => {
      ObjectMeta_AnnotationsEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ObjectMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.resourceVersion = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          const entry12 = ObjectMeta_AnnotationsEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.annotations[entry12.key] = entry12.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectMeta {
    return {
      resourceVersion: isSet(object.resourceVersion) ? gt.String(object.resourceVersion) : "",
      annotations: isObject(object.annotations)
        ? Object.entries(object.annotations).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ObjectMeta): unknown {
    const obj: any = {};
    if (message.resourceVersion !== "") {
      obj.resourceVersion = message.resourceVersion;
    }
    if (message.annotations) {
      const entries = Object.entries(message.annotations);
      if (entries.length > 0) {
        obj.annotations = {};
        entries.forEach(([k, v]) => {
          obj.annotations[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ObjectMeta>, I>>(base?: I): ObjectMeta {
    return ObjectMeta.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ObjectMeta>, I>>(object: I): ObjectMeta {
    const message = createBaseObjectMeta();
    message.resourceVersion = object.resourceVersion ?? "";
    message.annotations = Object.entries(object.annotations ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = gt.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseObjectMeta_AnnotationsEntry(): ObjectMeta_AnnotationsEntry {
  return { key: "", value: "" };
}

export const ObjectMeta_AnnotationsEntry: MessageFns<ObjectMeta_AnnotationsEntry> = {
  encode(message: ObjectMeta_AnnotationsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ObjectMeta_AnnotationsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObjectMeta_AnnotationsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObjectMeta_AnnotationsEntry {
    return {
      key: isSet(object.key) ? gt.String(object.key) : "",
      value: isSet(object.value) ? gt.String(object.value) : "",
    };
  },

  toJSON(message: ObjectMeta_AnnotationsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ObjectMeta_AnnotationsEntry>, I>>(base?: I): ObjectMeta_AnnotationsEntry {
    return ObjectMeta_AnnotationsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ObjectMeta_AnnotationsEntry>, I>>(object: I): ObjectMeta_AnnotationsEntry {
    const message = createBaseObjectMeta_AnnotationsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
