// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/offset_checkpoint.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../google/protobuf/timestamp";

export const protobufPackage = "com.daml.ledger.api.v2";

/**
 * OffsetCheckpoints may be used to:
 *
 * - detect time out of commands.
 * - provide an offset which can be used to restart consumption.
 */
export interface OffsetCheckpoint {
  /**
   * The participant's offset, the details of the offset field are described in ``community/ledger-api/README.md``.
   * Required, must be a valid absolute offset (positive integer).
   */
  offset: number;
  synchronizerTimes: SynchronizerTime[];
}

export interface SynchronizerTime {
  /**
   * The id of the synchronizer.
   * Required
   */
  synchronizerId: string;
  /**
   * All commands with a maximum record time below this value MUST be considered lost if their completion has not arrived before this checkpoint.
   * Required
   */
  recordTime: Date | undefined;
}

function createBaseOffsetCheckpoint(): OffsetCheckpoint {
  return { offset: 0, synchronizerTimes: [] };
}

export const OffsetCheckpoint: MessageFns<OffsetCheckpoint> = {
  encode(message: OffsetCheckpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.offset !== 0) {
      writer.uint32(8).int64(message.offset);
    }
    for (const v of message.synchronizerTimes) {
      SynchronizerTime.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OffsetCheckpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOffsetCheckpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.synchronizerTimes.push(SynchronizerTime.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OffsetCheckpoint {
    return {
      offset: isSet(object.offset) ? gt.Number(object.offset) : 0,
      synchronizerTimes: gt.Array.isArray(object?.synchronizerTimes)
        ? object.synchronizerTimes.map((e: any) => SynchronizerTime.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OffsetCheckpoint): unknown {
    const obj: any = {};
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.synchronizerTimes?.length) {
      obj.synchronizerTimes = message.synchronizerTimes.map((e) => SynchronizerTime.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OffsetCheckpoint>, I>>(base?: I): OffsetCheckpoint {
    return OffsetCheckpoint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OffsetCheckpoint>, I>>(object: I): OffsetCheckpoint {
    const message = createBaseOffsetCheckpoint();
    message.offset = object.offset ?? 0;
    message.synchronizerTimes = object.synchronizerTimes?.map((e) => SynchronizerTime.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSynchronizerTime(): SynchronizerTime {
  return { synchronizerId: "", recordTime: undefined };
}

export const SynchronizerTime: MessageFns<SynchronizerTime> = {
  encode(message: SynchronizerTime, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.synchronizerId !== "") {
      writer.uint32(10).string(message.synchronizerId);
    }
    if (message.recordTime !== undefined) {
      Timestamp.encode(toTimestamp(message.recordTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SynchronizerTime {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSynchronizerTime();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.synchronizerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recordTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SynchronizerTime {
    return {
      synchronizerId: isSet(object.synchronizerId) ? gt.String(object.synchronizerId) : "",
      recordTime: isSet(object.recordTime) ? fromJsonTimestamp(object.recordTime) : undefined,
    };
  },

  toJSON(message: SynchronizerTime): unknown {
    const obj: any = {};
    if (message.synchronizerId !== "") {
      obj.synchronizerId = message.synchronizerId;
    }
    if (message.recordTime !== undefined) {
      obj.recordTime = message.recordTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SynchronizerTime>, I>>(base?: I): SynchronizerTime {
    return SynchronizerTime.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SynchronizerTime>, I>>(object: I): SynchronizerTime {
    const message = createBaseSynchronizerTime();
    message.synchronizerId = object.synchronizerId ?? "";
    message.recordTime = object.recordTime ?? undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
