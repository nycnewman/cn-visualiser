// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../google/protobuf/timestamp";
import { Status } from "../../../../../google/rpc/status";
import { Identifier, Record, Value } from "./value";

export const protobufPackage = "com.daml.ledger.api.v2";

/**
 * Events in transactions can have two primary shapes:
 *
 * - ACS delta: events can be CreatedEvent or ArchivedEvent
 * - ledger effects: events can be CreatedEvent or ExercisedEvent
 *
 * In the update service the events are restricted to the events
 * visible for the parties specified in the transaction filter. Each
 * event message type below contains a ``witness_parties`` field which
 * indicates the subset of the requested parties that can see the event
 * in question.
 */
export interface Event {
  /**
   * The event as it appeared in the context of its original daml transaction on this participant node.
   * In particular, the offset, node_id pair of the daml transaction are preserved.
   */
  created?: CreatedEvent | undefined;
  archived?: ArchivedEvent | undefined;
  exercised?: ExercisedEvent | undefined;
}

/** Records that a contract has been created, and choices may now be exercised on it. */
export interface CreatedEvent {
  /**
   * The offset of origin, which has contextual meaning, please see description at messages that include a CreatedEvent.
   * Offsets are managed by the participant nodes.
   * Transactions can thus NOT be assumed to have the same offsets on different participant nodes.
   * Required, it is a valid absolute offset (positive integer)
   */
  offset: number;
  /**
   * The position of this event in the originating transaction or reassignment.
   * The origin has contextual meaning, please see description at messages that include a CreatedEvent.
   * Node IDs are not necessarily equal across participants,
   * as these may see different projections/parts of transactions.
   * Required, must be valid node ID (non-negative integer)
   */
  nodeId: number;
  /**
   * The ID of the created contract.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Required
   */
  contractId: string;
  /**
   * The template of the created contract.
   * The identifier uses the package-id reference format.
   *
   * Required
   */
  templateId:
    | Identifier
    | undefined;
  /**
   * The key of the created contract.
   * This will be set if and only if ``create_arguments`` is set and ``template_id`` defines a contract key.
   * Optional
   */
  contractKey:
    | Value
    | undefined;
  /**
   * The arguments that have been used to create the contract.
   * Set either:
   *
   * - if there was a party, which is in the ``witness_parties`` of this event,
   *   and for which a ``CumulativeFilter`` exists with the ``template_id`` of this event
   *   among the ``template_filters``,
   * - or if there was a party, which is in the ``witness_parties`` of this event,
   *   and for which a wildcard filter exists (``Filters`` with a ``CumulativeFilter`` of ``WildcardFilter``).
   *
   * Optional
   */
  createArguments:
    | Record
    | undefined;
  /**
   * Opaque representation of contract create event payload intended for forwarding
   * to an API server as a contract disclosed as part of a command
   * submission.
   * Optional
   */
  createdEventBlob: Uint8Array;
  /**
   * Interface views specified in the transaction filter.
   * Includes an ``InterfaceView`` for each interface for which there is a ``InterfaceFilter`` with
   *
   * - its party in the ``witness_parties`` of this event,
   * - and which is implemented by the template of this event,
   * - and which has ``include_interface_view`` set.
   *
   * Optional
   */
  interfaceViews: InterfaceView[];
  /**
   * The parties that are notified of this event. When a ``CreatedEvent``
   * is returned as part of a transaction tree or ledger-effects transaction, this will include all
   * the parties specified in the ``TransactionFilter`` that are informees
   * of the event. If served as part of a ACS delta transaction those will
   * be limited to all parties specified in the ``TransactionFilter`` that
   * are stakeholders of the contract (i.e. either signatories or observers).
   * If the ``CreatedEvent`` is returned as part of an AssignedEvent,
   * ActiveContract or IncompleteUnassigned (so the event is related to
   * an assignment or unassignment): this will include all parties of the
   * ``TransactionFilter`` that are stakeholders of the contract.
   *
   * The behavior of reading create events visible to parties not hosted
   * on the participant node serving the Ledger API is undefined. Concretely,
   * there is neither a guarantee that the participant node will serve all their
   * create events on the ACS stream, nor is there a guarantee that matching archive
   * events are delivered for such create events.
   *
   * For most clients this is not a problem, as they only read events for parties
   * that are hosted on the participant node. If you need to read events
   * for parties that may not be hosted at all times on the participant node,
   * subscribe to the ``TopologyEvent``s for that party by setting a corresponding
   * ``UpdateFormat``.  Using these events, query the ACS as-of an offset where the
   * party is hosted on the participant node, and ignore create events at offsets
   * where the party is not hosted on the participant node.
   * Required
   */
  witnessParties: string[];
  /**
   * The signatories for this contract as specified by the template.
   * Required
   */
  signatories: string[];
  /**
   * The observers for this contract as specified explicitly by the template or implicitly as choice controllers.
   * This field never contains parties that are signatories.
   * Required
   */
  observers: string[];
  /**
   * Ledger effective time of the transaction that created the contract.
   * Required
   */
  createdAt:
    | Date
    | undefined;
  /**
   * The package name of the created contract.
   * Required
   */
  packageName: string;
}

/** View of a create event matched by an interface filter. */
export interface InterfaceView {
  /**
   * The interface implemented by the matched event.
   * The identifier uses the package-id reference format.
   *
   * Required
   */
  interfaceId:
    | Identifier
    | undefined;
  /**
   * Whether the view was successfully computed, and if not,
   * the reason for the error. The error is reported using the same rules
   * for error codes and messages as the errors returned for API requests.
   * Required
   */
  viewStatus:
    | Status
    | undefined;
  /**
   * The value of the interface's view method on this event.
   * Set if it was requested in the ``InterfaceFilter`` and it could be
   * sucessfully computed.
   * Optional
   */
  viewValue: Record | undefined;
}

/** Records that a contract has been archived, and choices may no longer be exercised on it. */
export interface ArchivedEvent {
  /**
   * The offset of origin.
   * Offsets are managed by the participant nodes.
   * Transactions can thus NOT be assumed to have the same offsets on different participant nodes.
   * Required, it is a valid absolute offset (positive integer)
   */
  offset: number;
  /**
   * The position of this event in the originating transaction or reassignment.
   * Node IDs are not necessarily equal across participants,
   * as these may see different projections/parts of transactions.
   * Required, must be valid node ID (non-negative integer)
   */
  nodeId: number;
  /**
   * The ID of the archived contract.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Required
   */
  contractId: string;
  /**
   * The template of the archived contract.
   * The identifier uses the package-id reference format.
   *
   * Required
   */
  templateId:
    | Identifier
    | undefined;
  /**
   * The parties that are notified of this event. For an ``ArchivedEvent``,
   * these are the intersection of the stakeholders of the contract in
   * question and the parties specified in the ``TransactionFilter``. The
   * stakeholders are the union of the signatories and the observers of
   * the contract.
   * Each one of its elements must be a valid PartyIdString (as described
   * in ``value.proto``).
   * Required
   */
  witnessParties: string[];
  /**
   * The package name of the contract.
   * Required
   */
  packageName: string;
  /**
   * The interfaces implemented by the target template that have been
   * matched from the interface filter query.
   * Populated only in case interface filters with include_interface_view set.
   *
   * If defined, the identifier uses the package-id reference format.
   *
   * Optional
   */
  implementedInterfaces: Identifier[];
}

/** Records that a choice has been exercised on a target contract. */
export interface ExercisedEvent {
  /**
   * The offset of origin.
   * Offsets are managed by the participant nodes.
   * Transactions can thus NOT be assumed to have the same offsets on different participant nodes.
   * Required, it is a valid absolute offset (positive integer)
   */
  offset: number;
  /**
   * The position of this event in the originating transaction or reassignment.
   * Node IDs are not necessarily equal across participants,
   * as these may see different projections/parts of transactions.
   * Required, must be valid node ID (non-negative integer)
   */
  nodeId: number;
  /**
   * The ID of the target contract.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Required
   */
  contractId: string;
  /**
   * The template of the target contract.
   * The identifier uses the package-id reference format.
   *
   * Required
   */
  templateId:
    | Identifier
    | undefined;
  /**
   * The interface where the choice is defined, if inherited.
   * If defined, the identifier uses the package-id reference format.
   *
   * Optional
   */
  interfaceId:
    | Identifier
    | undefined;
  /**
   * The choice that was exercised on the target contract.
   * Must be a valid NameString (as described in ``value.proto``).
   * Required
   */
  choice: string;
  /**
   * The argument of the exercised choice.
   * Required
   */
  choiceArgument:
    | Value
    | undefined;
  /**
   * The parties that exercised the choice.
   * Each element must be a valid PartyIdString (as described in ``value.proto``).
   * Required
   */
  actingParties: string[];
  /**
   * If true, the target contract may no longer be exercised.
   * Required
   */
  consuming: boolean;
  /**
   * The parties that are notified of this event. The witnesses of an exercise
   * node will depend on whether the exercise was consuming or not.
   * If consuming, the witnesses are the union of the stakeholders and
   * the actors.
   * If not consuming, the witnesses are the union of the signatories and
   * the actors. Note that the actors might not necessarily be observers
   * and thus signatories. This is the case when the controllers of a
   * choice are specified using "flexible controllers", using the
   * ``choice ... controller`` syntax, and said controllers are not
   * explicitly marked as observers.
   * Each element must be a valid PartyIdString (as described in ``value.proto``).
   * Required
   */
  witnessParties: string[];
  /**
   * Specifies the upper boundary of the node ids of the events in the same transaction that appeared as a result of
   * this ``ExercisedEvent``. This allows unambiguous identification of all the members of the subtree rooted at this
   * node. A full subtree can be constructed when all descendant nodes are present in the stream. If nodes are heavily
   * filtered, it is only possible to determine if a node is in a consequent subtree or not.
   * Required
   */
  lastDescendantNodeId: number;
  /**
   * The result of exercising the choice.
   * Required
   */
  exerciseResult:
    | Value
    | undefined;
  /**
   * The package name of the contract.
   * Required
   */
  packageName: string;
  /**
   * If the event is consuming, the interfaces implemented by the target template that have been
   * matched from the interface filter query.
   * Populated only in case interface filters with include_interface_view set.
   *
   * The identifier uses the package-id reference format.
   *
   * Optional
   */
  implementedInterfaces: Identifier[];
}

function createBaseEvent(): Event {
  return { created: undefined, archived: undefined, exercised: undefined };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.created !== undefined) {
      CreatedEvent.encode(message.created, writer.uint32(10).fork()).join();
    }
    if (message.archived !== undefined) {
      ArchivedEvent.encode(message.archived, writer.uint32(18).fork()).join();
    }
    if (message.exercised !== undefined) {
      ExercisedEvent.encode(message.exercised, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.created = CreatedEvent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.archived = ArchivedEvent.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.exercised = ExercisedEvent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      created: isSet(object.created) ? CreatedEvent.fromJSON(object.created) : undefined,
      archived: isSet(object.archived) ? ArchivedEvent.fromJSON(object.archived) : undefined,
      exercised: isSet(object.exercised) ? ExercisedEvent.fromJSON(object.exercised) : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.created !== undefined) {
      obj.created = CreatedEvent.toJSON(message.created);
    }
    if (message.archived !== undefined) {
      obj.archived = ArchivedEvent.toJSON(message.archived);
    }
    if (message.exercised !== undefined) {
      obj.exercised = ExercisedEvent.toJSON(message.exercised);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.created = (object.created !== undefined && object.created !== null)
      ? CreatedEvent.fromPartial(object.created)
      : undefined;
    message.archived = (object.archived !== undefined && object.archived !== null)
      ? ArchivedEvent.fromPartial(object.archived)
      : undefined;
    message.exercised = (object.exercised !== undefined && object.exercised !== null)
      ? ExercisedEvent.fromPartial(object.exercised)
      : undefined;
    return message;
  },
};

function createBaseCreatedEvent(): CreatedEvent {
  return {
    offset: 0,
    nodeId: 0,
    contractId: "",
    templateId: undefined,
    contractKey: undefined,
    createArguments: undefined,
    createdEventBlob: new Uint8Array(0),
    interfaceViews: [],
    witnessParties: [],
    signatories: [],
    observers: [],
    createdAt: undefined,
    packageName: "",
  };
}

export const CreatedEvent: MessageFns<CreatedEvent> = {
  encode(message: CreatedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.offset !== 0) {
      writer.uint32(8).int64(message.offset);
    }
    if (message.nodeId !== 0) {
      writer.uint32(16).int32(message.nodeId);
    }
    if (message.contractId !== "") {
      writer.uint32(26).string(message.contractId);
    }
    if (message.templateId !== undefined) {
      Identifier.encode(message.templateId, writer.uint32(34).fork()).join();
    }
    if (message.contractKey !== undefined) {
      Value.encode(message.contractKey, writer.uint32(42).fork()).join();
    }
    if (message.createArguments !== undefined) {
      Record.encode(message.createArguments, writer.uint32(50).fork()).join();
    }
    if (message.createdEventBlob.length !== 0) {
      writer.uint32(58).bytes(message.createdEventBlob);
    }
    for (const v of message.interfaceViews) {
      InterfaceView.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.witnessParties) {
      writer.uint32(74).string(v!);
    }
    for (const v of message.signatories) {
      writer.uint32(82).string(v!);
    }
    for (const v of message.observers) {
      writer.uint32(90).string(v!);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(98).fork()).join();
    }
    if (message.packageName !== "") {
      writer.uint32(106).string(message.packageName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contractId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.templateId = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.contractKey = Value.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createArguments = Record.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdEventBlob = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.interfaceViews.push(InterfaceView.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.witnessParties.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.signatories.push(reader.string());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.observers.push(reader.string());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.packageName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatedEvent {
    return {
      offset: isSet(object.offset) ? gt.Number(object.offset) : 0,
      nodeId: isSet(object.nodeId) ? gt.Number(object.nodeId) : 0,
      contractId: isSet(object.contractId) ? gt.String(object.contractId) : "",
      templateId: isSet(object.templateId) ? Identifier.fromJSON(object.templateId) : undefined,
      contractKey: isSet(object.contractKey) ? Value.fromJSON(object.contractKey) : undefined,
      createArguments: isSet(object.createArguments) ? Record.fromJSON(object.createArguments) : undefined,
      createdEventBlob: isSet(object.createdEventBlob) ? bytesFromBase64(object.createdEventBlob) : new Uint8Array(0),
      interfaceViews: gt.Array.isArray(object?.interfaceViews)
        ? object.interfaceViews.map((e: any) => InterfaceView.fromJSON(e))
        : [],
      witnessParties: gt.Array.isArray(object?.witnessParties)
        ? object.witnessParties.map((e: any) => gt.String(e))
        : [],
      signatories: gt.Array.isArray(object?.signatories) ? object.signatories.map((e: any) => gt.String(e)) : [],
      observers: gt.Array.isArray(object?.observers) ? object.observers.map((e: any) => gt.String(e)) : [],
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      packageName: isSet(object.packageName) ? gt.String(object.packageName) : "",
    };
  },

  toJSON(message: CreatedEvent): unknown {
    const obj: any = {};
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.contractId !== "") {
      obj.contractId = message.contractId;
    }
    if (message.templateId !== undefined) {
      obj.templateId = Identifier.toJSON(message.templateId);
    }
    if (message.contractKey !== undefined) {
      obj.contractKey = Value.toJSON(message.contractKey);
    }
    if (message.createArguments !== undefined) {
      obj.createArguments = Record.toJSON(message.createArguments);
    }
    if (message.createdEventBlob.length !== 0) {
      obj.createdEventBlob = base64FromBytes(message.createdEventBlob);
    }
    if (message.interfaceViews?.length) {
      obj.interfaceViews = message.interfaceViews.map((e) => InterfaceView.toJSON(e));
    }
    if (message.witnessParties?.length) {
      obj.witnessParties = message.witnessParties;
    }
    if (message.signatories?.length) {
      obj.signatories = message.signatories;
    }
    if (message.observers?.length) {
      obj.observers = message.observers;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.packageName !== "") {
      obj.packageName = message.packageName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreatedEvent>, I>>(base?: I): CreatedEvent {
    return CreatedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreatedEvent>, I>>(object: I): CreatedEvent {
    const message = createBaseCreatedEvent();
    message.offset = object.offset ?? 0;
    message.nodeId = object.nodeId ?? 0;
    message.contractId = object.contractId ?? "";
    message.templateId = (object.templateId !== undefined && object.templateId !== null)
      ? Identifier.fromPartial(object.templateId)
      : undefined;
    message.contractKey = (object.contractKey !== undefined && object.contractKey !== null)
      ? Value.fromPartial(object.contractKey)
      : undefined;
    message.createArguments = (object.createArguments !== undefined && object.createArguments !== null)
      ? Record.fromPartial(object.createArguments)
      : undefined;
    message.createdEventBlob = object.createdEventBlob ?? new Uint8Array(0);
    message.interfaceViews = object.interfaceViews?.map((e) => InterfaceView.fromPartial(e)) || [];
    message.witnessParties = object.witnessParties?.map((e) => e) || [];
    message.signatories = object.signatories?.map((e) => e) || [];
    message.observers = object.observers?.map((e) => e) || [];
    message.createdAt = object.createdAt ?? undefined;
    message.packageName = object.packageName ?? "";
    return message;
  },
};

function createBaseInterfaceView(): InterfaceView {
  return { interfaceId: undefined, viewStatus: undefined, viewValue: undefined };
}

export const InterfaceView: MessageFns<InterfaceView> = {
  encode(message: InterfaceView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.interfaceId !== undefined) {
      Identifier.encode(message.interfaceId, writer.uint32(10).fork()).join();
    }
    if (message.viewStatus !== undefined) {
      Status.encode(message.viewStatus, writer.uint32(18).fork()).join();
    }
    if (message.viewValue !== undefined) {
      Record.encode(message.viewValue, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InterfaceView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterfaceView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.interfaceId = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.viewStatus = Status.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.viewValue = Record.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InterfaceView {
    return {
      interfaceId: isSet(object.interfaceId) ? Identifier.fromJSON(object.interfaceId) : undefined,
      viewStatus: isSet(object.viewStatus) ? Status.fromJSON(object.viewStatus) : undefined,
      viewValue: isSet(object.viewValue) ? Record.fromJSON(object.viewValue) : undefined,
    };
  },

  toJSON(message: InterfaceView): unknown {
    const obj: any = {};
    if (message.interfaceId !== undefined) {
      obj.interfaceId = Identifier.toJSON(message.interfaceId);
    }
    if (message.viewStatus !== undefined) {
      obj.viewStatus = Status.toJSON(message.viewStatus);
    }
    if (message.viewValue !== undefined) {
      obj.viewValue = Record.toJSON(message.viewValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InterfaceView>, I>>(base?: I): InterfaceView {
    return InterfaceView.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InterfaceView>, I>>(object: I): InterfaceView {
    const message = createBaseInterfaceView();
    message.interfaceId = (object.interfaceId !== undefined && object.interfaceId !== null)
      ? Identifier.fromPartial(object.interfaceId)
      : undefined;
    message.viewStatus = (object.viewStatus !== undefined && object.viewStatus !== null)
      ? Status.fromPartial(object.viewStatus)
      : undefined;
    message.viewValue = (object.viewValue !== undefined && object.viewValue !== null)
      ? Record.fromPartial(object.viewValue)
      : undefined;
    return message;
  },
};

function createBaseArchivedEvent(): ArchivedEvent {
  return {
    offset: 0,
    nodeId: 0,
    contractId: "",
    templateId: undefined,
    witnessParties: [],
    packageName: "",
    implementedInterfaces: [],
  };
}

export const ArchivedEvent: MessageFns<ArchivedEvent> = {
  encode(message: ArchivedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.offset !== 0) {
      writer.uint32(8).int64(message.offset);
    }
    if (message.nodeId !== 0) {
      writer.uint32(16).int32(message.nodeId);
    }
    if (message.contractId !== "") {
      writer.uint32(26).string(message.contractId);
    }
    if (message.templateId !== undefined) {
      Identifier.encode(message.templateId, writer.uint32(34).fork()).join();
    }
    for (const v of message.witnessParties) {
      writer.uint32(42).string(v!);
    }
    if (message.packageName !== "") {
      writer.uint32(50).string(message.packageName);
    }
    for (const v of message.implementedInterfaces) {
      Identifier.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArchivedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArchivedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contractId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.templateId = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.witnessParties.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.packageName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.implementedInterfaces.push(Identifier.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArchivedEvent {
    return {
      offset: isSet(object.offset) ? gt.Number(object.offset) : 0,
      nodeId: isSet(object.nodeId) ? gt.Number(object.nodeId) : 0,
      contractId: isSet(object.contractId) ? gt.String(object.contractId) : "",
      templateId: isSet(object.templateId) ? Identifier.fromJSON(object.templateId) : undefined,
      witnessParties: gt.Array.isArray(object?.witnessParties)
        ? object.witnessParties.map((e: any) => gt.String(e))
        : [],
      packageName: isSet(object.packageName) ? gt.String(object.packageName) : "",
      implementedInterfaces: gt.Array.isArray(object?.implementedInterfaces)
        ? object.implementedInterfaces.map((e: any) => Identifier.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ArchivedEvent): unknown {
    const obj: any = {};
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.contractId !== "") {
      obj.contractId = message.contractId;
    }
    if (message.templateId !== undefined) {
      obj.templateId = Identifier.toJSON(message.templateId);
    }
    if (message.witnessParties?.length) {
      obj.witnessParties = message.witnessParties;
    }
    if (message.packageName !== "") {
      obj.packageName = message.packageName;
    }
    if (message.implementedInterfaces?.length) {
      obj.implementedInterfaces = message.implementedInterfaces.map((e) => Identifier.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArchivedEvent>, I>>(base?: I): ArchivedEvent {
    return ArchivedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArchivedEvent>, I>>(object: I): ArchivedEvent {
    const message = createBaseArchivedEvent();
    message.offset = object.offset ?? 0;
    message.nodeId = object.nodeId ?? 0;
    message.contractId = object.contractId ?? "";
    message.templateId = (object.templateId !== undefined && object.templateId !== null)
      ? Identifier.fromPartial(object.templateId)
      : undefined;
    message.witnessParties = object.witnessParties?.map((e) => e) || [];
    message.packageName = object.packageName ?? "";
    message.implementedInterfaces = object.implementedInterfaces?.map((e) => Identifier.fromPartial(e)) || [];
    return message;
  },
};

function createBaseExercisedEvent(): ExercisedEvent {
  return {
    offset: 0,
    nodeId: 0,
    contractId: "",
    templateId: undefined,
    interfaceId: undefined,
    choice: "",
    choiceArgument: undefined,
    actingParties: [],
    consuming: false,
    witnessParties: [],
    lastDescendantNodeId: 0,
    exerciseResult: undefined,
    packageName: "",
    implementedInterfaces: [],
  };
}

export const ExercisedEvent: MessageFns<ExercisedEvent> = {
  encode(message: ExercisedEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.offset !== 0) {
      writer.uint32(8).int64(message.offset);
    }
    if (message.nodeId !== 0) {
      writer.uint32(16).int32(message.nodeId);
    }
    if (message.contractId !== "") {
      writer.uint32(26).string(message.contractId);
    }
    if (message.templateId !== undefined) {
      Identifier.encode(message.templateId, writer.uint32(34).fork()).join();
    }
    if (message.interfaceId !== undefined) {
      Identifier.encode(message.interfaceId, writer.uint32(42).fork()).join();
    }
    if (message.choice !== "") {
      writer.uint32(50).string(message.choice);
    }
    if (message.choiceArgument !== undefined) {
      Value.encode(message.choiceArgument, writer.uint32(58).fork()).join();
    }
    for (const v of message.actingParties) {
      writer.uint32(66).string(v!);
    }
    if (message.consuming !== false) {
      writer.uint32(72).bool(message.consuming);
    }
    for (const v of message.witnessParties) {
      writer.uint32(82).string(v!);
    }
    if (message.lastDescendantNodeId !== 0) {
      writer.uint32(88).int32(message.lastDescendantNodeId);
    }
    if (message.exerciseResult !== undefined) {
      Value.encode(message.exerciseResult, writer.uint32(98).fork()).join();
    }
    if (message.packageName !== "") {
      writer.uint32(106).string(message.packageName);
    }
    for (const v of message.implementedInterfaces) {
      Identifier.encode(v!, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExercisedEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExercisedEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nodeId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contractId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.templateId = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.interfaceId = Identifier.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.choice = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.choiceArgument = Value.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.actingParties.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.consuming = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.witnessParties.push(reader.string());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.lastDescendantNodeId = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.exerciseResult = Value.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.packageName = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.implementedInterfaces.push(Identifier.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExercisedEvent {
    return {
      offset: isSet(object.offset) ? gt.Number(object.offset) : 0,
      nodeId: isSet(object.nodeId) ? gt.Number(object.nodeId) : 0,
      contractId: isSet(object.contractId) ? gt.String(object.contractId) : "",
      templateId: isSet(object.templateId) ? Identifier.fromJSON(object.templateId) : undefined,
      interfaceId: isSet(object.interfaceId) ? Identifier.fromJSON(object.interfaceId) : undefined,
      choice: isSet(object.choice) ? gt.String(object.choice) : "",
      choiceArgument: isSet(object.choiceArgument) ? Value.fromJSON(object.choiceArgument) : undefined,
      actingParties: gt.Array.isArray(object?.actingParties) ? object.actingParties.map((e: any) => gt.String(e)) : [],
      consuming: isSet(object.consuming) ? gt.Boolean(object.consuming) : false,
      witnessParties: gt.Array.isArray(object?.witnessParties)
        ? object.witnessParties.map((e: any) => gt.String(e))
        : [],
      lastDescendantNodeId: isSet(object.lastDescendantNodeId) ? gt.Number(object.lastDescendantNodeId) : 0,
      exerciseResult: isSet(object.exerciseResult) ? Value.fromJSON(object.exerciseResult) : undefined,
      packageName: isSet(object.packageName) ? gt.String(object.packageName) : "",
      implementedInterfaces: gt.Array.isArray(object?.implementedInterfaces)
        ? object.implementedInterfaces.map((e: any) => Identifier.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ExercisedEvent): unknown {
    const obj: any = {};
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.nodeId !== 0) {
      obj.nodeId = Math.round(message.nodeId);
    }
    if (message.contractId !== "") {
      obj.contractId = message.contractId;
    }
    if (message.templateId !== undefined) {
      obj.templateId = Identifier.toJSON(message.templateId);
    }
    if (message.interfaceId !== undefined) {
      obj.interfaceId = Identifier.toJSON(message.interfaceId);
    }
    if (message.choice !== "") {
      obj.choice = message.choice;
    }
    if (message.choiceArgument !== undefined) {
      obj.choiceArgument = Value.toJSON(message.choiceArgument);
    }
    if (message.actingParties?.length) {
      obj.actingParties = message.actingParties;
    }
    if (message.consuming !== false) {
      obj.consuming = message.consuming;
    }
    if (message.witnessParties?.length) {
      obj.witnessParties = message.witnessParties;
    }
    if (message.lastDescendantNodeId !== 0) {
      obj.lastDescendantNodeId = Math.round(message.lastDescendantNodeId);
    }
    if (message.exerciseResult !== undefined) {
      obj.exerciseResult = Value.toJSON(message.exerciseResult);
    }
    if (message.packageName !== "") {
      obj.packageName = message.packageName;
    }
    if (message.implementedInterfaces?.length) {
      obj.implementedInterfaces = message.implementedInterfaces.map((e) => Identifier.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExercisedEvent>, I>>(base?: I): ExercisedEvent {
    return ExercisedEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExercisedEvent>, I>>(object: I): ExercisedEvent {
    const message = createBaseExercisedEvent();
    message.offset = object.offset ?? 0;
    message.nodeId = object.nodeId ?? 0;
    message.contractId = object.contractId ?? "";
    message.templateId = (object.templateId !== undefined && object.templateId !== null)
      ? Identifier.fromPartial(object.templateId)
      : undefined;
    message.interfaceId = (object.interfaceId !== undefined && object.interfaceId !== null)
      ? Identifier.fromPartial(object.interfaceId)
      : undefined;
    message.choice = object.choice ?? "";
    message.choiceArgument = (object.choiceArgument !== undefined && object.choiceArgument !== null)
      ? Value.fromPartial(object.choiceArgument)
      : undefined;
    message.actingParties = object.actingParties?.map((e) => e) || [];
    message.consuming = object.consuming ?? false;
    message.witnessParties = object.witnessParties?.map((e) => e) || [];
    message.lastDescendantNodeId = object.lastDescendantNodeId ?? 0;
    message.exerciseResult = (object.exerciseResult !== undefined && object.exerciseResult !== null)
      ? Value.fromPartial(object.exerciseResult)
      : undefined;
    message.packageName = object.packageName ?? "";
    message.implementedInterfaces = object.implementedInterfaces?.map((e) => Identifier.fromPartial(e)) || [];
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

function bytesFromBase64(b64: string): Uint8Array {
  const bin = gt.atob(b64);
  const arr = new Uint8Array(bin.length);
  for (let i = 0; i < bin.length; ++i) {
    arr[i] = bin.charCodeAt(i);
  }
  return arr;
}

function base64FromBytes(arr: Uint8Array): string {
  const bin: string[] = [];
  arr.forEach((byte) => {
    bin.push(gt.String.fromCharCode(byte));
  });
  return gt.btoa(bin.join(""));
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
