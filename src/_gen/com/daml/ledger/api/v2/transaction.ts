// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/transaction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../../../../google/protobuf/timestamp";
import { CreatedEvent, Event, ExercisedEvent } from "./event";
import { TraceContext } from "./trace_context";

export const protobufPackage = "com.daml.ledger.api.v2";

/**
 * Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
 * Each tree event message type below contains a ``witness_parties`` field which
 * indicates the subset of the requested parties that can see the event
 * in question.
 *
 * Note that transaction trees might contain events with
 * _no_ witness parties, which were included simply because they were
 * children of events which have witnesses.
 */
export interface TreeEvent {
  /**
   * The event as it appeared in the context of its original daml transaction on this participant node.
   * In particular, the offset, node_id pair of the daml transaction are preserved.
   */
  created?: CreatedEvent | undefined;
  exercised?: ExercisedEvent | undefined;
}

/**
 * Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
 * Complete view of an on-ledger transaction.
 */
export interface TransactionTree {
  /**
   * Assigned by the server. Useful for correlating logs.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Required
   */
  updateId: string;
  /**
   * The ID of the command which resulted in this transaction. Missing for everyone except the submitting party.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Optional
   */
  commandId: string;
  /**
   * The workflow ID used in command submission. Only set if the ``workflow_id`` for the command was set.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Optional
   */
  workflowId: string;
  /**
   * Ledger effective time.
   * Required
   */
  effectiveAt:
    | Date
    | undefined;
  /**
   * The absolute offset. The details of this field are described in ``community/ledger-api/README.md``.
   * Required, it is a valid absolute offset (positive integer).
   */
  offset: number;
  /**
   * Changes to the ledger that were caused by this transaction. Nodes of the transaction tree.
   * Each key must be a valid node ID (non-negative integer).
   * Required
   */
  eventsById: { [key: number]: TreeEvent };
  /**
   * A valid synchronizer id.
   * Identifies the synchronizer that synchronized the transaction.
   * Required
   */
  synchronizerId: string;
  /**
   * Optional; ledger API trace context
   *
   * The trace context transported in this message corresponds to the trace context supplied
   * by the client application in a HTTP2 header of the original command submission.
   * We typically use a header to transfer this type of information. Here we use message
   * body, because it is used in gRPC streams which do not support per message headers.
   * This field will be populated with the trace context contained in the original submission.
   * If that was not provided, a unique ledger-api-server generated trace context will be used
   * instead.
   */
  traceContext:
    | TraceContext
    | undefined;
  /**
   * The time at which the transaction was recorded. The record time refers to the synchronizer
   * which synchronized the transaction.
   * Required
   */
  recordTime: Date | undefined;
}

export interface TransactionTree_EventsByIdEntry {
  key: number;
  value: TreeEvent | undefined;
}

/** Filtered view of an on-ledger transaction's create and archive events. */
export interface Transaction {
  /**
   * Assigned by the server. Useful for correlating logs.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Required
   */
  updateId: string;
  /**
   * The ID of the command which resulted in this transaction. Missing for everyone except the submitting party.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Optional
   */
  commandId: string;
  /**
   * The workflow ID used in command submission.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Optional
   */
  workflowId: string;
  /**
   * Ledger effective time.
   * Required
   */
  effectiveAt:
    | Date
    | undefined;
  /**
   * The collection of events.
   * Contains:
   *
   * - ``CreatedEvent`` or ``ArchivedEvent`` in case of ACS_DELTA transaction shape
   * - ``CreatedEvent`` or ``ExercisedEvent`` in case of LEDGER_EFFECTS transaction shape
   *
   * Required
   */
  events: Event[];
  /**
   * The absolute offset. The details of this field are described in ``community/ledger-api/README.md``.
   * Required, it is a valid absolute offset (positive integer).
   */
  offset: number;
  /**
   * A valid synchronizer id.
   * Identifies the synchronizer that synchronized the transaction.
   * Required
   */
  synchronizerId: string;
  /**
   * Optional; ledger API trace context
   *
   * The trace context transported in this message corresponds to the trace context supplied
   * by the client application in a HTTP2 header of the original command submission.
   * We typically use a header to transfer this type of information. Here we use message
   * body, because it is used in gRPC streams which do not support per message headers.
   * This field will be populated with the trace context contained in the original submission.
   * If that was not provided, a unique ledger-api-server generated trace context will be used
   * instead.
   */
  traceContext:
    | TraceContext
    | undefined;
  /**
   * The time at which the transaction was recorded. The record time refers to the synchronizer
   * which synchronized the transaction.
   * Required
   */
  recordTime: Date | undefined;
}

function createBaseTreeEvent(): TreeEvent {
  return { created: undefined, exercised: undefined };
}

export const TreeEvent: MessageFns<TreeEvent> = {
  encode(message: TreeEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.created !== undefined) {
      CreatedEvent.encode(message.created, writer.uint32(10).fork()).join();
    }
    if (message.exercised !== undefined) {
      ExercisedEvent.encode(message.exercised, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TreeEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTreeEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.created = CreatedEvent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.exercised = ExercisedEvent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TreeEvent {
    return {
      created: isSet(object.created) ? CreatedEvent.fromJSON(object.created) : undefined,
      exercised: isSet(object.exercised) ? ExercisedEvent.fromJSON(object.exercised) : undefined,
    };
  },

  toJSON(message: TreeEvent): unknown {
    const obj: any = {};
    if (message.created !== undefined) {
      obj.created = CreatedEvent.toJSON(message.created);
    }
    if (message.exercised !== undefined) {
      obj.exercised = ExercisedEvent.toJSON(message.exercised);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TreeEvent>, I>>(base?: I): TreeEvent {
    return TreeEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TreeEvent>, I>>(object: I): TreeEvent {
    const message = createBaseTreeEvent();
    message.created = (object.created !== undefined && object.created !== null)
      ? CreatedEvent.fromPartial(object.created)
      : undefined;
    message.exercised = (object.exercised !== undefined && object.exercised !== null)
      ? ExercisedEvent.fromPartial(object.exercised)
      : undefined;
    return message;
  },
};

function createBaseTransactionTree(): TransactionTree {
  return {
    updateId: "",
    commandId: "",
    workflowId: "",
    effectiveAt: undefined,
    offset: 0,
    eventsById: {},
    synchronizerId: "",
    traceContext: undefined,
    recordTime: undefined,
  };
}

export const TransactionTree: MessageFns<TransactionTree> = {
  encode(message: TransactionTree, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateId !== "") {
      writer.uint32(10).string(message.updateId);
    }
    if (message.commandId !== "") {
      writer.uint32(18).string(message.commandId);
    }
    if (message.workflowId !== "") {
      writer.uint32(26).string(message.workflowId);
    }
    if (message.effectiveAt !== undefined) {
      Timestamp.encode(toTimestamp(message.effectiveAt), writer.uint32(34).fork()).join();
    }
    if (message.offset !== 0) {
      writer.uint32(40).int64(message.offset);
    }
    Object.entries(message.eventsById).forEach(([key, value]) => {
      TransactionTree_EventsByIdEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.synchronizerId !== "") {
      writer.uint32(58).string(message.synchronizerId);
    }
    if (message.traceContext !== undefined) {
      TraceContext.encode(message.traceContext, writer.uint32(66).fork()).join();
    }
    if (message.recordTime !== undefined) {
      Timestamp.encode(toTimestamp(message.recordTime), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionTree {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionTree();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.updateId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.commandId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.workflowId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.effectiveAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = TransactionTree_EventsByIdEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.eventsById[entry6.key] = entry6.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.synchronizerId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.traceContext = TraceContext.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.recordTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionTree {
    return {
      updateId: isSet(object.updateId) ? gt.String(object.updateId) : "",
      commandId: isSet(object.commandId) ? gt.String(object.commandId) : "",
      workflowId: isSet(object.workflowId) ? gt.String(object.workflowId) : "",
      effectiveAt: isSet(object.effectiveAt) ? fromJsonTimestamp(object.effectiveAt) : undefined,
      offset: isSet(object.offset) ? gt.Number(object.offset) : 0,
      eventsById: isObject(object.eventsById)
        ? Object.entries(object.eventsById).reduce<{ [key: number]: TreeEvent }>((acc, [key, value]) => {
          acc[gt.Number(key)] = TreeEvent.fromJSON(value);
          return acc;
        }, {})
        : {},
      synchronizerId: isSet(object.synchronizerId) ? gt.String(object.synchronizerId) : "",
      traceContext: isSet(object.traceContext) ? TraceContext.fromJSON(object.traceContext) : undefined,
      recordTime: isSet(object.recordTime) ? fromJsonTimestamp(object.recordTime) : undefined,
    };
  },

  toJSON(message: TransactionTree): unknown {
    const obj: any = {};
    if (message.updateId !== "") {
      obj.updateId = message.updateId;
    }
    if (message.commandId !== "") {
      obj.commandId = message.commandId;
    }
    if (message.workflowId !== "") {
      obj.workflowId = message.workflowId;
    }
    if (message.effectiveAt !== undefined) {
      obj.effectiveAt = message.effectiveAt.toISOString();
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.eventsById) {
      const entries = Object.entries(message.eventsById);
      if (entries.length > 0) {
        obj.eventsById = {};
        entries.forEach(([k, v]) => {
          obj.eventsById[k] = TreeEvent.toJSON(v);
        });
      }
    }
    if (message.synchronizerId !== "") {
      obj.synchronizerId = message.synchronizerId;
    }
    if (message.traceContext !== undefined) {
      obj.traceContext = TraceContext.toJSON(message.traceContext);
    }
    if (message.recordTime !== undefined) {
      obj.recordTime = message.recordTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionTree>, I>>(base?: I): TransactionTree {
    return TransactionTree.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionTree>, I>>(object: I): TransactionTree {
    const message = createBaseTransactionTree();
    message.updateId = object.updateId ?? "";
    message.commandId = object.commandId ?? "";
    message.workflowId = object.workflowId ?? "";
    message.effectiveAt = object.effectiveAt ?? undefined;
    message.offset = object.offset ?? 0;
    message.eventsById = Object.entries(object.eventsById ?? {}).reduce<{ [key: number]: TreeEvent }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[gt.Number(key)] = TreeEvent.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.synchronizerId = object.synchronizerId ?? "";
    message.traceContext = (object.traceContext !== undefined && object.traceContext !== null)
      ? TraceContext.fromPartial(object.traceContext)
      : undefined;
    message.recordTime = object.recordTime ?? undefined;
    return message;
  },
};

function createBaseTransactionTree_EventsByIdEntry(): TransactionTree_EventsByIdEntry {
  return { key: 0, value: undefined };
}

export const TransactionTree_EventsByIdEntry: MessageFns<TransactionTree_EventsByIdEntry> = {
  encode(message: TransactionTree_EventsByIdEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      TreeEvent.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionTree_EventsByIdEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionTree_EventsByIdEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = TreeEvent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionTree_EventsByIdEntry {
    return {
      key: isSet(object.key) ? gt.Number(object.key) : 0,
      value: isSet(object.value) ? TreeEvent.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: TransactionTree_EventsByIdEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = TreeEvent.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionTree_EventsByIdEntry>, I>>(base?: I): TransactionTree_EventsByIdEntry {
    return TransactionTree_EventsByIdEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionTree_EventsByIdEntry>, I>>(
    object: I,
  ): TransactionTree_EventsByIdEntry {
    const message = createBaseTransactionTree_EventsByIdEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? TreeEvent.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseTransaction(): Transaction {
  return {
    updateId: "",
    commandId: "",
    workflowId: "",
    effectiveAt: undefined,
    events: [],
    offset: 0,
    synchronizerId: "",
    traceContext: undefined,
    recordTime: undefined,
  };
}

export const Transaction: MessageFns<Transaction> = {
  encode(message: Transaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateId !== "") {
      writer.uint32(10).string(message.updateId);
    }
    if (message.commandId !== "") {
      writer.uint32(18).string(message.commandId);
    }
    if (message.workflowId !== "") {
      writer.uint32(26).string(message.workflowId);
    }
    if (message.effectiveAt !== undefined) {
      Timestamp.encode(toTimestamp(message.effectiveAt), writer.uint32(34).fork()).join();
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.offset !== 0) {
      writer.uint32(48).int64(message.offset);
    }
    if (message.synchronizerId !== "") {
      writer.uint32(58).string(message.synchronizerId);
    }
    if (message.traceContext !== undefined) {
      TraceContext.encode(message.traceContext, writer.uint32(66).fork()).join();
    }
    if (message.recordTime !== undefined) {
      Timestamp.encode(toTimestamp(message.recordTime), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.updateId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.commandId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.workflowId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.effectiveAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.synchronizerId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.traceContext = TraceContext.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.recordTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transaction {
    return {
      updateId: isSet(object.updateId) ? gt.String(object.updateId) : "",
      commandId: isSet(object.commandId) ? gt.String(object.commandId) : "",
      workflowId: isSet(object.workflowId) ? gt.String(object.workflowId) : "",
      effectiveAt: isSet(object.effectiveAt) ? fromJsonTimestamp(object.effectiveAt) : undefined,
      events: gt.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
      offset: isSet(object.offset) ? gt.Number(object.offset) : 0,
      synchronizerId: isSet(object.synchronizerId) ? gt.String(object.synchronizerId) : "",
      traceContext: isSet(object.traceContext) ? TraceContext.fromJSON(object.traceContext) : undefined,
      recordTime: isSet(object.recordTime) ? fromJsonTimestamp(object.recordTime) : undefined,
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.updateId !== "") {
      obj.updateId = message.updateId;
    }
    if (message.commandId !== "") {
      obj.commandId = message.commandId;
    }
    if (message.workflowId !== "") {
      obj.workflowId = message.workflowId;
    }
    if (message.effectiveAt !== undefined) {
      obj.effectiveAt = message.effectiveAt.toISOString();
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.synchronizerId !== "") {
      obj.synchronizerId = message.synchronizerId;
    }
    if (message.traceContext !== undefined) {
      obj.traceContext = TraceContext.toJSON(message.traceContext);
    }
    if (message.recordTime !== undefined) {
      obj.recordTime = message.recordTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transaction>, I>>(base?: I): Transaction {
    return Transaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transaction>, I>>(object: I): Transaction {
    const message = createBaseTransaction();
    message.updateId = object.updateId ?? "";
    message.commandId = object.commandId ?? "";
    message.workflowId = object.workflowId ?? "";
    message.effectiveAt = object.effectiveAt ?? undefined;
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    message.offset = object.offset ?? 0;
    message.synchronizerId = object.synchronizerId ?? "";
    message.traceContext = (object.traceContext !== undefined && object.traceContext !== null)
      ? TraceContext.fromPartial(object.traceContext)
      : undefined;
    message.recordTime = object.recordTime ?? undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
