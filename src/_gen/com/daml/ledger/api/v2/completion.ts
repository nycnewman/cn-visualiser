// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/completion.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../../google/protobuf/duration";
import { Status } from "../../../../../google/rpc/status";
import { SynchronizerTime } from "./offset_checkpoint";
import { TraceContext } from "./trace_context";

export const protobufPackage = "com.daml.ledger.api.v2";

/** A completion represents the status of a submitted command on the ledger: it can be successful or failed. */
export interface Completion {
  /**
   * The ID of the succeeded or failed command.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Required
   */
  commandId: string;
  /**
   * Identifies the exact type of the error.
   * It uses the same format of conveying error details as it is used for the RPC responses of the APIs.
   * Optional
   */
  status:
    | Status
    | undefined;
  /**
   * The update_id of the transaction or reassignment that resulted from the command with command_id.
   * Only set for successfully executed commands.
   * Must be a valid LedgerString (as described in ``value.proto``).
   */
  updateId: string;
  /**
   * The user-id that was used for the submission, as described in ``commands.proto``.
   * Must be a valid UserIdString (as described in ``value.proto``).
   * Optional for historic completions where this data is not available.
   */
  userId: string;
  /**
   * The set of parties on whose behalf the commands were executed.
   * Contains the ``act_as`` parties from ``commands.proto``
   * filtered to the requesting parties in CompletionStreamRequest.
   * The order of the parties need not be the same as in the submission.
   * Each element must be a valid PartyIdString (as described in ``value.proto``).
   * Optional for historic completions where this data is not available.
   */
  actAs: string[];
  /**
   * The submission ID this completion refers to, as described in ``commands.proto``.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Optional
   */
  submissionId: string;
  /**
   * Specifies the start of the deduplication period by a completion stream offset (exclusive).
   *
   * Must be a valid absolute offset (positive integer) or participant begin (zero).
   */
  deduplicationOffset?:
    | number
    | undefined;
  /**
   * Specifies the length of the deduplication period.
   * It is measured in record time of completions.
   *
   * Must be non-negative.
   */
  deduplicationDuration?:
    | Duration
    | undefined;
  /**
   * Optional; ledger API trace context
   *
   * The trace context transported in this message corresponds to the trace context supplied
   * by the client application in a HTTP2 header of the original command submission.
   * We typically use a header to transfer this type of information. Here we use message
   * body, because it is used in gRPC streams which do not support per message headers.
   * This field will be populated with the trace context contained in the original submission.
   * If that was not provided, a unique ledger-api-server generated trace context will be used
   * instead.
   */
  traceContext:
    | TraceContext
    | undefined;
  /**
   * May be used in a subsequent CompletionStreamRequest to resume the consumption of this stream at a later time.
   * Required, must be a valid absolute offset (positive integer).
   */
  offset: number;
  /**
   * The synchronizer along with its record time.
   * The synchronizer id provided, in case of
   *
   * - successful/failed transactions: identifies the synchronizer of the transaction
   * - for successful/failed unassign commands: identifies the source synchronizer
   * - for successful/failed assign commands: identifies the target synchronizer
   *
   * Required
   */
  synchronizerTime: SynchronizerTime | undefined;
}

function createBaseCompletion(): Completion {
  return {
    commandId: "",
    status: undefined,
    updateId: "",
    userId: "",
    actAs: [],
    submissionId: "",
    deduplicationOffset: undefined,
    deduplicationDuration: undefined,
    traceContext: undefined,
    offset: 0,
    synchronizerTime: undefined,
  };
}

export const Completion: MessageFns<Completion> = {
  encode(message: Completion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commandId !== "") {
      writer.uint32(10).string(message.commandId);
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(18).fork()).join();
    }
    if (message.updateId !== "") {
      writer.uint32(26).string(message.updateId);
    }
    if (message.userId !== "") {
      writer.uint32(34).string(message.userId);
    }
    for (const v of message.actAs) {
      writer.uint32(42).string(v!);
    }
    if (message.submissionId !== "") {
      writer.uint32(50).string(message.submissionId);
    }
    if (message.deduplicationOffset !== undefined) {
      writer.uint32(56).int64(message.deduplicationOffset);
    }
    if (message.deduplicationDuration !== undefined) {
      Duration.encode(message.deduplicationDuration, writer.uint32(66).fork()).join();
    }
    if (message.traceContext !== undefined) {
      TraceContext.encode(message.traceContext, writer.uint32(74).fork()).join();
    }
    if (message.offset !== 0) {
      writer.uint32(80).int64(message.offset);
    }
    if (message.synchronizerTime !== undefined) {
      SynchronizerTime.encode(message.synchronizerTime, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Completion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompletion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commandId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.actAs.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.submissionId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.deduplicationOffset = longToNumber(reader.int64());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.deduplicationDuration = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.traceContext = TraceContext.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.offset = longToNumber(reader.int64());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.synchronizerTime = SynchronizerTime.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Completion {
    return {
      commandId: isSet(object.commandId) ? gt.String(object.commandId) : "",
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      updateId: isSet(object.updateId) ? gt.String(object.updateId) : "",
      userId: isSet(object.userId) ? gt.String(object.userId) : "",
      actAs: gt.Array.isArray(object?.actAs) ? object.actAs.map((e: any) => gt.String(e)) : [],
      submissionId: isSet(object.submissionId) ? gt.String(object.submissionId) : "",
      deduplicationOffset: isSet(object.deduplicationOffset) ? gt.Number(object.deduplicationOffset) : undefined,
      deduplicationDuration: isSet(object.deduplicationDuration)
        ? Duration.fromJSON(object.deduplicationDuration)
        : undefined,
      traceContext: isSet(object.traceContext) ? TraceContext.fromJSON(object.traceContext) : undefined,
      offset: isSet(object.offset) ? gt.Number(object.offset) : 0,
      synchronizerTime: isSet(object.synchronizerTime) ? SynchronizerTime.fromJSON(object.synchronizerTime) : undefined,
    };
  },

  toJSON(message: Completion): unknown {
    const obj: any = {};
    if (message.commandId !== "") {
      obj.commandId = message.commandId;
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.updateId !== "") {
      obj.updateId = message.updateId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.actAs?.length) {
      obj.actAs = message.actAs;
    }
    if (message.submissionId !== "") {
      obj.submissionId = message.submissionId;
    }
    if (message.deduplicationOffset !== undefined) {
      obj.deduplicationOffset = Math.round(message.deduplicationOffset);
    }
    if (message.deduplicationDuration !== undefined) {
      obj.deduplicationDuration = Duration.toJSON(message.deduplicationDuration);
    }
    if (message.traceContext !== undefined) {
      obj.traceContext = TraceContext.toJSON(message.traceContext);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.synchronizerTime !== undefined) {
      obj.synchronizerTime = SynchronizerTime.toJSON(message.synchronizerTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Completion>, I>>(base?: I): Completion {
    return Completion.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Completion>, I>>(object: I): Completion {
    const message = createBaseCompletion();
    message.commandId = object.commandId ?? "";
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.updateId = object.updateId ?? "";
    message.userId = object.userId ?? "";
    message.actAs = object.actAs?.map((e) => e) || [];
    message.submissionId = object.submissionId ?? "";
    message.deduplicationOffset = object.deduplicationOffset ?? undefined;
    message.deduplicationDuration =
      (object.deduplicationDuration !== undefined && object.deduplicationDuration !== null)
        ? Duration.fromPartial(object.deduplicationDuration)
        : undefined;
    message.traceContext = (object.traceContext !== undefined && object.traceContext !== null)
      ? TraceContext.fromPartial(object.traceContext)
      : undefined;
    message.offset = object.offset ?? 0;
    message.synchronizerTime = (object.synchronizerTime !== undefined && object.synchronizerTime !== null)
      ? SynchronizerTime.fromPartial(object.synchronizerTime)
      : undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
