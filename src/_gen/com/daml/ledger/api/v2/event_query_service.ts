// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/event_query_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ArchivedEvent, CreatedEvent } from "./event";
import { EventFormat } from "./transaction_filter";

export const protobufPackage = "com.daml.ledger.api.v2";

export interface GetEventsByContractIdRequest {
  /**
   * The contract id being queried.
   * Required
   */
  contractId: string;
  /**
   * Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
   * The parties whose events the client expects to see.
   * The events associated with the contract id will only be returned if the requesting parties includes
   * at least one party that is a stakeholder of the event. For a definition of stakeholders see
   * https://docs.daml.com/concepts/ledger-model/ledger-privacy.html#contract-observers-and-stakeholders
   * Optional, if some parties specified, event_format needs to be unset.
   */
  requestingParties: string[];
  /**
   * Format of the events in the result, the presentation will be of TRANSACTION_SHAPE_ACS_DELTA.
   * Optional for backwards compatibility, defaults to an EventFormat where:
   *
   * - filters_by_party is a template-wildcard filter for all requesting_parties
   * - filters_for_any_party is unset
   * - verbose is set
   */
  eventFormat: EventFormat | undefined;
}

export interface GetEventsByContractIdResponse {
  /**
   * The create event for the contract with the ``contract_id`` given in the request
   * provided it exists and has not yet been pruned.
   * Optional
   */
  created:
    | Created
    | undefined;
  /**
   * The archive event for the contract with the ``contract_id`` given in the request
   * provided such an archive event exists and it has not yet been pruned.
   * Optional
   */
  archived: Archived | undefined;
}

export interface Created {
  /**
   * Required
   * The event as it appeared in the context of its original update (i.e. daml transaction or
   * reassignment) on this participant node. You can use its offset and node_id to find the
   * corresponding update and the node within it.
   */
  createdEvent:
    | CreatedEvent
    | undefined;
  /**
   * The synchronizer which sequenced the creation of the contract
   * Required
   */
  synchronizerId: string;
}

export interface Archived {
  /** Required */
  archivedEvent:
    | ArchivedEvent
    | undefined;
  /**
   * Required
   * The synchronizer which sequenced the archival of the contract
   */
  synchronizerId: string;
}

function createBaseGetEventsByContractIdRequest(): GetEventsByContractIdRequest {
  return { contractId: "", requestingParties: [], eventFormat: undefined };
}

export const GetEventsByContractIdRequest: MessageFns<GetEventsByContractIdRequest> = {
  encode(message: GetEventsByContractIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contractId !== "") {
      writer.uint32(10).string(message.contractId);
    }
    for (const v of message.requestingParties) {
      writer.uint32(18).string(v!);
    }
    if (message.eventFormat !== undefined) {
      EventFormat.encode(message.eventFormat, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventsByContractIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventsByContractIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contractId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requestingParties.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventFormat = EventFormat.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventsByContractIdRequest {
    return {
      contractId: isSet(object.contractId) ? gt.String(object.contractId) : "",
      requestingParties: gt.Array.isArray(object?.requestingParties)
        ? object.requestingParties.map((e: any) => gt.String(e))
        : [],
      eventFormat: isSet(object.eventFormat) ? EventFormat.fromJSON(object.eventFormat) : undefined,
    };
  },

  toJSON(message: GetEventsByContractIdRequest): unknown {
    const obj: any = {};
    if (message.contractId !== "") {
      obj.contractId = message.contractId;
    }
    if (message.requestingParties?.length) {
      obj.requestingParties = message.requestingParties;
    }
    if (message.eventFormat !== undefined) {
      obj.eventFormat = EventFormat.toJSON(message.eventFormat);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventsByContractIdRequest>, I>>(base?: I): GetEventsByContractIdRequest {
    return GetEventsByContractIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventsByContractIdRequest>, I>>(object: I): GetEventsByContractIdRequest {
    const message = createBaseGetEventsByContractIdRequest();
    message.contractId = object.contractId ?? "";
    message.requestingParties = object.requestingParties?.map((e) => e) || [];
    message.eventFormat = (object.eventFormat !== undefined && object.eventFormat !== null)
      ? EventFormat.fromPartial(object.eventFormat)
      : undefined;
    return message;
  },
};

function createBaseGetEventsByContractIdResponse(): GetEventsByContractIdResponse {
  return { created: undefined, archived: undefined };
}

export const GetEventsByContractIdResponse: MessageFns<GetEventsByContractIdResponse> = {
  encode(message: GetEventsByContractIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.created !== undefined) {
      Created.encode(message.created, writer.uint32(10).fork()).join();
    }
    if (message.archived !== undefined) {
      Archived.encode(message.archived, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventsByContractIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventsByContractIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.created = Created.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.archived = Archived.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventsByContractIdResponse {
    return {
      created: isSet(object.created) ? Created.fromJSON(object.created) : undefined,
      archived: isSet(object.archived) ? Archived.fromJSON(object.archived) : undefined,
    };
  },

  toJSON(message: GetEventsByContractIdResponse): unknown {
    const obj: any = {};
    if (message.created !== undefined) {
      obj.created = Created.toJSON(message.created);
    }
    if (message.archived !== undefined) {
      obj.archived = Archived.toJSON(message.archived);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventsByContractIdResponse>, I>>(base?: I): GetEventsByContractIdResponse {
    return GetEventsByContractIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventsByContractIdResponse>, I>>(
    object: I,
  ): GetEventsByContractIdResponse {
    const message = createBaseGetEventsByContractIdResponse();
    message.created = (object.created !== undefined && object.created !== null)
      ? Created.fromPartial(object.created)
      : undefined;
    message.archived = (object.archived !== undefined && object.archived !== null)
      ? Archived.fromPartial(object.archived)
      : undefined;
    return message;
  },
};

function createBaseCreated(): Created {
  return { createdEvent: undefined, synchronizerId: "" };
}

export const Created: MessageFns<Created> = {
  encode(message: Created, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createdEvent !== undefined) {
      CreatedEvent.encode(message.createdEvent, writer.uint32(10).fork()).join();
    }
    if (message.synchronizerId !== "") {
      writer.uint32(18).string(message.synchronizerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Created {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.createdEvent = CreatedEvent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.synchronizerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Created {
    return {
      createdEvent: isSet(object.createdEvent) ? CreatedEvent.fromJSON(object.createdEvent) : undefined,
      synchronizerId: isSet(object.synchronizerId) ? gt.String(object.synchronizerId) : "",
    };
  },

  toJSON(message: Created): unknown {
    const obj: any = {};
    if (message.createdEvent !== undefined) {
      obj.createdEvent = CreatedEvent.toJSON(message.createdEvent);
    }
    if (message.synchronizerId !== "") {
      obj.synchronizerId = message.synchronizerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Created>, I>>(base?: I): Created {
    return Created.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Created>, I>>(object: I): Created {
    const message = createBaseCreated();
    message.createdEvent = (object.createdEvent !== undefined && object.createdEvent !== null)
      ? CreatedEvent.fromPartial(object.createdEvent)
      : undefined;
    message.synchronizerId = object.synchronizerId ?? "";
    return message;
  },
};

function createBaseArchived(): Archived {
  return { archivedEvent: undefined, synchronizerId: "" };
}

export const Archived: MessageFns<Archived> = {
  encode(message: Archived, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.archivedEvent !== undefined) {
      ArchivedEvent.encode(message.archivedEvent, writer.uint32(10).fork()).join();
    }
    if (message.synchronizerId !== "") {
      writer.uint32(18).string(message.synchronizerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Archived {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArchived();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.archivedEvent = ArchivedEvent.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.synchronizerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Archived {
    return {
      archivedEvent: isSet(object.archivedEvent) ? ArchivedEvent.fromJSON(object.archivedEvent) : undefined,
      synchronizerId: isSet(object.synchronizerId) ? gt.String(object.synchronizerId) : "",
    };
  },

  toJSON(message: Archived): unknown {
    const obj: any = {};
    if (message.archivedEvent !== undefined) {
      obj.archivedEvent = ArchivedEvent.toJSON(message.archivedEvent);
    }
    if (message.synchronizerId !== "") {
      obj.synchronizerId = message.synchronizerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Archived>, I>>(base?: I): Archived {
    return Archived.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Archived>, I>>(object: I): Archived {
    const message = createBaseArchived();
    message.archivedEvent = (object.archivedEvent !== undefined && object.archivedEvent !== null)
      ? ArchivedEvent.fromPartial(object.archivedEvent)
      : undefined;
    message.synchronizerId = object.synchronizerId ?? "";
    return message;
  },
};

/**
 * Query events by contract id.
 *
 * Note that querying by contract key is not (yet) supported, as contract keys
 * are not supported (yet) in multi-synchronizer scenarios.
 */
export interface EventQueryService {
  /**
   * Get the create and the consuming exercise event for the contract with the provided ID.
   * No events will be returned for contracts that have been pruned because they
   * have already been archived before the latest pruning offset.
   * If the contract cannot be found for the request, or all the contract-events are filtered, a CONTRACT_EVENTS_NOT_FOUND error will be raised.
   */
  GetEventsByContractId(request: GetEventsByContractIdRequest): Promise<GetEventsByContractIdResponse>;
}

export const EventQueryServiceServiceName = "com.daml.ledger.api.v2.EventQueryService";
export class EventQueryServiceClientImpl implements EventQueryService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || EventQueryServiceServiceName;
    this.rpc = rpc;
    this.GetEventsByContractId = this.GetEventsByContractId.bind(this);
  }
  GetEventsByContractId(request: GetEventsByContractIdRequest): Promise<GetEventsByContractIdResponse> {
    const data = GetEventsByContractIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetEventsByContractId", data);
    return promise.then((data) => GetEventsByContractIdResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
