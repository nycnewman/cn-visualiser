// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/testing/time_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../../../../../google/protobuf/empty";
import { Timestamp } from "../../../../../../google/protobuf/timestamp";

export const protobufPackage = "com.daml.ledger.api.v2.testing";

export interface GetTimeRequest {
}

export interface GetTimeResponse {
  /** The current time according to the ledger server. */
  currentTime: Date | undefined;
}

export interface SetTimeRequest {
  /** MUST precisely match the current time as it's known to the ledger server. */
  currentTime:
    | Date
    | undefined;
  /**
   * The time the client wants to set on the ledger.
   * MUST be a point int time after ``current_time``.
   */
  newTime: Date | undefined;
}

function createBaseGetTimeRequest(): GetTimeRequest {
  return {};
}

export const GetTimeRequest: MessageFns<GetTimeRequest> = {
  encode(_: GetTimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetTimeRequest {
    return {};
  },

  toJSON(_: GetTimeRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTimeRequest>, I>>(base?: I): GetTimeRequest {
    return GetTimeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTimeRequest>, I>>(_: I): GetTimeRequest {
    const message = createBaseGetTimeRequest();
    return message;
  },
};

function createBaseGetTimeResponse(): GetTimeResponse {
  return { currentTime: undefined };
}

export const GetTimeResponse: MessageFns<GetTimeResponse> = {
  encode(message: GetTimeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentTime !== undefined) {
      Timestamp.encode(toTimestamp(message.currentTime), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTimeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTimeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.currentTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTimeResponse {
    return { currentTime: isSet(object.currentTime) ? fromJsonTimestamp(object.currentTime) : undefined };
  },

  toJSON(message: GetTimeResponse): unknown {
    const obj: any = {};
    if (message.currentTime !== undefined) {
      obj.currentTime = message.currentTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTimeResponse>, I>>(base?: I): GetTimeResponse {
    return GetTimeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTimeResponse>, I>>(object: I): GetTimeResponse {
    const message = createBaseGetTimeResponse();
    message.currentTime = object.currentTime ?? undefined;
    return message;
  },
};

function createBaseSetTimeRequest(): SetTimeRequest {
  return { currentTime: undefined, newTime: undefined };
}

export const SetTimeRequest: MessageFns<SetTimeRequest> = {
  encode(message: SetTimeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentTime !== undefined) {
      Timestamp.encode(toTimestamp(message.currentTime), writer.uint32(10).fork()).join();
    }
    if (message.newTime !== undefined) {
      Timestamp.encode(toTimestamp(message.newTime), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetTimeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetTimeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.currentTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.newTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetTimeRequest {
    return {
      currentTime: isSet(object.currentTime) ? fromJsonTimestamp(object.currentTime) : undefined,
      newTime: isSet(object.newTime) ? fromJsonTimestamp(object.newTime) : undefined,
    };
  },

  toJSON(message: SetTimeRequest): unknown {
    const obj: any = {};
    if (message.currentTime !== undefined) {
      obj.currentTime = message.currentTime.toISOString();
    }
    if (message.newTime !== undefined) {
      obj.newTime = message.newTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetTimeRequest>, I>>(base?: I): SetTimeRequest {
    return SetTimeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetTimeRequest>, I>>(object: I): SetTimeRequest {
    const message = createBaseSetTimeRequest();
    message.currentTime = object.currentTime ?? undefined;
    message.newTime = object.newTime ?? undefined;
    return message;
  },
};

/** Optional service, exposed for testing static time scenarios. */
export interface TimeService {
  /** Returns the current time according to the ledger server. */
  GetTime(request: GetTimeRequest): Promise<GetTimeResponse>;
  /** Allows clients to change the ledger's clock in an atomic get-and-set operation. */
  SetTime(request: SetTimeRequest): Promise<Empty>;
}

export const TimeServiceServiceName = "com.daml.ledger.api.v2.testing.TimeService";
export class TimeServiceClientImpl implements TimeService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TimeServiceServiceName;
    this.rpc = rpc;
    this.GetTime = this.GetTime.bind(this);
    this.SetTime = this.SetTime.bind(this);
  }
  GetTime(request: GetTimeRequest): Promise<GetTimeResponse> {
    const data = GetTimeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTime", data);
    return promise.then((data) => GetTimeResponse.decode(new BinaryReader(data)));
  }

  SetTime(request: SetTimeRequest): Promise<Empty> {
    const data = SetTimeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetTime", data);
    return promise.then((data) => Empty.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new gt.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof gt.Date) {
    return o;
  } else if (typeof o === "string") {
    return new gt.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
