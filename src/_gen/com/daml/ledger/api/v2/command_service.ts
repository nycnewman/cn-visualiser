// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/command_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Commands } from "./commands";
import { Reassignment } from "./reassignment";
import { ReassignmentCommands } from "./reassignment_commands";
import { Transaction, TransactionTree } from "./transaction";
import { EventFormat, TransactionFormat } from "./transaction_filter";

export const protobufPackage = "com.daml.ledger.api.v2";

/** These commands are executed as a single atomic transaction. */
export interface SubmitAndWaitRequest {
  /**
   * The commands to be submitted.
   * Required
   */
  commands: Commands | undefined;
}

/** These commands are executed as a single atomic transaction. */
export interface SubmitAndWaitForTransactionRequest {
  /**
   * The commands to be submitted.
   * Required
   */
  commands:
    | Commands
    | undefined;
  /**
   * If no ``transaction_format`` is provided, a default will be used where ``transaction_shape`` is set to
   * TRANSACTION_SHAPE_ACS_DELTA, ``event_format`` is defined with ``filters_by_party`` containing wildcard-template
   * filter for all original ``act_as`` and ``read_as`` parties and the ``verbose`` flag is set.
   * Optional
   */
  transactionFormat: TransactionFormat | undefined;
}

export interface SubmitAndWaitResponse {
  /**
   * The id of the transaction that resulted from the submitted command.
   * Must be a valid LedgerString (as described in ``value.proto``).
   * Required
   */
  updateId: string;
  /**
   * The details of the offset field are described in ``community/ledger-api/README.md``.
   * Required
   */
  completionOffset: number;
}

export interface SubmitAndWaitForTransactionResponse {
  /**
   * The transaction that resulted from the submitted command.
   * The transaction might contain no events (request conditions result in filtering out all of them).
   * Required
   */
  transaction: Transaction | undefined;
}

/** Provided for backwards compatibility, it will be removed in the Canton version 3.4.0. */
export interface SubmitAndWaitForTransactionTreeResponse {
  /**
   * The transaction tree that resulted from the submitted command.
   * The transaction might contain no events (request conditions result in filtering out all of them).
   * Required
   */
  transaction: TransactionTree | undefined;
}

/** This reassignment is executed as a single atomic update. */
export interface SubmitAndWaitForReassignmentRequest {
  /**
   * The reassignment commands to be submitted.
   * Required
   */
  reassignmentCommands:
    | ReassignmentCommands
    | undefined;
  /**
   * Optional
   * If no event_format provided, the result will contain no events.
   * The events in the result, will take shape TRANSACTION_SHAPE_ACS_DELTA.
   */
  eventFormat: EventFormat | undefined;
}

export interface SubmitAndWaitForReassignmentResponse {
  /**
   * The reassignment that resulted from the submitted reassignment command.
   * The reassignment might contain no events (request conditions result in filtering out all of them).
   * Required
   */
  reassignment: Reassignment | undefined;
}

function createBaseSubmitAndWaitRequest(): SubmitAndWaitRequest {
  return { commands: undefined };
}

export const SubmitAndWaitRequest: MessageFns<SubmitAndWaitRequest> = {
  encode(message: SubmitAndWaitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commands !== undefined) {
      Commands.encode(message.commands, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitAndWaitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitAndWaitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commands = Commands.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitAndWaitRequest {
    return { commands: isSet(object.commands) ? Commands.fromJSON(object.commands) : undefined };
  },

  toJSON(message: SubmitAndWaitRequest): unknown {
    const obj: any = {};
    if (message.commands !== undefined) {
      obj.commands = Commands.toJSON(message.commands);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitAndWaitRequest>, I>>(base?: I): SubmitAndWaitRequest {
    return SubmitAndWaitRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitAndWaitRequest>, I>>(object: I): SubmitAndWaitRequest {
    const message = createBaseSubmitAndWaitRequest();
    message.commands = (object.commands !== undefined && object.commands !== null)
      ? Commands.fromPartial(object.commands)
      : undefined;
    return message;
  },
};

function createBaseSubmitAndWaitForTransactionRequest(): SubmitAndWaitForTransactionRequest {
  return { commands: undefined, transactionFormat: undefined };
}

export const SubmitAndWaitForTransactionRequest: MessageFns<SubmitAndWaitForTransactionRequest> = {
  encode(message: SubmitAndWaitForTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.commands !== undefined) {
      Commands.encode(message.commands, writer.uint32(10).fork()).join();
    }
    if (message.transactionFormat !== undefined) {
      TransactionFormat.encode(message.transactionFormat, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitAndWaitForTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitAndWaitForTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.commands = Commands.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transactionFormat = TransactionFormat.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitAndWaitForTransactionRequest {
    return {
      commands: isSet(object.commands) ? Commands.fromJSON(object.commands) : undefined,
      transactionFormat: isSet(object.transactionFormat)
        ? TransactionFormat.fromJSON(object.transactionFormat)
        : undefined,
    };
  },

  toJSON(message: SubmitAndWaitForTransactionRequest): unknown {
    const obj: any = {};
    if (message.commands !== undefined) {
      obj.commands = Commands.toJSON(message.commands);
    }
    if (message.transactionFormat !== undefined) {
      obj.transactionFormat = TransactionFormat.toJSON(message.transactionFormat);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitAndWaitForTransactionRequest>, I>>(
    base?: I,
  ): SubmitAndWaitForTransactionRequest {
    return SubmitAndWaitForTransactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitAndWaitForTransactionRequest>, I>>(
    object: I,
  ): SubmitAndWaitForTransactionRequest {
    const message = createBaseSubmitAndWaitForTransactionRequest();
    message.commands = (object.commands !== undefined && object.commands !== null)
      ? Commands.fromPartial(object.commands)
      : undefined;
    message.transactionFormat = (object.transactionFormat !== undefined && object.transactionFormat !== null)
      ? TransactionFormat.fromPartial(object.transactionFormat)
      : undefined;
    return message;
  },
};

function createBaseSubmitAndWaitResponse(): SubmitAndWaitResponse {
  return { updateId: "", completionOffset: 0 };
}

export const SubmitAndWaitResponse: MessageFns<SubmitAndWaitResponse> = {
  encode(message: SubmitAndWaitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.updateId !== "") {
      writer.uint32(10).string(message.updateId);
    }
    if (message.completionOffset !== 0) {
      writer.uint32(16).int64(message.completionOffset);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitAndWaitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitAndWaitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.updateId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.completionOffset = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitAndWaitResponse {
    return {
      updateId: isSet(object.updateId) ? gt.String(object.updateId) : "",
      completionOffset: isSet(object.completionOffset) ? gt.Number(object.completionOffset) : 0,
    };
  },

  toJSON(message: SubmitAndWaitResponse): unknown {
    const obj: any = {};
    if (message.updateId !== "") {
      obj.updateId = message.updateId;
    }
    if (message.completionOffset !== 0) {
      obj.completionOffset = Math.round(message.completionOffset);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitAndWaitResponse>, I>>(base?: I): SubmitAndWaitResponse {
    return SubmitAndWaitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitAndWaitResponse>, I>>(object: I): SubmitAndWaitResponse {
    const message = createBaseSubmitAndWaitResponse();
    message.updateId = object.updateId ?? "";
    message.completionOffset = object.completionOffset ?? 0;
    return message;
  },
};

function createBaseSubmitAndWaitForTransactionResponse(): SubmitAndWaitForTransactionResponse {
  return { transaction: undefined };
}

export const SubmitAndWaitForTransactionResponse: MessageFns<SubmitAndWaitForTransactionResponse> = {
  encode(message: SubmitAndWaitForTransactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transaction !== undefined) {
      Transaction.encode(message.transaction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitAndWaitForTransactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitAndWaitForTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transaction = Transaction.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitAndWaitForTransactionResponse {
    return { transaction: isSet(object.transaction) ? Transaction.fromJSON(object.transaction) : undefined };
  },

  toJSON(message: SubmitAndWaitForTransactionResponse): unknown {
    const obj: any = {};
    if (message.transaction !== undefined) {
      obj.transaction = Transaction.toJSON(message.transaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitAndWaitForTransactionResponse>, I>>(
    base?: I,
  ): SubmitAndWaitForTransactionResponse {
    return SubmitAndWaitForTransactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitAndWaitForTransactionResponse>, I>>(
    object: I,
  ): SubmitAndWaitForTransactionResponse {
    const message = createBaseSubmitAndWaitForTransactionResponse();
    message.transaction = (object.transaction !== undefined && object.transaction !== null)
      ? Transaction.fromPartial(object.transaction)
      : undefined;
    return message;
  },
};

function createBaseSubmitAndWaitForTransactionTreeResponse(): SubmitAndWaitForTransactionTreeResponse {
  return { transaction: undefined };
}

export const SubmitAndWaitForTransactionTreeResponse: MessageFns<SubmitAndWaitForTransactionTreeResponse> = {
  encode(message: SubmitAndWaitForTransactionTreeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transaction !== undefined) {
      TransactionTree.encode(message.transaction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitAndWaitForTransactionTreeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitAndWaitForTransactionTreeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transaction = TransactionTree.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitAndWaitForTransactionTreeResponse {
    return { transaction: isSet(object.transaction) ? TransactionTree.fromJSON(object.transaction) : undefined };
  },

  toJSON(message: SubmitAndWaitForTransactionTreeResponse): unknown {
    const obj: any = {};
    if (message.transaction !== undefined) {
      obj.transaction = TransactionTree.toJSON(message.transaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitAndWaitForTransactionTreeResponse>, I>>(
    base?: I,
  ): SubmitAndWaitForTransactionTreeResponse {
    return SubmitAndWaitForTransactionTreeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitAndWaitForTransactionTreeResponse>, I>>(
    object: I,
  ): SubmitAndWaitForTransactionTreeResponse {
    const message = createBaseSubmitAndWaitForTransactionTreeResponse();
    message.transaction = (object.transaction !== undefined && object.transaction !== null)
      ? TransactionTree.fromPartial(object.transaction)
      : undefined;
    return message;
  },
};

function createBaseSubmitAndWaitForReassignmentRequest(): SubmitAndWaitForReassignmentRequest {
  return { reassignmentCommands: undefined, eventFormat: undefined };
}

export const SubmitAndWaitForReassignmentRequest: MessageFns<SubmitAndWaitForReassignmentRequest> = {
  encode(message: SubmitAndWaitForReassignmentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reassignmentCommands !== undefined) {
      ReassignmentCommands.encode(message.reassignmentCommands, writer.uint32(10).fork()).join();
    }
    if (message.eventFormat !== undefined) {
      EventFormat.encode(message.eventFormat, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitAndWaitForReassignmentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitAndWaitForReassignmentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reassignmentCommands = ReassignmentCommands.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventFormat = EventFormat.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitAndWaitForReassignmentRequest {
    return {
      reassignmentCommands: isSet(object.reassignmentCommands)
        ? ReassignmentCommands.fromJSON(object.reassignmentCommands)
        : undefined,
      eventFormat: isSet(object.eventFormat) ? EventFormat.fromJSON(object.eventFormat) : undefined,
    };
  },

  toJSON(message: SubmitAndWaitForReassignmentRequest): unknown {
    const obj: any = {};
    if (message.reassignmentCommands !== undefined) {
      obj.reassignmentCommands = ReassignmentCommands.toJSON(message.reassignmentCommands);
    }
    if (message.eventFormat !== undefined) {
      obj.eventFormat = EventFormat.toJSON(message.eventFormat);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitAndWaitForReassignmentRequest>, I>>(
    base?: I,
  ): SubmitAndWaitForReassignmentRequest {
    return SubmitAndWaitForReassignmentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitAndWaitForReassignmentRequest>, I>>(
    object: I,
  ): SubmitAndWaitForReassignmentRequest {
    const message = createBaseSubmitAndWaitForReassignmentRequest();
    message.reassignmentCommands = (object.reassignmentCommands !== undefined && object.reassignmentCommands !== null)
      ? ReassignmentCommands.fromPartial(object.reassignmentCommands)
      : undefined;
    message.eventFormat = (object.eventFormat !== undefined && object.eventFormat !== null)
      ? EventFormat.fromPartial(object.eventFormat)
      : undefined;
    return message;
  },
};

function createBaseSubmitAndWaitForReassignmentResponse(): SubmitAndWaitForReassignmentResponse {
  return { reassignment: undefined };
}

export const SubmitAndWaitForReassignmentResponse: MessageFns<SubmitAndWaitForReassignmentResponse> = {
  encode(message: SubmitAndWaitForReassignmentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.reassignment !== undefined) {
      Reassignment.encode(message.reassignment, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitAndWaitForReassignmentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitAndWaitForReassignmentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.reassignment = Reassignment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitAndWaitForReassignmentResponse {
    return { reassignment: isSet(object.reassignment) ? Reassignment.fromJSON(object.reassignment) : undefined };
  },

  toJSON(message: SubmitAndWaitForReassignmentResponse): unknown {
    const obj: any = {};
    if (message.reassignment !== undefined) {
      obj.reassignment = Reassignment.toJSON(message.reassignment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitAndWaitForReassignmentResponse>, I>>(
    base?: I,
  ): SubmitAndWaitForReassignmentResponse {
    return SubmitAndWaitForReassignmentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitAndWaitForReassignmentResponse>, I>>(
    object: I,
  ): SubmitAndWaitForReassignmentResponse {
    const message = createBaseSubmitAndWaitForReassignmentResponse();
    message.reassignment = (object.reassignment !== undefined && object.reassignment !== null)
      ? Reassignment.fromPartial(object.reassignment)
      : undefined;
    return message;
  },
};

/**
 * Command Service is able to correlate submitted commands with completion data, identify timeouts, and return contextual
 * information with each tracking result. This supports the implementation of stateless clients.
 *
 * Note that submitted commands generally produce completion events as well, even in case a command gets rejected.
 * For example, the participant SHOULD produce a completion event for a rejection of a duplicate command.
 */
export interface CommandService {
  /**
   * Submits a single composite command and waits for its result.
   * Propagates the gRPC error of failed submissions including Daml interpretation errors.
   */
  SubmitAndWait(request: SubmitAndWaitRequest): Promise<SubmitAndWaitResponse>;
  /**
   * Submits a single composite command, waits for its result, and returns the transaction.
   * Propagates the gRPC error of failed submissions including Daml interpretation errors.
   */
  SubmitAndWaitForTransaction(
    request: SubmitAndWaitForTransactionRequest,
  ): Promise<SubmitAndWaitForTransactionResponse>;
  /**
   * Provided for backwards compatibility, it will be removed in the Canton version 3.4.0.
   * Submits a single composite command, waits for its result, and returns the transaction tree.
   * Propagates the gRPC error of failed submissions including Daml interpretation errors.
   */
  SubmitAndWaitForTransactionTree(request: SubmitAndWaitRequest): Promise<SubmitAndWaitForTransactionTreeResponse>;
  /**
   * Submits a single composite reassignment command, waits for its result, and returns the reassignment.
   * Propagates the gRPC error of failed submission.
   */
  SubmitAndWaitForReassignment(
    request: SubmitAndWaitForReassignmentRequest,
  ): Promise<SubmitAndWaitForReassignmentResponse>;
}

export const CommandServiceServiceName = "com.daml.ledger.api.v2.CommandService";
export class CommandServiceClientImpl implements CommandService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CommandServiceServiceName;
    this.rpc = rpc;
    this.SubmitAndWait = this.SubmitAndWait.bind(this);
    this.SubmitAndWaitForTransaction = this.SubmitAndWaitForTransaction.bind(this);
    this.SubmitAndWaitForTransactionTree = this.SubmitAndWaitForTransactionTree.bind(this);
    this.SubmitAndWaitForReassignment = this.SubmitAndWaitForReassignment.bind(this);
  }
  SubmitAndWait(request: SubmitAndWaitRequest): Promise<SubmitAndWaitResponse> {
    const data = SubmitAndWaitRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitAndWait", data);
    return promise.then((data) => SubmitAndWaitResponse.decode(new BinaryReader(data)));
  }

  SubmitAndWaitForTransaction(
    request: SubmitAndWaitForTransactionRequest,
  ): Promise<SubmitAndWaitForTransactionResponse> {
    const data = SubmitAndWaitForTransactionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitAndWaitForTransaction", data);
    return promise.then((data) => SubmitAndWaitForTransactionResponse.decode(new BinaryReader(data)));
  }

  SubmitAndWaitForTransactionTree(request: SubmitAndWaitRequest): Promise<SubmitAndWaitForTransactionTreeResponse> {
    const data = SubmitAndWaitRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitAndWaitForTransactionTree", data);
    return promise.then((data) => SubmitAndWaitForTransactionTreeResponse.decode(new BinaryReader(data)));
  }

  SubmitAndWaitForReassignment(
    request: SubmitAndWaitForReassignmentRequest,
  ): Promise<SubmitAndWaitForReassignmentResponse> {
    const data = SubmitAndWaitForReassignmentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitAndWaitForReassignment", data);
    return promise.then((data) => SubmitAndWaitForReassignmentResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
