// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/trace_context.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.daml.ledger.api.v2";

export interface TraceContext {
  /** https://www.w3.org/TR/trace-context/ */
  traceparent?: string | undefined;
  tracestate?: string | undefined;
}

function createBaseTraceContext(): TraceContext {
  return { traceparent: undefined, tracestate: undefined };
}

export const TraceContext: MessageFns<TraceContext> = {
  encode(message: TraceContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.traceparent !== undefined) {
      writer.uint32(10).string(message.traceparent);
    }
    if (message.tracestate !== undefined) {
      writer.uint32(18).string(message.tracestate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TraceContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTraceContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.traceparent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tracestate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TraceContext {
    return {
      traceparent: isSet(object.traceparent) ? gt.String(object.traceparent) : undefined,
      tracestate: isSet(object.tracestate) ? gt.String(object.tracestate) : undefined,
    };
  },

  toJSON(message: TraceContext): unknown {
    const obj: any = {};
    if (message.traceparent !== undefined) {
      obj.traceparent = message.traceparent;
    }
    if (message.tracestate !== undefined) {
      obj.tracestate = message.tracestate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TraceContext>, I>>(base?: I): TraceContext {
    return TraceContext.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TraceContext>, I>>(object: I): TraceContext {
    const message = createBaseTraceContext();
    message.traceparent = object.traceparent ?? undefined;
    message.tracestate = object.tracestate ?? undefined;
    return message;
  },
};

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
