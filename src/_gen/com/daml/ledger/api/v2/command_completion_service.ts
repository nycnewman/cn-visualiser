// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               unknown
// source: com/daml/ledger/api/v2/command_completion_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { Completion } from "./completion";
import { OffsetCheckpoint } from "./offset_checkpoint";

export const protobufPackage = "com.daml.ledger.api.v2";

export interface CompletionStreamRequest {
  /**
   * Only completions of commands submitted with the same user_id will be visible in the stream.
   * Must be a valid UserIdString (as described in ``value.proto``).
   * Required unless authentication is used with a user token.
   * In that case, the token's user-id will be used for the request's user_id.
   */
  userId: string;
  /**
   * Non-empty list of parties whose data should be included.
   * The stream shows only completions of commands for which at least one of the ``act_as`` parties is in the given set of parties.
   * Must be a valid PartyIdString (as described in ``value.proto``).
   * Required
   */
  parties: string[];
  /**
   * This optional field indicates the minimum offset for completions. This can be used to resume an earlier completion stream.
   * If not set the ledger uses the ledger begin offset instead.
   * If specified, it must be a valid absolute offset (positive integer) or zero (ledger begin offset).
   * If the ledger has been pruned, this parameter must be specified and greater than the pruning offset.
   */
  beginExclusive: number;
}

export interface CompletionStreamResponse {
  completion?: Completion | undefined;
  offsetCheckpoint?: OffsetCheckpoint | undefined;
}

function createBaseCompletionStreamRequest(): CompletionStreamRequest {
  return { userId: "", parties: [], beginExclusive: 0 };
}

export const CompletionStreamRequest: MessageFns<CompletionStreamRequest> = {
  encode(message: CompletionStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.parties) {
      writer.uint32(18).string(v!);
    }
    if (message.beginExclusive !== 0) {
      writer.uint32(24).int64(message.beginExclusive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompletionStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompletionStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.parties.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.beginExclusive = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompletionStreamRequest {
    return {
      userId: isSet(object.userId) ? gt.String(object.userId) : "",
      parties: gt.Array.isArray(object?.parties) ? object.parties.map((e: any) => gt.String(e)) : [],
      beginExclusive: isSet(object.beginExclusive) ? gt.Number(object.beginExclusive) : 0,
    };
  },

  toJSON(message: CompletionStreamRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.parties?.length) {
      obj.parties = message.parties;
    }
    if (message.beginExclusive !== 0) {
      obj.beginExclusive = Math.round(message.beginExclusive);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompletionStreamRequest>, I>>(base?: I): CompletionStreamRequest {
    return CompletionStreamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompletionStreamRequest>, I>>(object: I): CompletionStreamRequest {
    const message = createBaseCompletionStreamRequest();
    message.userId = object.userId ?? "";
    message.parties = object.parties?.map((e) => e) || [];
    message.beginExclusive = object.beginExclusive ?? 0;
    return message;
  },
};

function createBaseCompletionStreamResponse(): CompletionStreamResponse {
  return { completion: undefined, offsetCheckpoint: undefined };
}

export const CompletionStreamResponse: MessageFns<CompletionStreamResponse> = {
  encode(message: CompletionStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.completion !== undefined) {
      Completion.encode(message.completion, writer.uint32(10).fork()).join();
    }
    if (message.offsetCheckpoint !== undefined) {
      OffsetCheckpoint.encode(message.offsetCheckpoint, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompletionStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompletionStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.completion = Completion.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.offsetCheckpoint = OffsetCheckpoint.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompletionStreamResponse {
    return {
      completion: isSet(object.completion) ? Completion.fromJSON(object.completion) : undefined,
      offsetCheckpoint: isSet(object.offsetCheckpoint) ? OffsetCheckpoint.fromJSON(object.offsetCheckpoint) : undefined,
    };
  },

  toJSON(message: CompletionStreamResponse): unknown {
    const obj: any = {};
    if (message.completion !== undefined) {
      obj.completion = Completion.toJSON(message.completion);
    }
    if (message.offsetCheckpoint !== undefined) {
      obj.offsetCheckpoint = OffsetCheckpoint.toJSON(message.offsetCheckpoint);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompletionStreamResponse>, I>>(base?: I): CompletionStreamResponse {
    return CompletionStreamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompletionStreamResponse>, I>>(object: I): CompletionStreamResponse {
    const message = createBaseCompletionStreamResponse();
    message.completion = (object.completion !== undefined && object.completion !== null)
      ? Completion.fromPartial(object.completion)
      : undefined;
    message.offsetCheckpoint = (object.offsetCheckpoint !== undefined && object.offsetCheckpoint !== null)
      ? OffsetCheckpoint.fromPartial(object.offsetCheckpoint)
      : undefined;
    return message;
  },
};

/**
 * Allows clients to observe the status of their submissions.
 * Commands may be submitted via the Command Submission Service.
 * The on-ledger effects of their submissions are disclosed by the Update Service.
 *
 * Commands may fail in 2 distinct manners:
 *
 * 1. Failure communicated synchronously in the gRPC error of the submission.
 * 2. Failure communicated asynchronously in a Completion, see ``completion.proto``.
 *
 * Note that not only successfully submitted commands MAY produce a completion event. For example, the participant MAY
 * choose to produce a completion event for a rejection of a duplicate command.
 *
 * Clients that do not receive a successful completion about their submission MUST NOT assume that it was successful.
 * Clients SHOULD subscribe to the CompletionStream before starting to submit commands to prevent race conditions.
 */
export interface CommandCompletionService {
  /** Subscribe to command completion events. */
  CompletionStream(request: CompletionStreamRequest): Observable<CompletionStreamResponse>;
}

export const CommandCompletionServiceServiceName = "com.daml.ledger.api.v2.CommandCompletionService";
export class CommandCompletionServiceClientImpl implements CommandCompletionService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CommandCompletionServiceServiceName;
    this.rpc = rpc;
    this.CompletionStream = this.CompletionStream.bind(this);
  }
  CompletionStream(request: CompletionStreamRequest): Observable<CompletionStreamResponse> {
    const data = CompletionStreamRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "CompletionStream", data);
    return result.pipe(map((data) => CompletionStreamResponse.decode(new BinaryReader(data))));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

declare const self: any | undefined;
declare const window: any | undefined;
declare const global: any | undefined;
const gt: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = gt.Number(int64.toString());
  if (num > gt.Number.MAX_SAFE_INTEGER) {
    throw new gt.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < gt.Number.MIN_SAFE_INTEGER) {
    throw new gt.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
